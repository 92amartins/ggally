covr_shiny_app:
  cov <- covr::package_coverage()
  covr::shine(cov)
covr_zero_coverage:
  zero <- function(...) {
    # check out the link below to work most efficiently
    # https://codecov.io/github/ggobi/ggally/features/suggestions?ref=dev
    cov <- covr::package_coverage(...)
    covr::zero_coverage(cov)
  }
  zero()
lintr_package:
  # remove line in "linters:" above
  devtools::lint()
  # fix errors,
  # repeat until no errors
lintr_code_to_create_lintr:
  library(magrittr)
  library(dplyr)
  lintr::lint_package() %>%
    as.data.frame %>%
    group_by(linter) %>%
    tally(sort = TRUE) %$%
    sprintf("linters: with_defaults(\n    %s\n    NULL\n  )\n",
            paste0(linter, " = NULL, # ", n, collapse="\n    ")) %>%
    cat()
test_package:
  tp <- function(package = "./", ...) {
    devtools::document(package)
    devtools::test(package, ...)
  }
  tp()
test_file:
  tf <- function(file = "gg-plots", package = "./", spacer = "-") {
    devtools::load_all(package)
    testthat::test_file(file.path(package, "tests", "testthat", paste0("test", spacer, file, ".R")))
  }
  tf("zzz_ggpairs")
knit_vignettes:
  packagedocs::build_vignettes()
build_win:
  devtools::build_win(version = c("R-release", "R-devel"))
reverse_depends:
  check_rev_deps = function(pkgType = "mac.binary", ignore = NULL, bioconductor = FALSE) {
    curPkgType <- getOption("pkgType")
    on.exit({options(pkgType = curPkgType)})
    options(pkgType = pkgType)
    #
    # locally check the packages and install mac.binaries
    res <- devtools::revdep_check(
      type = pkgType,
      libpath = .libPaths()[1],
      bioconductor = bioconductor,
      ignore = ignore
    )
    #
    devtools::revdep_check_save_summary()
    devtools::revdep_check_print_problems()
    cat("\n\n")
    devtools::revdep_maintainers()
    invisible(res)
  }
  res <- check_rev_deps()
