
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "robustbase"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "robustbase-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('robustbase')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Animals2")
> ### * Animals2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Animals2
> ### Title: Brain and Body Weights for 65 Species of Land Animals
> ### Aliases: Animals2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Animals2)
> ## Sensible Plot needs doubly logarithmic scale
> plot(Animals2, log = "xy")
> 
> ## Regression example plot:
> plotbb <- function(bbdat) {
+   d.name <- deparse(substitute(bbdat))
+   plot(log(brain) ~ log(body), data = bbdat, main = d.name)
+   abline(       lm(log(brain) ~ log(body), data = bbdat))
+   abline(MASS::rlm(log(brain) ~ log(body), data = bbdat), col = 2)
+   legend("bottomright", leg = c("lm", "rlm"), col=1:2, lwd=1, inset = 1/20)
+ }
> plotbb(bbdat = Animals2)
> 
> ## The `same' plot for Rousseeuw's subset:
> data(Animals, package = "MASS")
> brain <- Animals[c(1:24, 26:25, 27:28),]
> plotbb(bbdat = brain)
> 
> lbrain <- log(brain)
> plot(mahalanobis(lbrain, colMeans(lbrain), var(lbrain)),
+      main = "Classical Mahalanobis Distances")
> mcd <- covMcd(lbrain)
> plot(mahalanobis(lbrain,mcd$center,mcd$cov),
+      main = "Robust (MCD) Mahalanobis Distances")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Animals2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BYlogreg")
> ### * BYlogreg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BYlogreg
> ### Title: Bianco-Yohai Estimator for Robust Logistic Regression
> ### Aliases: BYlogreg
> ### Keywords: robust regression nonlinear
> 
> ### ** Examples
> 
> set.seed(17)
> x0 <- matrix(rnorm(100,1))
> y  <- rbinom(100, size=1, prob= 0.5) # ~= as.numeric(runif(100) > 0.5)
> BY <- BYlogreg(x0,y)
Convergence Achieved
> BY <- BYlogreg(x0,y, trace.lev=TRUE)
k= 1, s1=   1.9992299: => new s1=    2.0696016
k= 2, s1=   2.0696016: => new s1=    2.1155094
Convergence Achieved
> 
> ## The "Vaso Constriction"  aka "skin" data:
> data(vaso)
> vX <- model.matrix( ~ log(Volume) + log(Rate), data=vaso)
> vY <- vaso[,"Y"]
> head(cbind(vX, vY))# 'X' does include the intercept
  (Intercept) log(Volume)  log(Rate) vY
1           1   1.3083328 -0.1923719  1
2           1   1.2527630  0.0861777  1
3           1   0.2231436  0.9162907  1
4           1  -0.2876821  0.4054651  1
5           1  -0.2231436  1.1631508  1
6           1  -0.3566749  1.2527630  1
> 
> vWBY <- BYlogreg(x0 = vX, y = vY, addIntercept=FALSE) # as 'vX' has it already
Convergence Achieved
> v.BY <- BYlogreg(x0 = vX, y = vY, addIntercept=FALSE, initwml=FALSE)
Convergence Achieved
> ## they are relatively close:
> stopifnot( all.equal(vWBY, v.BY, tolerance = 2e-4) )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BYlogreg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CrohnD")
> ### * CrohnD
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CrohnD
> ### Title: Crohn's Disease Adverse Events Data
> ### Aliases: CrohnD
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(CrohnD)
> str(CrohnD)
'data.frame':	117 obs. of  9 variables:
 $ ID     : int  19908 19909 19910 20908 20909 20910 21908 21909 21910 21911 ...
 $ nrAdvE : int  4 4 1 1 2 2 3 0 1 0 ...
 $ BMI    : num  25.2 23.8 23.1 25.7 25.9 ...
 $ height : int  163 164 164 165 170 168 161 168 154 157 ...
 $ country: Factor w/ 2 levels "c1","c2": 1 1 1 1 1 1 1 1 1 1 ...
 $ sex    : Factor w/ 2 levels "M","F": 2 2 2 2 2 2 2 2 2 2 ...
 $ age    : int  47 53 68 48 67 54 53 53 47 58 ...
 $ weight : int  67 64 62 70 75 81 69 74 76 82 ...
 $ treat  : Factor w/ 3 levels "placebo","d1",..: 1 2 1 3 1 2 2 1 3 1 ...
> with(CrohnD, ftable(table(sex,country, treat)))
            treat placebo d1 d2
sex country                    
M   c1                  5  5  3
    c2                  2  0  2
F   c1                 21 21 23
    c2                 11 13 11
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CrohnD", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("M.psi")
> ### * M.psi
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Mpsi
> ### Title: Psi / Chi / Wgt / Rho Functions for *M-Estimation
> ### Aliases: Mchi Mpsi Mwgt MrhoInf .Mchi .Mpsi .Mwgt .Mwgt.psi1 .MrhoInf
> ### Keywords: robust
> 
> ### ** Examples
> 
> x <- seq(-5,7, by=1/8)
> matplot(x, cbind(Mpsi(x, 4, "biweight"),
+                  Mchi(x, 4, "biweight"),
+                  Mwgt(x, 4, "biweight")), type = "l")
> abline(h=0, v=0, lty=2, col=adjustcolor("gray", 0.6))
> 
> hampelPsi
Hampel psi function (k1 = 1.487, k2 = 2.974, k3 = 5.948) 
> (ccHa <- hampelPsi @ xtras $ tuningP $ k)
[1] 1.486989 2.973978 5.947955
> psHa <- hampelPsi@psi(x)
> ## using Mpsi():
> Mp.Ha <- Mpsi(x, cc = ccHa, psi = "hampel")
> stopifnot(all.equal(Mp.Ha, psHa, tolerance = 1e-15))
> 
> psi.huber <- .Mwgt.psi1("huber")
> if(getRversion() >= "3.0.0")
+ stopifnot(identical(psi.huber, .Mwgt.psi1("huber", 1.345),
+                     ignore.env=TRUE))
> curve(psi.huber(x), -3, 5, col=2, ylim = 0:1)
> curve(psi.huber(x, deriv=1), add=TRUE, col=3)
> 
> ## and show that this is indeed the same as  MASS::psi.huber() :
> x <- runif(256, -2,3)
> stopifnot(all.equal(psi.huber(x), MASS::psi.huber(x)),
+           all.equal(                 psi.huber(x, deriv=1),
+                     as.numeric(MASS::psi.huber(x, deriv=1))))
> 
> ## and how to get  MASS::psi.hampel():
> psi.hampel <- .Mwgt.psi1("Hampel", c(2,4,8))
> x <- runif(256, -4, 10)
> stopifnot(all.equal(psi.hampel(x), MASS::psi.hampel(x)),
+           all.equal(                 psi.hampel(x, deriv=1),
+                     as.numeric(MASS::psi.hampel(x, deriv=1))))
> 
> ## M*() preserving attributes :
> x <- matrix(x, 32, 8, dimnames=list(paste0("r",1:32), col=letters[1:8]))
> comment(x) <- "a vector which is a matrix"
> px <- Mpsi(x, cc = ccHa, psi = "hampel")
> stopifnot(identical(attributes(x), attributes(px)))
> 
> ## The "optimal" psi exists in two versions "in the litterature": ---
> ## Maronna et al. 2006, 5.9.1, p.144f:
> psi.M2006 <- function(x, c = 0.013)
+   sign(x) * pmax(0, abs(x) - c/dnorm(x))
> ## and the other is the one in robustbase from 'robust': via Mpsi(.., "optimal")
> ## Here are both for 95% efficiency:
> (c106 <- .Mpsi.tuning.default("optimal"))
[1] 1.060158
> c1 <- curve(Mpsi(x, cc = c106, psi="optimal"), -5, 7, n=1001)
> c2 <- curve(psi.M2006(x), add=TRUE, n=1001, col=adjustcolor(2,0.4), lwd=2)
> abline(0,1, lty=3); abline(v=0,h=0, lty=3)
> ## the two psi's are similar, but really quite different
> 
> ## a zoom into Maronna et al's:
> c3 <- curve(psi.M2006(x), -.5, 1, n=1001); abline(h=0,v=0, lty=3);abline(0,1, lty=2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("M.psi", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("NOxEmissions")
> ### * NOxEmissions
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: NOxEmissions
> ### Title: NOx Air Pollution Data
> ### Aliases: NOxEmissions
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(NOxEmissions)
> plot(LNOx ~ LNOxEm, data = NOxEmissions, cex = 0.25, col = "gray30")
> 
> ## Not run: 
> ##D ## these take too much time --
> ##D  ## p = 340  ==> already Least Squares is not fast
> ##D  (lmNOx <- lm(LNOx ~ . ,data = NOxEmissions))
> ##D  plot(lmNOx) #->  indication of 1 outlier
> ##D 
> ##D  M.NOx <- MASS::rlm(LNOx ~ . , data = NOxEmissions)
> ##D  ## M-estimation works
> ##D  ## whereas  MM-estimation fails:
> ##D  try(MM.NOx <- MASS::rlm(LNOx ~ . , data = NOxEmissions, method = "MM"))
> ##D  ## namely because S-estimation fails:
> ##D  try(lts.NOx <- ltsReg(LNOx ~ . , data = NOxEmissions))
> ##D  try(lmR.NOx <- lmrob (LNOx ~ . , data = NOxEmissions))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("NOxEmissions", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Qn")
> ### * Qn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Qn
> ### Title: Robust Location-Free Scale Estimate More Efficient than MAD
> ### Aliases: Qn Qn.old s_Qn
> ### Keywords: robust univar
> 
> ### ** Examples
> 
> set.seed(153)
> x <- sort(c(rnorm(80), rt(20, df = 1)))
> s_Qn(x, mu.too = TRUE)
[1] -0.2154659  1.1766966
> Qn(x, finite.corr = FALSE)
[1] 1.220186
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Qn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SiegelsEx")
> ### * SiegelsEx
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SiegelsEx
> ### Title: Siegel's Exact Fit Example Data
> ### Aliases: SiegelsEx
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(SiegelsEx)
> plot(SiegelsEx, main = "Siegel's example for 'exact fit'")
> abline(          lm(y ~ x, data = SiegelsEx))
> abline(MASS::lqs(y ~ x, data = SiegelsEx, method = "lms"), col = 2)
> legend("topright", leg = c("lm", "LMS"), col=1:2, lwd=1, inset = 1/20)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SiegelsEx", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Sn")
> ### * Sn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Sn
> ### Title: Robust Location-Free Scale Estimate More Efficient than MAD
> ### Aliases: Sn s_Sn
> ### Keywords: robust univar
> 
> ### ** Examples
> 
> x <- c(1:10, 100+1:9)# 9 outliers out of 19
> Sn(x)
[1] 11.2671
> Sn(x, c=1)# 9
[1] 9
> Sn(x[1:18], c=1)# 9
[1] 9
> set.seed(153)
> x <- sort(c(rnorm(80), rt(20, df = 1)))
> s_Sn(x, mu.too=TRUE)
[1] -0.2154659  1.1127858
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Sn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("adjOutlyingness")
> ### * adjOutlyingness
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: adjOutlyingness
> ### Title: Compute (Skewness-adjusted) Multivariate Outlyingness
> ### Aliases: adjOutlyingness
> ### Keywords: robust multivariate
> 
> ### ** Examples
> 
> ## An Example with bad condition number and "border case" outliers
> 
> dim(longley)
[1] 16  7
> set.seed(1) ## result is random!
> ao1 <- adjOutlyingness(longley)
> ## which are outlying ?
> which(!ao1$nonOut) ## one: "1948" - for this seed! (often: none)
1948 
   2 
> stopifnot(all(ao1$nonOut[-2]))
> 
> ## An Example with outliers :
> 
> dim(hbk)
[1] 75  4
> set.seed(1)
> ao.hbk <- adjOutlyingness(hbk)
> str(ao.hbk)
List of 6
 $ adjout      : num [1:75] 30.2 31.1 33 33.9 33.3 ...
 $ iter        : int 250
 $ MCadjout    : num 0.205
 $ Qalph.adjout: Named num [1:2] 1.47 2.77
  ..- attr(*, "names")= chr [1:2] "25%" "75%"
 $ cutoff      : Named num 6.37
  ..- attr(*, "names")= chr "75%"
 $ nonOut      : logi [1:75] FALSE FALSE FALSE FALSE FALSE FALSE ...
> hist(ao.hbk $adjout)## really two groups
> table(ao.hbk$nonOut)## 14 outliers, 61 non-outliers:

FALSE  TRUE 
   14    61 
> ## outliers are :
> which(! ao.hbk$nonOut) # 1 .. 14   --- but not for all random seeds!
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
> 
> ## here, they are the same as found by (much faster) MCD:
> cc <- covMcd(hbk)
> stopifnot(all(cc$mcd.wt == ao.hbk$nonOut))
> 
> ## This is revealing (about 1--2 cases, where outliers are *not* == 1:14
> ##  but needs almost 1 [sec] per call:
> if(interactive()) {
+   for(i in 1:30) {
+     print(system.time(ao.hbk <- adjOutlyingness(hbk)))
+     if(!identical(iout <- which(!ao.hbk$nonOut), 1:14)) {
+ 	 cat("Outliers:\n"); print(iout)
+     }
+   }
+ }
> 
> ## "Central" outlyingness: *not* calling mc()  anymore, since 2014-12-11:
> trace(mc)
> out <- capture.output(
+   oo <- adjOutlyingness(hbk, clower=0, cupper=0)
+ )
> untrace(mc)
> stopifnot(length(out) == 0)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("adjOutlyingness", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("adjbox")
> ### * adjbox
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: adjbox
> ### Title: Plot an Adjusted Boxplot for Skew Distributions
> ### Aliases: adjbox adjbox.default adjbox.formula
> ### Keywords: hplot
> 
> ### ** Examples
> 
> if(require("boot")) {
+  ### Hubert and Vandervieren (2006), p. 10, Fig. 4.
+  data(coal, package = "boot")
+  coaldiff <- diff(coal$date)
+  op <- par(mfrow = c(1,2))
+  boxplot(coaldiff, main = "Original Boxplot")
+  adjbox(coaldiff, main  = "Adjusted Boxplot")
+  par(op)
+ }
Loading required package: boot

Attaching package: ‘boot’

The following object is masked from ‘package:robustbase’:

    salinity

> 
> ### Hubert and Vandervieren (2006), p. 11, Fig. 6. -- enhanced
> op <- par(mfrow = c(2,2), mar = c(1,3,3,1), oma = c(0,0,3,0))
> with(condroz, {
+  boxplot(Ca, main = "Original Boxplot")
+  adjbox (Ca, main = "Adjusted Boxplot")
+  boxplot(Ca, main = "Original Boxplot [log]", log = "y")
+  adjbox (Ca, main = "Adjusted Boxplot [log]", log = "y")
+ })
> mtext("'Ca' from data(condroz)",
+       outer=TRUE, font = par("font.main"), cex = 2)
> par(op)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("adjbox", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:boot’

> nameEx("adjboxStats")
> ### * adjboxStats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: adjboxStats
> ### Title: Statistics for Skewness-adjusted Boxplots
> ### Aliases: adjboxStats
> ### Keywords: robust univar
> 
> ### ** Examples
> 
> data(condroz)
> adjboxStats(ccA <- condroz[,"Ca"])
$stats
[1] 204.0 302.0 364.5 438.5 753.8

$n
[1] 428

$conf
[1] 354.0752 374.9248

$fence
[1] 195.3720 772.4937

$out
 [1]  780.0  988.4  118.4  824.0  119.3 2251.1 3045.1 2383.1 3880.1 1423.5
[11]  100.7 2851.1  969.5  859.9  920.9

> adjboxStats(ccA, doReflect = TRUE)# small difference in fence
$stats
[1] 204.0 302.0 364.5 438.5 753.8

$n
[1] 428

$conf
[1] 354.0752 374.9248

$fence
[1] 195.3898 772.5356

$out
 [1]  780.0  988.4  118.4  824.0  119.3 2251.1 3045.1 2383.1 3880.1 1423.5
[11]  100.7 2851.1  969.5  859.9  920.9

> 
> ## Test reflection invariance [was not ok, up to and including robustbase_0.7-8]
> a1 <- adjboxStats( ccA, doReflect = TRUE)
> a2 <- adjboxStats(-ccA, doReflect = TRUE)
> 
> nm1 <- c("stats", "conf", "fence")
> stopifnot(all.equal(       a1[nm1],
+                     lapply(a2[nm1], function(u) rev(-u))),
+           all.equal(a1[["out"]], -a2[["out"]]))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("adjboxStats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aircraft")
> ### * aircraft
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aircraft
> ### Title: Aircraft Data
> ### Aliases: aircraft
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(aircraft)
> summary( lm.airc <-        lm(Y ~ ., data = aircraft))

Call:
lm(formula = Y ~ ., data = aircraft)

Residuals:
    Min      1Q  Median      3Q     Max 
-14.891  -3.955  -1.233   5.753  17.594 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -3.7913892 10.1157023  -0.375  0.71219    
X1          -3.8529189  1.7630016  -2.185  0.04232 *  
X2           2.4882665  1.1867538   2.097  0.05042 .  
X3           0.0034988  0.0004790   7.305 8.72e-07 ***
X4          -0.0019537  0.0004986  -3.918  0.00101 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 8.406 on 18 degrees of freedom
Multiple R-squared:  0.8836,	Adjusted R-squared:  0.8578 
F-statistic: 34.17 on 4 and 18 DF,  p-value: 3.501e-08

> summary(rlm.airc <- MASS::rlm(Y ~ ., data = aircraft))

Call: rlm(formula = Y ~ ., data = aircraft)
Residuals:
     Min       1Q   Median       3Q      Max 
-13.0636  -3.6520  -0.6103   4.7975  26.9243 

Coefficients:
            Value   Std. Error t value
(Intercept) -1.2850  8.6035    -0.1494
X1          -3.4214  1.4994    -2.2818
X2           2.2160  1.0093     2.1955
X3           0.0029  0.0004     7.2207
X4          -0.0016  0.0004    -3.6940

Residual standard error: 6.946 on 18 degrees of freedom
> 
> aircraft.x <- data.matrix(aircraft[,1:4])
> c_air <- covMcd(aircraft.x)
> c_air
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=14); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = aircraft.x)
Log(Det.):  30.28 

Robust Estimate of Location:
       X1         X2         X3         X4  
    4.188      1.944  14404.688  11165.000  
Robust Estimate of Covariance:
            X1         X2        X3        X4
X1   4.585e+00    -0.2242    -10145    -14232
X2  -2.242e-01     0.5424      2762      2374
X3  -1.015e+04  2762.1543  47473828  50234079
X4  -1.423e+04  2373.6103  50234079  71879051
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aircraft", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("airmay")
> ### * airmay
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: airmay
> ### Title: Air Quality Data
> ### Aliases: airmay
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(airmay)
> summary(lm.airmay <- lm(Y ~ ., data=airmay))

Call:
lm(formula = Y ~ ., data = airmay)

Residuals:
    Min      1Q  Median      3Q     Max 
-25.362 -12.785  -2.170   9.445  55.433 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)   
(Intercept) -79.99271   46.81655  -1.709  0.10299   
X1           -0.01868    0.03628  -0.515  0.61219   
X2           -1.99577    1.14092  -1.749  0.09558 . 
X3            1.96332    0.66368   2.958  0.00777 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 18.02 on 20 degrees of freedom
  (7 observations deleted due to missingness)
Multiple R-squared:  0.4612,	Adjusted R-squared:  0.3804 
F-statistic: 5.706 on 3 and 20 DF,  p-value: 0.005445

> 
> airmay.x <- data.matrix(airmay[,1:3])
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("airmay", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("alcohol")
> ### * alcohol
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: alcohol
> ### Title: Alcohol Solubility in Water Data
> ### Aliases: alcohol
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(alcohol)
> ## version of data set with trivial names, as
> s.alcohol <- alcohol
> names(s.alcohol) <- paste("Col", 1:7, sep='')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("alcohol", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ambientNOxCH")
> ### * ambientNOxCH
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ambientNOxCH
> ### Title: Daily Means of NOx (mono-nitrogen oxides) in air
> ### Aliases: ambientNOxCH
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ambientNOxCH)
> str (ambientNOxCH)
'data.frame':	366 obs. of  14 variables:
 $ date: Date, format: "2004-01-01" "2004-01-02" ...
 $ ad  : num  12 17 12.3 13.5 47 ...
 $ ba  : num  14.66 18.71 8.75 19.35 57.47 ...
 $ ef  : num  17.3 40.4 35.1 26.3 53.3 ...
 $ la  : num  7.73 8.01 6.83 11.84 10.74 ...
 $ lu  : num  22.7 21.2 26.8 26.5 58.6 ...
 $ re  : num  20.1 45.2 8.4 37.4 110.4 ...
 $ ri  : num  6.32 8.73 10.31 7 1.4 ...
 $ se  : num  11.3 15.4 11 19.4 NA ...
 $ si  : num  13.46 15.76 9.82 13.02 37.27 ...
 $ st  : num  13.4 19.3 16.5 15 27.8 ...
 $ su  : num  27 35.8 34.9 34.8 78.7 ...
 $ sz  : num  16.2 21.2 16.4 18.1 42.7 ...
 $ zg  : num  25.5 34.5 29.1 26.2 76.9 ...
> 
> yearly <- log(colMeans(ambientNOxCH[,-1], na.rm=TRUE))
> xlim <- range(yearly)
> lNOx <- log(ambientNOxCH[, -1])
> days <-     ambientNOxCH[, "date"]
> 
> ## Subset of 9 days starting at April 4:
> idays <- seq(which(ambientNOxCH$date=="2004-12-04"), length=9)
> ylim <- range(lNOx[idays,],na.rm=TRUE)
> op <- par(mfrow=c(3,3),mar=rep(1,4), oma = c(0,0,2,0))
> 
> for (id in idays) {
+   daily <- unlist(lNOx[id,])
+   plot(NA, xlim=xlim,ylim=ylim, ann=FALSE, type = "n")
+   abline(0:1, col="light gray")
+   abline(lmrob(daily~yearly, na.action=na.exclude),
+          col="red", lwd=2)
+   text(yearly, daily, names(yearly), col="blue")
+   mtext(days[id], side=1, line=-1.2, cex=.75, adj=.98)
+ }
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
> mtext("Daily ~ Yearly  log( NOx mean values ) at 13 Swiss locations",
+       outer=TRUE)
> par(op)
> 
> ## do all 366 regressions:  Least Squares and Robust:
> LS <- lapply(1:nrow(ambientNOxCH), function(id)
+              lm(unlist(lNOx[id,]) ~ yearly,
+                 na.action = na.exclude))
> R <- lapply(1:nrow(ambientNOxCH),
+             function(id) lmrob(unlist(lNOx[id,]) ~ yearly,
+                                na.action = na.exclude))
Warning in lmrob.fit(x, y, control, init = init, mf = mf) :
  M-step did NOT converge. Returning unconverged SM-estimate
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.fit(x, y, control, init = init, mf = mf) :
  M-step did NOT converge. Returning unconverged SM-estimate
Warning in lmrob.fit(x, y, control, init = init, mf = mf) :
  M-step did NOT converge. Returning unconverged SM-estimate
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.fit(x, y, control, init = init, mf = mf) :
  M-step did NOT converge. Returning unconverged SM-estimate
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
Warning in lmrob.S(x, y, control = control, mf = mf) :
  find_scale() did not converge in 'maxit.scale' (= 200) iterations
> ## currently 4 warnings about non-convergence;
> ## which ones?
> days[notOk <- ! sapply(R, `[[`, "converged") ]
[1] "2004-01-10" "2004-05-12" "2004-05-16" "2004-11-16"
> ## "2004-01-10" "2004-05-12" "2004-05-16" "2004-11-16"
> 
> ## first problematic case:
> daily <- unlist(lNOx[which(notOk)[1],])
> plot(daily ~ yearly,
+      main = paste("lmrob() non-convergent:",days[notOk[1]]))
> rr <- lmrob(daily ~ yearly, na.action = na.exclude,
+             control = lmrob.control(trace=3, max.it = 100))
lmrob_S(n = 13, nRes = 500): fast_s() [non-large n]:
 Subsampling to find candidate betas:
  Sample[  0]: after refine_(*, conv=FALSE):
   beta_ref : 0.410243 0.743998 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.40713960042917
  Sample[  0]: found new candidate with scale 0.5459169
               worst scale is now 1e+20
  Sample[  1]: after refine_(*, conv=FALSE):
   beta_ref : 0.171545 0.815170 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.45332402557657
  Sample[  1]: found new candidate with scale 0.5356553
               worst scale is now 0.5459169
  Sample[  2]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502365
  Sample[  2]: found new candidate with scale 0.2858261
               worst scale is now 0.5356553
  Sample[  3]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[  3]: found new candidate with scale 0.382818
               worst scale is now 0.382818
  Sample[  4]: after refine_(*, conv=FALSE):
   beta_ref : -1.942373 1.558028 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.744918088188393
  Sample[  5]: after refine_(*, conv=FALSE):
   beta_ref : -2.144151 1.587919 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.399338780038278
  Sample[  6]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[  7]: after refine_(*, conv=FALSE):
   beta_ref : -0.587028 1.149354 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312564686828127
  Sample[  7]: found new candidate with scale 0.2806322
               worst scale is now 0.2858261
  Sample[  8]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.36594337244165
  Sample[  9]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[ 10]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[ 11]: after refine_(*, conv=FALSE):
   beta_ref : -0.244111 0.966143 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.48063687575061
  Sample[ 12]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280547
  Sample[ 13]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[ 14]: after refine_(*, conv=FALSE):
   beta_ref : -1.672292 1.449558 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.348265804600926
  Sample[ 15]: after refine_(*, conv=FALSE):
   beta_ref : 0.302657 0.780686 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.9669857749306
  Sample[ 16]: after refine_(*, conv=FALSE):
   beta_ref : -0.397375 1.027529 
   with ||beta_ref - beta_cand|| = 0, --> sc = 15.1481999432314
  Sample[ 17]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.91889370623179
  Sample[ 18]: after refine_(*, conv=FALSE):
   beta_ref : -1.924791 1.522802 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.741363565741793
  Sample[ 19]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856023
  Sample[ 19]: found new candidate with scale 0.2797003
               worst scale is now 0.2806322
  Sample[ 20]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867086
  Sample[ 21]: after refine_(*, conv=FALSE):
   beta_ref : 0.145859 0.834630 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.597892842089404
  Sample[ 22]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351463
  Sample[ 23]: after refine_(*, conv=FALSE):
   beta_ref : -0.199361 0.979666 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90760566523583
  Sample[ 24]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285346
  Sample[ 25]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286113
  Sample[ 26]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415408
  Sample[ 27]: after refine_(*, conv=FALSE):
   beta_ref : -0.244111 0.966143 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.48063687575041
  Sample[ 28]: after refine_(*, conv=FALSE):
   beta_ref : -1.856659 1.532423 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.885734481714681
  Sample[ 29]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[ 30]: after refine_(*, conv=FALSE):
   beta_ref : -1.942373 1.558028 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.744918088188393
  Sample[ 31]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.91889370623179
  Sample[ 32]: after refine_(*, conv=FALSE):
   beta_ref : -1.386547 1.287825 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.32303815737056
  Sample[ 33]: after refine_(*, conv=FALSE):
   beta_ref : -0.625460 1.160424 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.287874239981522
  Sample[ 33]: found new candidate with scale 0.2797821
               worst scale is now 0.2797821
  Sample[ 34]: after refine_(*, conv=FALSE):
   beta_ref : -0.488056 1.096035 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.406506642125284
  Sample[ 35]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280547
  Sample[ 36]: after refine_(*, conv=FALSE):
   beta_ref : -0.589765 1.151198 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.289862591554884
  Sample[ 37]: after refine_(*, conv=FALSE):
   beta_ref : -1.942373 1.558028 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.744918088188393
  Sample[ 38]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878659
  Sample[ 39]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978508
  Sample[ 39]: found new candidate with scale 0.2768073
               worst scale is now 0.2797003
  Sample[ 40]: after refine_(*, conv=FALSE):
   beta_ref : -2.144151 1.587919 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.399338780038277
  Sample[ 41]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[ 42]: after refine_(*, conv=FALSE):
   beta_ref : -0.627490 1.154215 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.429182774060504
  Sample[ 42]: found new candidate with scale 0.2758477
               worst scale is now 0.2768073
  Sample[ 43]: after refine_(*, conv=FALSE):
   beta_ref : 0.224305 0.805575 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.88768873167888
  Sample[ 44]: after refine_(*, conv=FALSE):
   beta_ref : -0.670506 1.156773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.28633536578424
  Sample[ 45]: after refine_(*, conv=FALSE):
   beta_ref : -0.662089 1.153242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.302818894470934
  Sample[ 46]: after refine_(*, conv=FALSE):
   beta_ref : -2.144588 1.618955 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.553607074103743
  Sample[ 47]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.36594337244165
  Sample[ 48]: after refine_(*, conv=FALSE):
   beta_ref : -0.222680 0.997273 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.49558843265863
  Sample[ 49]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285347
  Sample[ 50]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[ 51]: after refine_(*, conv=FALSE):
   beta_ref : -1.742489 1.495885 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.579998989395441
  Sample[ 52]: after refine_(*, conv=FALSE):
   beta_ref : -1.515596 1.393334 
   with ||beta_ref - beta_cand|| = 0, --> sc = 3.95137685252739
  Sample[ 53]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[ 54]: after refine_(*, conv=FALSE):
   beta_ref : -2.070158 1.571290 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.37327449031415
  Sample[ 55]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878659
  Sample[ 56]: after refine_(*, conv=FALSE):
   beta_ref : 0.410243 0.743998 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.40713960042917
  Sample[ 57]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[ 58]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867086
  Sample[ 59]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.67968553517208
  Sample[ 60]: after refine_(*, conv=FALSE):
   beta_ref : -0.222680 0.997273 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.49558843265863
  Sample[ 61]: after refine_(*, conv=FALSE):
   beta_ref : -0.565247 1.125287 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.280155905387692
  Sample[ 62]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179738
  Sample[ 63]: after refine_(*, conv=FALSE):
   beta_ref : -0.898455 1.219023 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.367535728188709
  Sample[ 64]: after refine_(*, conv=FALSE):
   beta_ref : -0.629979 1.161721 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.285059041656877
  Sample[ 65]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[ 66]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.679685535172079
  Sample[ 67]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878659
  Sample[ 68]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[ 69]: after refine_(*, conv=FALSE):
   beta_ref : -0.596172 1.152459 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.309002235310989
  Sample[ 70]: after refine_(*, conv=FALSE):
   beta_ref : 0.260798 0.824069 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.594013641561037
  Sample[ 71]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280547
  Sample[ 72]: after refine_(*, conv=FALSE):
   beta_ref : -0.397375 1.027529 
   with ||beta_ref - beta_cand|| = 0, --> sc = 15.1481999432314
  Sample[ 73]: after refine_(*, conv=FALSE):
   beta_ref : -0.087312 0.935189 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.456445784317417
  Sample[ 74]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280547
  Sample[ 75]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[ 76]: after refine_(*, conv=FALSE):
   beta_ref : -0.087312 0.935189 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.456445784317417
  Sample[ 77]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878659
  Sample[ 78]: after refine_(*, conv=FALSE):
   beta_ref : -0.565247 1.125287 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.280155905387692
  Sample[ 79]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179737
  Sample[ 80]: after refine_(*, conv=FALSE):
   beta_ref : -2.200411 1.615416 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.366625751619072
  Sample[ 81]: after refine_(*, conv=FALSE):
   beta_ref : -0.087312 0.935189 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.456445784317417
  Sample[ 82]: after refine_(*, conv=FALSE):
   beta_ref : -1.942373 1.558028 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.744918088188393
  Sample[ 83]: after refine_(*, conv=FALSE):
   beta_ref : -1.672292 1.449558 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.348265804600926
  Sample[ 84]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[ 85]: after refine_(*, conv=FALSE):
   beta_ref : -0.662089 1.153242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.302818894470935
  Sample[ 86]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286114
  Sample[ 87]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.679685535172079
  Sample[ 88]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[ 89]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[ 90]: after refine_(*, conv=FALSE):
   beta_ref : -0.962999 1.212102 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.75529751980209
  Sample[ 91]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[ 92]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[ 93]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[ 94]: after refine_(*, conv=FALSE):
   beta_ref : -0.199361 0.979666 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90760566523583
  Sample[ 95]: after refine_(*, conv=FALSE):
   beta_ref : -1.449821 1.304830 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.10255399571346
  Sample[ 96]: after refine_(*, conv=FALSE):
   beta_ref : 0.224305 0.805575 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.88768873167888
  Sample[ 97]: after refine_(*, conv=FALSE):
   beta_ref : -1.856659 1.532423 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.885734481714681
  Sample[ 98]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286113
  Sample[ 99]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400311
  Sample[100]: after refine_(*, conv=FALSE):
   beta_ref : -0.596172 1.152459 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.309002235310989
  Sample[101]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.679685535172079
  Sample[102]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[103]: after refine_(*, conv=FALSE):
   beta_ref : -0.505791 1.053335 
   with ||beta_ref - beta_cand|| = 0, --> sc = 5.22853378335815
  Sample[104]: after refine_(*, conv=FALSE):
   beta_ref : -0.244111 0.966143 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.48063687575041
  Sample[105]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867085
  Sample[106]: after refine_(*, conv=FALSE):
   beta_ref : -0.587028 1.149354 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312564686828127
  Sample[107]: after refine_(*, conv=FALSE):
   beta_ref : -0.488056 1.096035 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.406506642125283
  Sample[108]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286113
  Sample[109]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978508
  Sample[110]: after refine_(*, conv=FALSE):
   beta_ref : -1.924791 1.522802 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.741363565741793
  Sample[111]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[112]: after refine_(*, conv=FALSE):
   beta_ref : -1.942373 1.558028 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.744918088188393
  Sample[113]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856022
  Sample[114]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[115]: after refine_(*, conv=FALSE):
   beta_ref : -0.505791 1.053335 
   with ||beta_ref - beta_cand|| = 0, --> sc = 5.22853378335815
  Sample[116]: after refine_(*, conv=FALSE):
   beta_ref : -2.023421 1.546720 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.472769193580754
  Sample[117]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.365943372441649
  Sample[118]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[119]: after refine_(*, conv=FALSE):
   beta_ref : -1.742489 1.495885 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.579998989395441
  Sample[120]: after refine_(*, conv=FALSE):
   beta_ref : -2.023421 1.546720 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.472769193580754
  Sample[121]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[122]: after refine_(*, conv=FALSE):
   beta_ref : -1.386547 1.287825 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.32303815737056
  Sample[123]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[124]: after refine_(*, conv=FALSE):
   beta_ref : 0.245606 0.798807 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90882061471928
  Sample[125]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179738
  Sample[126]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280548
  Sample[127]: after refine_(*, conv=FALSE):
   beta_ref : 0.290339 0.794023 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.523721624955058
  Sample[128]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[129]: after refine_(*, conv=FALSE):
   beta_ref : -1.924791 1.522802 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.741363565741794
  Sample[130]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351463
  Sample[131]: after refine_(*, conv=FALSE):
   beta_ref : -1.051242 1.248882 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.76350297340318
  Sample[132]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.91889370623179
  Sample[133]: after refine_(*, conv=FALSE):
   beta_ref : -0.142669 0.957455 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.473157356422566
  Sample[134]: after refine_(*, conv=FALSE):
   beta_ref : -1.051242 1.248882 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.76350297340317
  Sample[135]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978507
  Sample[136]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502366
  Sample[137]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285347
  Sample[138]: after refine_(*, conv=FALSE):
   beta_ref : -2.136336 1.586371 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.436315397353932
  Sample[139]: after refine_(*, conv=FALSE):
   beta_ref : -1.742489 1.495885 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.579998989395441
  Sample[140]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978507
  Sample[141]: after refine_(*, conv=FALSE):
   beta_ref : -0.898455 1.219023 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.367535728188709
  Sample[142]: after refine_(*, conv=FALSE):
   beta_ref : -0.505791 1.053335 
   with ||beta_ref - beta_cand|| = 0, --> sc = 5.22853378335815
  Sample[143]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[144]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340343
  Sample[145]: after refine_(*, conv=FALSE):
   beta_ref : 0.290339 0.794023 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.523721624955058
  Sample[146]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[147]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351462
  Sample[148]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280548
  Sample[149]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328143
  Sample[150]: after refine_(*, conv=FALSE):
   beta_ref : 0.410243 0.743998 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.40713960042918
  Sample[151]: after refine_(*, conv=FALSE):
   beta_ref : -2.100529 1.573596 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.492521121454337
  Sample[152]: after refine_(*, conv=FALSE):
   beta_ref : 0.207049 0.814328 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.577742866999083
  Sample[153]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867085
  Sample[154]: after refine_(*, conv=FALSE):
   beta_ref : -1.672292 1.449558 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.348265804600926
  Sample[155]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285347
  Sample[156]: after refine_(*, conv=FALSE):
   beta_ref : -1.033771 1.218640 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.75365155222259
  Sample[157]: after refine_(*, conv=FALSE):
   beta_ref : -1.924791 1.522802 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.741363565741793
  Sample[158]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[159]: after refine_(*, conv=FALSE):
   beta_ref : -1.487903 1.318158 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.37247806701654
  Sample[160]: after refine_(*, conv=FALSE):
   beta_ref : 0.224305 0.805575 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.88768873167888
  Sample[161]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878658
  Sample[162]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[163]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351462
  Sample[164]: after refine_(*, conv=FALSE):
   beta_ref : -0.087312 0.935189 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.456445784317417
  Sample[165]: after refine_(*, conv=FALSE):
   beta_ref : -0.625460 1.160424 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.287874239981522
  Sample[166]: after refine_(*, conv=FALSE):
   beta_ref : -0.565247 1.125287 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.280155905387692
  Sample[167]: after refine_(*, conv=FALSE):
   beta_ref : -0.548769 1.137599 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.213513497916964
  Sample[168]: after refine_(*, conv=FALSE):
   beta_ref : -0.589765 1.151198 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.289862591554884
  Sample[169]: after refine_(*, conv=FALSE):
   beta_ref : -0.505791 1.053335 
   with ||beta_ref - beta_cand|| = 0, --> sc = 5.22853378335815
  Sample[170]: after refine_(*, conv=FALSE):
   beta_ref : 0.260798 0.824069 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.594013641561037
  Sample[171]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280548
  Sample[172]: after refine_(*, conv=FALSE):
   beta_ref : -1.515596 1.393334 
   with ||beta_ref - beta_cand|| = 0, --> sc = 3.95137685252739
  Sample[173]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.36594337244165
  Sample[174]: after refine_(*, conv=FALSE):
   beta_ref : -1.487903 1.318158 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.37247806701654
  Sample[175]: after refine_(*, conv=FALSE):
   beta_ref : -0.629979 1.161721 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.285059041656878
  Sample[176]: after refine_(*, conv=FALSE):
   beta_ref : -0.548769 1.137599 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.213513497916963
  Sample[177]: after refine_(*, conv=FALSE):
   beta_ref : -2.067481 1.549650 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.539116852816471
  Sample[178]: after refine_(*, conv=FALSE):
   beta_ref : -0.629979 1.161721 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.285059041656877
  Sample[179]: after refine_(*, conv=FALSE):
   beta_ref : -1.386547 1.287825 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.32303815737056
  Sample[180]: after refine_(*, conv=FALSE):
   beta_ref : 0.224305 0.805575 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.88768873167888
  Sample[181]: after refine_(*, conv=FALSE):
   beta_ref : -1.742489 1.495885 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.579998989395441
  Sample[182]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[183]: after refine_(*, conv=FALSE):
   beta_ref : -2.023421 1.546720 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.472769193580754
  Sample[184]: after refine_(*, conv=FALSE):
   beta_ref : -1.033771 1.218640 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.75365155222259
  Sample[185]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179738
  Sample[186]: after refine_(*, conv=FALSE):
   beta_ref : -2.200411 1.615416 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.366625751619072
  Sample[187]: after refine_(*, conv=FALSE):
   beta_ref : -0.763906 1.123657 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.64015945823134
  Sample[188]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415407
  Sample[189]: after refine_(*, conv=FALSE):
   beta_ref : -0.142669 0.957455 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.473157356422567
  Sample[190]: after refine_(*, conv=FALSE):
   beta_ref : -2.200866 1.616242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.35543328734486
  Sample[191]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[192]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[193]: after refine_(*, conv=FALSE):
   beta_ref : -2.023421 1.546720 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.472769193580754
  Sample[194]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[195]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[196]: after refine_(*, conv=FALSE):
   beta_ref : -0.587028 1.149354 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312564686828127
  Sample[197]: after refine_(*, conv=FALSE):
   beta_ref : -2.070158 1.571290 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.37327449031415
  Sample[198]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[199]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[200]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[201]: after refine_(*, conv=FALSE):
   beta_ref : 0.145859 0.834630 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.597892842089404
  Sample[202]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[203]: after refine_(*, conv=FALSE):
   beta_ref : -2.070158 1.571290 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.37327449031415
  Sample[204]: after refine_(*, conv=FALSE):
   beta_ref : -0.199361 0.979666 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90760566523583
  Sample[205]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400313
  Sample[206]: after refine_(*, conv=FALSE):
   beta_ref : -0.627490 1.154215 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.429182774060504
  Sample[206]: found new candidate with scale 0.2758477
               worst scale is now 0.2758477
  Sample[207]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415408
  Sample[208]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[209]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285346
  Sample[210]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328142
  Sample[211]: after refine_(*, conv=FALSE):
   beta_ref : -0.629979 1.161721 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.285059041656877
  Sample[212]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415408
  Sample[213]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502365
  Sample[214]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856022
  Sample[215]: after refine_(*, conv=FALSE):
   beta_ref : -0.962999 1.212102 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.75529751980209
  Sample[216]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[217]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286114
  Sample[218]: after refine_(*, conv=FALSE):
   beta_ref : -0.199361 0.979666 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90760566523583
  Sample[219]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[220]: after refine_(*, conv=FALSE):
   beta_ref : -2.067481 1.549650 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.539116852816471
  Sample[221]: after refine_(*, conv=FALSE):
   beta_ref : 0.145859 0.834630 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.597892842089404
  Sample[222]: after refine_(*, conv=FALSE):
   beta_ref : -1.515596 1.393334 
   with ||beta_ref - beta_cand|| = 0, --> sc = 3.95137685252739
  Sample[223]: after refine_(*, conv=FALSE):
   beta_ref : 0.224305 0.805575 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.88768873167888
  Sample[224]: after refine_(*, conv=FALSE):
   beta_ref : -0.087312 0.935189 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.456445784317417
  Sample[225]: after refine_(*, conv=FALSE):
   beta_ref : 0.302657 0.780686 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.9669857749306
  Sample[226]: after refine_(*, conv=FALSE):
   beta_ref : -0.662089 1.153242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.302818894470935
  Sample[227]: after refine_(*, conv=FALSE):
   beta_ref : -0.548769 1.137599 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.213513497916964
  Sample[228]: after refine_(*, conv=FALSE):
   beta_ref : -0.670506 1.156773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.28633536578424
  Sample[229]: after refine_(*, conv=FALSE):
   beta_ref : -0.625460 1.160424 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.287874239981522
  Sample[230]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[231]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[232]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328142
  Sample[233]: after refine_(*, conv=FALSE):
   beta_ref : -1.449821 1.304830 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.10255399571346
  Sample[234]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978507
  Sample[235]: after refine_(*, conv=FALSE):
   beta_ref : -1.672292 1.449558 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.348265804600926
  Sample[236]: after refine_(*, conv=FALSE):
   beta_ref : -0.596172 1.152459 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.309002235310988
  Sample[237]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[238]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[239]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878658
  Sample[240]: after refine_(*, conv=FALSE):
   beta_ref : -2.144588 1.618955 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.553607074103743
  Sample[241]: after refine_(*, conv=FALSE):
   beta_ref : -2.067481 1.549650 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.539116852816471
  Sample[242]: after refine_(*, conv=FALSE):
   beta_ref : -1.033771 1.218640 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.75365155222259
  Sample[243]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867086
  Sample[244]: after refine_(*, conv=FALSE):
   beta_ref : -2.100529 1.573596 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.492521121454337
  Sample[245]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856022
  Sample[246]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[247]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.67968553517208
  Sample[248]: after refine_(*, conv=FALSE):
   beta_ref : -1.051242 1.248882 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.76350297340318
  Sample[249]: after refine_(*, conv=FALSE):
   beta_ref : 0.260798 0.824069 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.594013641561037
  Sample[250]: after refine_(*, conv=FALSE):
   beta_ref : -2.070158 1.571290 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.37327449031415
  Sample[251]: after refine_(*, conv=FALSE):
   beta_ref : -1.033771 1.218640 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.75365155222264
  Sample[252]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867086
  Sample[253]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[254]: after refine_(*, conv=FALSE):
   beta_ref : -0.142669 0.957455 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.473157356422566
  Sample[255]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415407
  Sample[256]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878658
  Sample[257]: after refine_(*, conv=FALSE):
   beta_ref : 0.245606 0.798807 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90882061471928
  Sample[258]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[259]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856022
  Sample[260]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.67968553517208
  Sample[261]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351462
  Sample[262]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856022
  Sample[263]: after refine_(*, conv=FALSE):
   beta_ref : -0.763906 1.123657 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.64015945823134
  Sample[264]: after refine_(*, conv=FALSE):
   beta_ref : -0.625460 1.160424 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.287874239981522
  Sample[265]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[266]: after refine_(*, conv=FALSE):
   beta_ref : -0.222680 0.997273 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.49558843265863
  Sample[267]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.918893706231788
  Sample[268]: after refine_(*, conv=FALSE):
   beta_ref : -0.199361 0.979666 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90760566523583
  Sample[269]: after refine_(*, conv=FALSE):
   beta_ref : -1.051242 1.248882 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.76350297340317
  Sample[270]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[271]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.365943372441649
  Sample[272]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415407
  Sample[273]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502366
  Sample[274]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[275]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340343
  Sample[276]: after refine_(*, conv=FALSE):
   beta_ref : -0.710666 1.180957 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.404424556196256
  Sample[277]: after refine_(*, conv=FALSE):
   beta_ref : -1.051242 1.248882 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.76350297340317
  Sample[278]: after refine_(*, conv=FALSE):
   beta_ref : -2.070158 1.571290 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.37327449031415
  Sample[279]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[280]: after refine_(*, conv=FALSE):
   beta_ref : -0.087312 0.935189 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.456445784317417
  Sample[281]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280547
  Sample[282]: after refine_(*, conv=FALSE):
   beta_ref : -1.487903 1.318158 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.37247806701654
  Sample[283]: after refine_(*, conv=FALSE):
   beta_ref : -0.662089 1.153242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.302818894470934
  Sample[284]: after refine_(*, conv=FALSE):
   beta_ref : -0.763906 1.123657 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.64015945823134
  Sample[285]: after refine_(*, conv=FALSE):
   beta_ref : 0.260798 0.824069 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.594013641561037
  Sample[286]: after refine_(*, conv=FALSE):
   beta_ref : -0.962999 1.212102 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.75529751980209
  Sample[287]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[288]: after refine_(*, conv=FALSE):
   beta_ref : -1.924791 1.522802 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.741363565741794
  Sample[289]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[290]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[291]: after refine_(*, conv=FALSE):
   beta_ref : 0.207049 0.814328 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.577742866999082
  Sample[292]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.918893706231788
  Sample[293]: after refine_(*, conv=FALSE):
   beta_ref : -0.596172 1.152459 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.309002235310988
  Sample[294]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[295]: after refine_(*, conv=FALSE):
   beta_ref : -2.067481 1.549650 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.539116852816471
  Sample[296]: after refine_(*, conv=FALSE):
   beta_ref : -0.763906 1.123657 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.64015945823134
  Sample[297]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978507
  Sample[298]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286114
  Sample[299]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400311
  Sample[300]: after refine_(*, conv=FALSE):
   beta_ref : -0.625460 1.160424 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.287874239981522
  Sample[301]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878659
  Sample[302]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286114
  Sample[303]: after refine_(*, conv=FALSE):
   beta_ref : -1.856659 1.532423 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.885734481714681
  Sample[304]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[305]: after refine_(*, conv=FALSE):
   beta_ref : -1.449821 1.304830 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.10255399571346
  Sample[306]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[307]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179737
  Sample[308]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[309]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[310]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400313
  Sample[311]: after refine_(*, conv=FALSE):
   beta_ref : 0.245606 0.798807 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90882061471928
  Sample[312]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285347
  Sample[313]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328143
  Sample[314]: after refine_(*, conv=FALSE):
   beta_ref : 0.302657 0.780686 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.9669857749306
  Sample[315]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[316]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867085
  Sample[317]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[318]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286113
  Sample[319]: after refine_(*, conv=FALSE):
   beta_ref : 0.245606 0.798807 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90882061471928
  Sample[320]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[321]: after refine_(*, conv=FALSE):
   beta_ref : 0.207049 0.814328 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.577742866999083
  Sample[322]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415408
  Sample[323]: after refine_(*, conv=FALSE):
   beta_ref : -0.587028 1.149354 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312564686828127
  Sample[324]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400311
  Sample[325]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179738
  Sample[326]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.679685535172079
  Sample[327]: after refine_(*, conv=FALSE):
   beta_ref : -0.710666 1.180957 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.404424556196256
  Sample[328]: after refine_(*, conv=FALSE):
   beta_ref : -0.548769 1.137599 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.213513497916963
  Sample[329]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415407
  Sample[330]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400313
  Sample[331]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.918893706231788
  Sample[332]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280548
  Sample[333]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328142
  Sample[334]: after refine_(*, conv=FALSE):
   beta_ref : 0.010546 0.920859 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.813737418280547
  Sample[335]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.918893706231788
  Sample[336]: after refine_(*, conv=FALSE):
   beta_ref : -0.142669 0.957455 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.473157356422567
  Sample[337]: after refine_(*, conv=FALSE):
   beta_ref : -2.144588 1.618955 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.553607074103745
  Sample[338]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[339]: after refine_(*, conv=FALSE):
   beta_ref : -0.222680 0.997273 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.49558843265863
  Sample[340]: after refine_(*, conv=FALSE):
   beta_ref : -1.033771 1.218640 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.75365155222264
  Sample[341]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[342]: after refine_(*, conv=FALSE):
   beta_ref : -0.565247 1.125287 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.280155905387692
  Sample[343]: after refine_(*, conv=FALSE):
   beta_ref : -2.070158 1.571290 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.37327449031415
  Sample[344]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179738
  Sample[345]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[346]: after refine_(*, conv=FALSE):
   beta_ref : -0.244111 0.966143 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.48063687575041
  Sample[347]: after refine_(*, conv=FALSE):
   beta_ref : -1.742489 1.495885 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.579998989395441
  Sample[348]: after refine_(*, conv=FALSE):
   beta_ref : -0.222680 0.997273 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.49558843265863
  Sample[349]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[350]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328142
  Sample[351]: after refine_(*, conv=FALSE):
   beta_ref : -0.625460 1.160424 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.287874239981522
  Sample[352]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502365
  Sample[353]: after refine_(*, conv=FALSE):
   beta_ref : -1.449821 1.304830 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.10255399571346
  Sample[354]: after refine_(*, conv=FALSE):
   beta_ref : -2.200866 1.616242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.355433287344859
  Sample[355]: after refine_(*, conv=FALSE):
   beta_ref : -0.244111 0.966143 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.48063687575061
  Sample[356]: after refine_(*, conv=FALSE):
   beta_ref : -2.144151 1.587919 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.399338780038277
  Sample[357]: after refine_(*, conv=FALSE):
   beta_ref : -0.505791 1.053335 
   with ||beta_ref - beta_cand|| = 0, --> sc = 5.22853378335815
  Sample[358]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.36594337244165
  Sample[359]: after refine_(*, conv=FALSE):
   beta_ref : -1.856659 1.532423 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.885734481714681
  Sample[360]: after refine_(*, conv=FALSE):
   beta_ref : -1.942373 1.558028 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.744918088188393
  Sample[361]: after refine_(*, conv=FALSE):
   beta_ref : -0.589765 1.151198 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.289862591554884
  Sample[362]: after refine_(*, conv=FALSE):
   beta_ref : -1.742489 1.495885 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.579998989395441
  Sample[363]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[364]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328142
  Sample[365]: after refine_(*, conv=FALSE):
   beta_ref : -1.672292 1.449558 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.348265804600927
  Sample[366]: after refine_(*, conv=FALSE):
   beta_ref : 0.290339 0.794023 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.523721624955058
  Sample[367]: after refine_(*, conv=FALSE):
   beta_ref : 0.260798 0.824069 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.594013641561037
  Sample[368]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[369]: after refine_(*, conv=FALSE):
   beta_ref : -0.662089 1.153242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.302818894470935
  Sample[370]: after refine_(*, conv=FALSE):
   beta_ref : -2.136336 1.586371 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.436315397353933
  Sample[371]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867085
  Sample[372]: after refine_(*, conv=FALSE):
   beta_ref : -0.142669 0.957455 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.473157356422567
  Sample[373]: after refine_(*, conv=FALSE):
   beta_ref : -0.587028 1.149354 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312564686828127
  Sample[374]: after refine_(*, conv=FALSE):
   beta_ref : -1.051242 1.248882 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.76350297340317
  Sample[375]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351463
  Sample[376]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[377]: after refine_(*, conv=FALSE):
   beta_ref : -0.505791 1.053335 
   with ||beta_ref - beta_cand|| = 0, --> sc = 5.22853378335815
  Sample[378]: after refine_(*, conv=FALSE):
   beta_ref : -2.100529 1.573596 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.492521121454336
  Sample[379]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[380]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[381]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340343
  Sample[382]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328142
  Sample[383]: after refine_(*, conv=FALSE):
   beta_ref : -2.144588 1.618955 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.553607074103743
  Sample[384]: after refine_(*, conv=FALSE):
   beta_ref : -0.397375 1.027529 
   with ||beta_ref - beta_cand|| = 0, --> sc = 15.1481999432315
  Sample[385]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285346
  Sample[386]: after refine_(*, conv=FALSE):
   beta_ref : -1.672292 1.449558 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.348265804600927
  Sample[387]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351463
  Sample[388]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.36594337244165
  Sample[389]: after refine_(*, conv=FALSE):
   beta_ref : 0.205065 0.812545 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.06063624179738
  Sample[390]: after refine_(*, conv=FALSE):
   beta_ref : -2.144588 1.618955 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.553607074103743
  Sample[391]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[392]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[393]: after refine_(*, conv=FALSE):
   beta_ref : -1.051242 1.248882 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.76350297340318
  Sample[394]: after refine_(*, conv=FALSE):
   beta_ref : -1.033771 1.218640 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.75365155222259
  Sample[395]: after refine_(*, conv=FALSE):
   beta_ref : 0.302657 0.780686 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.9669857749306
  Sample[396]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856023
  Sample[397]: after refine_(*, conv=FALSE):
   beta_ref : -1.515596 1.393334 
   with ||beta_ref - beta_cand|| = 0, --> sc = 3.95137685252739
  Sample[398]: after refine_(*, conv=FALSE):
   beta_ref : 0.410243 0.743998 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.40713960042918
  Sample[399]: after refine_(*, conv=FALSE):
   beta_ref : -0.898455 1.219023 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.367535728188709
  Sample[400]: after refine_(*, conv=FALSE):
   beta_ref : 0.224305 0.805575 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.88768873167888
  Sample[401]: after refine_(*, conv=FALSE):
   beta_ref : 0.410243 0.743998 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.40713960042917
  Sample[402]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[403]: after refine_(*, conv=FALSE):
   beta_ref : -2.144151 1.587919 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.399338780038277
  Sample[404]: after refine_(*, conv=FALSE):
   beta_ref : -2.067481 1.549650 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.539116852816472
  Sample[405]: after refine_(*, conv=FALSE):
   beta_ref : 0.260798 0.824069 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.594013641561037
  Sample[406]: after refine_(*, conv=FALSE):
   beta_ref : -2.132086 1.586468 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.417145691249322
  Sample[407]: after refine_(*, conv=FALSE):
   beta_ref : -0.087312 0.935189 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.456445784317417
  Sample[408]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[409]: after refine_(*, conv=FALSE):
   beta_ref : 0.207049 0.814328 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.577742866999082
  Sample[410]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[411]: after refine_(*, conv=FALSE):
   beta_ref : -1.515596 1.393334 
   with ||beta_ref - beta_cand|| = 0, --> sc = 3.95137685252739
  Sample[412]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400311
  Sample[413]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[414]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[415]: after refine_(*, conv=FALSE):
   beta_ref : 0.171545 0.815170 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.45332402557657
  Sample[416]: after refine_(*, conv=FALSE):
   beta_ref : -0.488056 1.096035 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.406506642125283
  Sample[417]: after refine_(*, conv=FALSE):
   beta_ref : -2.144588 1.618955 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.553607074103743
  Sample[418]: after refine_(*, conv=FALSE):
   beta_ref : -0.629979 1.161721 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.285059041656877
  Sample[419]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[420]: after refine_(*, conv=FALSE):
   beta_ref : 0.171545 0.815170 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.45332402557657
  Sample[421]: after refine_(*, conv=FALSE):
   beta_ref : -0.397375 1.027529 
   with ||beta_ref - beta_cand|| = 0, --> sc = 15.1481999432315
  Sample[422]: after refine_(*, conv=FALSE):
   beta_ref : -0.397375 1.027529 
   with ||beta_ref - beta_cand|| = 0, --> sc = 15.1481999432314
  Sample[423]: after refine_(*, conv=FALSE):
   beta_ref : -0.589765 1.151198 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.289862591554884
  Sample[424]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[425]: after refine_(*, conv=FALSE):
   beta_ref : -2.200866 1.616242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.355433287344859
  Sample[426]: after refine_(*, conv=FALSE):
   beta_ref : -1.487903 1.318158 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.37247806701654
  Sample[427]: after refine_(*, conv=FALSE):
   beta_ref : -1.386547 1.287825 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.32303815737056
  Sample[428]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878659
  Sample[429]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502366
  Sample[430]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[431]: after refine_(*, conv=FALSE):
   beta_ref : -2.067481 1.549650 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.539116852816472
  Sample[432]: after refine_(*, conv=FALSE):
   beta_ref : 0.245606 0.798807 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90882061471928
  Sample[433]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[434]: after refine_(*, conv=FALSE):
   beta_ref : -1.742489 1.495885 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.579998989395441
  Sample[435]: after refine_(*, conv=FALSE):
   beta_ref : -2.200866 1.616242 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.355433287344859
  Sample[436]: after refine_(*, conv=FALSE):
   beta_ref : -0.670506 1.156773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.28633536578424
  Sample[437]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[438]: after refine_(*, conv=FALSE):
   beta_ref : 0.224676 0.802773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.679685535172079
  Sample[439]: after refine_(*, conv=FALSE):
   beta_ref : 0.145859 0.834630 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.597892842089404
  Sample[440]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[441]: after refine_(*, conv=FALSE):
   beta_ref : -0.840132 1.153304 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.16009257867086
  Sample[442]: after refine_(*, conv=FALSE):
   beta_ref : -2.200411 1.615416 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.366625751619073
  Sample[443]: after refine_(*, conv=FALSE):
   beta_ref : -0.177777 0.971152 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.486048896285346
  Sample[444]: after refine_(*, conv=FALSE):
   beta_ref : -0.898455 1.219023 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.367535728188709
  Sample[445]: after refine_(*, conv=FALSE):
   beta_ref : -0.707317 1.166380 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.30708530760975
  Sample[446]: after refine_(*, conv=FALSE):
   beta_ref : -0.376319 1.060595 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.787749674878659
  Sample[447]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[448]: after refine_(*, conv=FALSE):
   beta_ref : -0.670506 1.156773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.28633536578424
  Sample[449]: after refine_(*, conv=FALSE):
   beta_ref : -0.587028 1.149354 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312564686828127
  Sample[450]: after refine_(*, conv=FALSE):
   beta_ref : 0.149980 0.831077 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.631676782286114
  Sample[451]: after refine_(*, conv=FALSE):
   beta_ref : -1.449821 1.304830 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.10255399571346
  Sample[452]: after refine_(*, conv=FALSE):
   beta_ref : 0.260798 0.824069 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.594013641561037
  Sample[453]: after refine_(*, conv=FALSE):
   beta_ref : -0.589765 1.151198 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.289862591554884
  Sample[454]: after refine_(*, conv=FALSE):
   beta_ref : -0.596172 1.152459 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.309002235310989
  Sample[455]: after refine_(*, conv=FALSE):
   beta_ref : -0.142669 0.957455 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.473157356422566
  Sample[456]: after refine_(*, conv=FALSE):
   beta_ref : -0.565247 1.125287 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.280155905387692
  Sample[457]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978507
  Sample[458]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[459]: after refine_(*, conv=FALSE):
   beta_ref : -0.244111 0.966143 
   with ||beta_ref - beta_cand|| = 0, --> sc = 6.48063687575061
  Sample[460]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[461]: after refine_(*, conv=FALSE):
   beta_ref : -0.597198 1.152647 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.312109152133831
  Sample[462]: after refine_(*, conv=FALSE):
   beta_ref : -0.307508 0.964066 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.34390327405485
  Sample[463]: after refine_(*, conv=FALSE):
   beta_ref : -0.596172 1.152459 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.309002235310989
  Sample[464]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978508
  Sample[465]: after refine_(*, conv=FALSE):
   beta_ref : -0.556193 1.134026 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.270706285978507
  Sample[466]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[467]: after refine_(*, conv=FALSE):
   beta_ref : 0.060579 0.901992 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.857121045415407
  Sample[468]: after refine_(*, conv=FALSE):
   beta_ref : -0.631179 1.162033 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.286399245856022
  Sample[469]: after refine_(*, conv=FALSE):
   beta_ref : -0.333051 1.012835 
   with ||beta_ref - beta_cand|| = 0, --> sc = 4.27637683340342
  Sample[470]: after refine_(*, conv=FALSE):
   beta_ref : 0.167816 0.825709 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.613778594777883
  Sample[471]: after refine_(*, conv=FALSE):
   beta_ref : -1.044262 1.218239 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.94185072560702
  Sample[472]: after refine_(*, conv=FALSE):
   beta_ref : -1.924791 1.522802 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.741363565741793
  Sample[473]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400311
  Sample[474]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502366
  Sample[475]: after refine_(*, conv=FALSE):
   beta_ref : -0.763906 1.123657 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.64015945823134
  Sample[476]: after refine_(*, conv=FALSE):
   beta_ref : -2.067481 1.549650 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.539116852816472
  Sample[477]: after refine_(*, conv=FALSE):
   beta_ref : -2.184358 1.586115 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.361556853894617
  Sample[478]: after refine_(*, conv=FALSE):
   beta_ref : -0.595111 1.152233 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.308992048351462
  Sample[479]: after refine_(*, conv=FALSE):
   beta_ref : -0.763906 1.123657 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.64015945823134
  Sample[480]: after refine_(*, conv=FALSE):
   beta_ref : -0.625460 1.160424 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.287874239981522
  Sample[481]: after refine_(*, conv=FALSE):
   beta_ref : -0.710666 1.180957 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.404424556196256
  Sample[482]: after refine_(*, conv=FALSE):
   beta_ref : -0.962999 1.212102 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.75529751980209
  Sample[483]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502365
  Sample[484]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[485]: after refine_(*, conv=FALSE):
   beta_ref : -0.547363 1.129251 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.235441204593026
  Sample[486]: after refine_(*, conv=FALSE):
   beta_ref : -0.199361 0.979666 
   with ||beta_ref - beta_cand|| = 0, --> sc = 1.90760566523583
  Sample[487]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[488]: after refine_(*, conv=FALSE):
   beta_ref : -0.565247 1.125287 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.280155905387692
  Sample[489]: after refine_(*, conv=FALSE):
   beta_ref : -1.380628 1.383314 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.467390770067497
  Sample[490]: after refine_(*, conv=FALSE):
   beta_ref : -2.011744 1.550399 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.618257718400311
  Sample[491]: after refine_(*, conv=FALSE):
   beta_ref : -0.670506 1.156773 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.28633536578424
  Sample[492]: after refine_(*, conv=FALSE):
   beta_ref : -0.809481 1.209603 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.284340124502365
  Sample[493]: after refine_(*, conv=FALSE):
   beta_ref : -0.962999 1.212102 
   with ||beta_ref - beta_cand|| = 0, --> sc = 2.75529751980209
  Sample[494]: after refine_(*, conv=FALSE):
   beta_ref : -1.654319 1.431824 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.91889370623179
  Sample[495]: after refine_(*, conv=FALSE):
   beta_ref : -2.186469 1.610199 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.365943372441649
  Sample[496]: after refine_(*, conv=FALSE):
   beta_ref : -0.819674 1.213131 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.301200329328143
  Sample[497]: after refine_(*, conv=FALSE):
   beta_ref : 0.030844 0.911664 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.908806025778877
  Sample[498]: after refine_(*, conv=FALSE):
   beta_ref : -1.924791 1.522802 
   with ||beta_ref - beta_cand|| = 0, --> sc = 0.741363565741794
  Sample[499]: after refine_(*, conv=FALSE):
   beta_ref : -0.397375 1.027529 
   with ||beta_ref - beta_cand|| = 0, --> sc = 15.1481999432315
 Now refine() to convergence for 2 very best ones:
  Best[0]: convergence (17 iter.): -> improved scale to 0.275726265760473
  Best[1]: convergence (17 iter.)
lmrob_MM(): rwls():
  it    1: L(b1) = 0.217004380265  ||b0 - b1||_1 = 0.0750855
  it    2: L(b1) = 0.21554606792  ||b0 - b1||_1 = 0.0769669
  it    3: L(b1) = 0.215065302148  ||b0 - b1||_1 = 0.0773737
  it    4: L(b1) = 0.214717389542  ||b0 - b1||_1 = 0.0726872
  it    5: L(b1) = 0.214438109382  ||b0 - b1||_1 = 0.0658683
  it    6: L(b1) = 0.214220966235  ||b0 - b1||_1 = 0.0580807
  it    7: L(b1) = 0.214059745231  ||b0 - b1||_1 = 0.0499815
  it    8: L(b1) = 0.213945290245  ||b0 - b1||_1 = 0.0420661
  it    9: L(b1) = 0.213867250585  ||b0 - b1||_1 = 0.0347089
  it   10: L(b1) = 0.213815865828  ||b0 - b1||_1 = 0.028151
  it   11: L(b1) = 0.213783008597  ||b0 - b1||_1 = 0.0225045
  it   12: L(b1) = 0.213762496979  ||b0 - b1||_1 = 0.0177781
  it   13: L(b1) = 0.213749937328  ||b0 - b1||_1 = 0.0139104
  it   14: L(b1) = 0.213742363795  ||b0 - b1||_1 = 0.0108015
  it   15: L(b1) = 0.213737851503  ||b0 - b1||_1 = 0.00833734
  it   16: L(b1) = 0.213735188119  ||b0 - b1||_1 = 0.00640538
  it   17: L(b1) = 0.213733627376  ||b0 - b1||_1 = 0.00490338
  it   18: L(b1) = 0.213732717848  ||b0 - b1||_1 = 0.00374317
  it   19: L(b1) = 0.21373219007  ||b0 - b1||_1 = 0.00285142
  it   20: L(b1) = 0.213731884805  ||b0 - b1||_1 = 0.00216858
  it   21: L(b1) = 0.213731708678  ||b0 - b1||_1 = 0.00164722
  it   22: L(b1) = 0.213731607251  ||b0 - b1||_1 = 0.00125003
  it   23: L(b1) = 0.213731548924  ||b0 - b1||_1 = 0.000947929
  it   24: L(b1) = 0.21373151542  ||b0 - b1||_1 = 0.000718449
  it   25: L(b1) = 0.213731496189  ||b0 - b1||_1 = 0.000544298
  it   26: L(b1) = 0.213731485159  ||b0 - b1||_1 = 0.000412232
  it   27: L(b1) = 0.213731478835  ||b0 - b1||_1 = 0.000312136
  it   28: L(b1) = 0.21373147521  ||b0 - b1||_1 = 0.000236303
  it   29: L(b1) = 0.213731473134  ||b0 - b1||_1 = 0.000178869
  it   30: L(b1) = 0.213731471944  ||b0 - b1||_1 = 0.00013538
  it   31: L(b1) = 0.213731471263  ||b0 - b1||_1 = 0.000102457
  it   32: L(b1) = 0.213731470872  ||b0 - b1||_1 = 7.7536e-05
  it   33: L(b1) = 0.213731470649  ||b0 - b1||_1 = 5.86739e-05
  it   34: L(b1) = 0.213731470521  ||b0 - b1||_1 = 4.43989e-05
  it   35: L(b1) = 0.213731470448  ||b0 - b1||_1 = 3.35961e-05
  it   36: L(b1) = 0.213731470406  ||b0 - b1||_1 = 2.54212e-05
  it   37: L(b1) = 0.213731470382  ||b0 - b1||_1 = 1.92353e-05
  it   38: L(b1) = 0.213731470368  ||b0 - b1||_1 = 1.45544e-05
  it   39: L(b1) = 0.21373147036  ||b0 - b1||_1 = 1.10125e-05
  it   40: L(b1) = 0.213731470356  ||b0 - b1||_1 = 8.33255e-06
  it   41: L(b1) = 0.213731470353  ||b0 - b1||_1 = 6.30473e-06
  it   42: L(b1) = 0.213731470352  ||b0 - b1||_1 = 4.77038e-06
  it   43: L(b1) = 0.213731470351  ||b0 - b1||_1 = 3.60943e-06
  it   44: L(b1) = 0.21373147035  ||b0 - b1||_1 = 2.73101e-06
  it   45: L(b1) = 0.21373147035  ||b0 - b1||_1 = 2.06636e-06
  it   46: L(b1) = 0.21373147035  ||b0 - b1||_1 = 1.56347e-06
  it   47: L(b1) = 0.21373147035  ||b0 - b1||_1 = 1.18297e-06
  it   48: L(b1) = 0.21373147035  ||b0 - b1||_1 = 8.95067e-07
  it   49: L(b1) = 0.21373147035  ||b0 - b1||_1 = 6.77233e-07
  it   50: L(b1) = 0.21373147035  ||b0 - b1||_1 = 5.12413e-07
  it   51: L(b1) = 0.21373147035  ||b0 - b1||_1 = 3.87706e-07
  it   52: L(b1) = 0.21373147035  ||b0 - b1||_1 = 2.93349e-07
  it   53: L(b1) = 0.21373147035  ||b0 - b1||_1 = 2.21956e-07
 rwls() used 53 it.; last ||b0 - b1||_1 = 2.21956e-07; convergence
> ##-> 53 iter.
> 
> ## Look at all coefficients:
> R.cf <- t(sapply(R, coef))
> C.cf <- t(sapply(LS, coef))
> plot(C.cf, xlim=range(C.cf[,1],R.cf[,1]),
+            ylim=range(C.cf[,2],R.cf[,2]))
> mD1 <- rowMeans(abs(C.cf - R.cf))
> lrg <- mD1 > quantile(mD1, 0.80)
> arrows(C.cf[lrg,1], C.cf[lrg,2],
+        R.cf[lrg,1], R.cf[lrg,2], length=.1, col="light gray")
> points(R.cf, col=2)
> 
> ## All robustness weights
> aW <- t(sapply(R, weights, type="robustness"))
> colnames(aW) <- names(yearly)
> summary(aW)
       ad               ba               ef               la        
 Min.   :0.0000   Min.   :0.0184   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.8183   1st Qu.:0.8741   1st Qu.:0.8546   1st Qu.:0.8661  
 Median :0.9315   Median :0.9441   Median :0.9555   Median :0.9529  
 Mean   :0.8397   Mean   :0.8877   Mean   :0.8675   Mean   :0.8727  
 3rd Qu.:0.9820   3rd Qu.:0.9819   3rd Qu.:0.9905   3rd Qu.:0.9884  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :12       NA's   :9        NA's   :19       NA's   :16      
       lu               re               ri               se          
 Min.   :0.5979   Min.   :0.0000   Min.   :0.0000   Min.   :0.000092  
 1st Qu.:0.9520   1st Qu.:0.8688   1st Qu.:0.8003   1st Qu.:0.923078  
 Median :0.9819   Median :0.9513   Median :0.9317   Median :0.966730  
 Mean   :0.9631   Mean   :0.8897   Mean   :0.7835   Mean   :0.933577  
 3rd Qu.:0.9943   3rd Qu.:0.9911   3rd Qu.:0.9779   3rd Qu.:0.993047  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :0.999999  
 NA's   :7        NA's   :18       NA's   :14       NA's   :18        
       si               st                su                 sz        
 Min.   :0.0000   Min.   :0.05688   Min.   :0.001426   Min.   :0.0000  
 1st Qu.:0.8988   1st Qu.:0.92226   1st Qu.:0.884378   1st Qu.:0.9332  
 Median :0.9604   Median :0.97311   Median :0.954295   Median :0.9765  
 Mean   :0.9114   Mean   :0.93317   Mean   :0.911515   Mean   :0.9494  
 3rd Qu.:0.9897   3rd Qu.:0.99242   3rd Qu.:0.985824   3rd Qu.:0.9947  
 Max.   :1.0000   Max.   :0.99997   Max.   :0.999996   Max.   :1.0000  
 NA's   :10       NA's   :6         NA's   :7          NA's   :20      
       zg        
 Min.   :0.1744  
 1st Qu.:0.9262  
 Median :0.9707  
 Mean   :0.9389  
 3rd Qu.:0.9905  
 Max.   :1.0000  
 NA's   :15      
> sort(colSums(aW < 0.05, na.rm = TRUE)) # how often "clear outlier":
lu st zg ba se sz su si re la ef ad ri 
 0  0  0  1  1  1  2  3  4 10 14 17 48 
> # lu st zg ba se sz su si re la ef ad ri
> #  0  0  0  1  1  1  2  3  4 10 14 17 48
> 
> lattice::levelplot(aW, asp=1/2, main="Robustness weights",
+                    xlab= "day", ylab= "site")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ambientNOxCH", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("anova.glmrob")
> ### * anova.glmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: anova.glmrob
> ### Title: Analysis of Robust Quasi-Deviance for "glmrob" Objects
> ### Aliases: anova.glmrob
> ### Keywords: robust models regression
> 
> ### ** Examples
> 
> ## Binomial response -----------
> data(carrots)
> Cfit2 <- glmrob(cbind(success, total-success) ~ logdose + block,
+                 family=binomial, data=carrots, method="Mqle",
+                 control=glmrobMqle.control(tcc=1.2))
> summary(Cfit2)

Call:  glmrob(formula = cbind(success, total - success) ~ logdose +      block, family = binomial, data = carrots, method = "Mqle",      control = glmrobMqle.control(tcc = 1.2)) 


Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   2.3883     0.6923   3.450 0.000561 ***
logdose      -2.0491     0.3685  -5.561 2.68e-08 ***
blockB2       0.2351     0.2122   1.108 0.267828    
blockB3      -0.4496     0.2409  -1.866 0.061989 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 15 weights are ~= 1. The remaining 9 ones are
     2      5      6      7     13     14     21     22     23 
0.7756 0.7026 0.6751 0.9295 0.8536 0.2626 0.8337 0.9051 0.9009 

Number of observations: 24 
Fitted by method ‘Mqle’  (in 9 iterations)

(Dispersion parameter for binomial family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.2000 
maxit 
   50 
test.acc 
  "coef" 

> 
> Cfit4 <- glmrob(cbind(success, total-success) ~ logdose * block,
+                 family=binomial, data=carrots, method="Mqle",
+                 control=glmrobMqle.control(tcc=1.2))
> 
> anova(Cfit2, Cfit4, test="Wald")
Robust Wald Test Table

Model 1: cbind(success, total - success) ~ logdose + block
Model 2: cbind(success, total - success) ~ logdose * block
Models fitted by method 'Mqle'

  pseudoDf Test.Stat Df Pr(>chisq)
1       20                        
2       18    2.4895  2      0.288
> 
> anova(Cfit2, Cfit4, test="QD")
Robust Quasi-Deviance Table

Model 1: cbind(success, total - success) ~ logdose + block
Model 2: cbind(success, total - success) ~ logdose * block
Models fitted by method 'Mqle'

  pseudoDf Test.Stat Df Pr(>chisq)
1       20                        
2       18    2.8412  2     0.2416
> 
> anova(Cfit2, Cfit4, test="QDapprox")
Robust Quasi-Deviance Table Based on a Quadratic Approximation

Model 1: cbind(success, total - success) ~ logdose + block
Model 2: cbind(success, total - success) ~ logdose * block
Models fitted by method 'Mqle'

  pseudoDf Test.Stat Df Pr(>chisq)
1       20                        
2       18    2.5022  2     0.2862
> 
> ## Poisson response ------------
> data(epilepsy)
> 
> Efit2 <- glmrob(Ysum ~ Age10 + Base4*Trt, family=poisson, data=epilepsy,
+                method="Mqle", control=glmrobMqle.control(tcc=1.2,maxit=100))
> summary(Efit2)

Call:  glmrob(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson,      data = epilepsy, method = "Mqle", control = glmrobMqle.control(tcc = 1.2,          maxit = 100)) 


Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
(Intercept)         2.036768   0.154168  13.211  < 2e-16 ***
Age10               0.158434   0.047444   3.339 0.000840 ***
Base4               0.085132   0.004174  20.395  < 2e-16 ***
Trtprogabide       -0.323886   0.087421  -3.705 0.000211 ***
Base4:Trtprogabide  0.011842   0.004967   2.384 0.017124 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 26 weights are ~= 1. The remaining 33 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.07328 0.30750 0.50730 0.49220 0.68940 0.97240 

Number of observations: 59 
Fitted by method ‘Mqle’  (in 14 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.2000 
maxit 
  100 
test.acc 
  "coef" 

> 
> Efit3 <- glmrob(Ysum ~ Age10 + Base4 + Trt, family=poisson, data=epilepsy,
+                method="Mqle", control=glmrobMqle.control(tcc=1.2,maxit=100))
> 
> anova(Efit3, Efit2, test = "Wald")
Robust Wald Test Table

Model 1: Ysum ~ Age10 + Base4 + Trt
Model 2: Ysum ~ Age10 + Base4 * Trt
Models fitted by method 'Mqle'

  pseudoDf Test.Stat Df Pr(>chisq)  
1       55                          
2       54    5.6836  1    0.01712 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> anova(Efit3, Efit2, test = "QD")
Robust Quasi-Deviance Table

Model 1: Ysum ~ Age10 + Base4 + Trt
Model 2: Ysum ~ Age10 + Base4 * Trt
Models fitted by method 'Mqle'

  pseudoDf Test.Stat Df Pr(>chisq)  
1       55                          
2       54    2.9691  1    0.08487 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> ## trivial intercept-only-model:
> E0 <- update(Efit3, . ~ 1)
> anova(E0, Efit3, Efit2, test = "QDapprox")
Robust Quasi-Deviance Table Based on a Quadratic Approximation

Model 1: Ysum ~ 1
Model 2: Ysum ~ Age10 + Base4 + Trt
Model 3: Ysum ~ Age10 + Base4 * Trt
Models fitted by method 'Mqle'

  pseudoDf Test.Stat Df Pr(>chisq)    
1       58                            
2       55   2006.26  3    < 2e-16 ***
3       54      5.68  1    0.01712 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("anova.glmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("anova.lmrob")
> ### * anova.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: anova.lmrob
> ### Title: Analysis of Robust Deviances ('anova') for "lmrob" Objects
> ### Aliases: anova.lmrob
> ### Keywords: robust models regression
> 
> ### ** Examples
> 
> data(salinity)
> summary(m0.sali  <- lmrob(Y ~ . , data = salinity))

Call:
lmrob(formula = Y ~ ., data = salinity)
 \--> method = "MM"
Residuals:
    Min      1Q  Median      3Q     Max 
-2.4326 -0.4018  0.1741  0.5272  5.8751 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 18.39327    4.01996   4.575 0.000122 ***
X1           0.71048    0.04938  14.388 2.68e-13 ***
X2          -0.17770    0.14762  -1.204 0.240397    
X3          -0.62733    0.15845  -3.959 0.000584 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 1 
Multiple R-squared:  0.8983,	Adjusted R-squared:  0.8856 
Convergence in 11 IRWLS iterations

Robustness weights: 
 observation 16 is an outlier with |weight| = 0 ( < 0.0036); 
 2 weights are ~= 1. The remaining 25 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.5335  0.8269  0.9760  0.9112  0.9952  0.9989 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         3.571e-03         6.083e-11 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> anova(m0.sali, Y ~ X1 + X3)
Robust Wald Test Table

Model 1: Y ~ X1 + X2 + X3
Model 2: Y ~ X1 + X3
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)
1       24                        
2       25    1.4492  1     0.2287
> ## -> X2 is not needed
> (m1.sali  <- lmrob(Y ~ X1 + X3, data = salinity))

Call:
lmrob(formula = Y ~ X1 + X3, data = salinity)
 \--> method = "MM"
Coefficients:
(Intercept)           X1           X3  
    15.8169       0.7210      -0.5415  

> anova(m0.sali, m1.sali) # the same as before
Robust Wald Test Table

Model 1: Y ~ X1 + X2 + X3
Model 2: Y ~ X1 + X3
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)
1       24                        
2       25    1.4492  1     0.2287
> anova(m0.sali, m1.sali, test = "Deviance")
Robust Deviance Table

Model 1: Y ~ X1 + X2 + X3
Model 2: Y ~ X1 + X3
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)
1       24                        
2       25    1.9567  1     0.1619
> ## whereas 'X3' is highly significant:
> m2 <- update(m0.sali, ~ . -X3)
> anova(m0.sali, m2)
Robust Wald Test Table

Model 1: Y ~ X1 + X2 + X3
Model 2: Y ~ X1 + X2
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)    
1       24                            
2       25    15.675  1  7.521e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> anova(m0.sali, m2,  test = "Deviance")
Robust Deviance Table

Model 1: Y ~ X1 + X2 + X3
Model 2: Y ~ X1 + X2
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)    
1       24                            
2       25     19.65  1  9.302e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> ## Global test [often not interesting]:
> anova(m0.sali, update(m0.sali, . ~ 1), test = "Wald")
Robust Wald Test Table

Model 1: Y ~ X1 + X2 + X3
Model 2: Y ~ 1
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)    
1       24                            
2       27    309.08  3  < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> anova(m0.sali, update(m0.sali, . ~ 1), test = "Deviance")
Robust Deviance Table

Model 1: Y ~ X1 + X2 + X3
Model 2: Y ~ 1
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)    
1       24                            
2       27    97.019  3  < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> if(require("MPV")) { ## Montgomery, Peck & Vining  datasets
+   Jet <- table.b13
+   Jet.rflm1 <- lmrob(y ~ ., data=Jet,
+                      control = lmrob.control(max.it = 500))
+   summary(Jet.rflm1)
+ 
+   anova(Jet.rflm1, y ~ x1 + x5 + x6, test="Wald")
+ 
+   try( anova(Jet.rflm1, y ~ x1 + x5 + x6, test="Deviance") )
+   ## -> Error in anovaLm....  Please fit the nested models by lmrob
+ 
+   ## {{ since  all robustness weights become 0 in the nested model ! }}
+ 
+   ## Ok: Do as the error message told us:
+   ##    test by comparing the two *fitted* models:
+ 
+   Jet.rflm2 <- lmrob(y ~ x1 + x5 + x6, data=Jet,
+                      control=lmrob.control(max.it=100))
+   anova(Jet.rflm1, Jet.rflm2, test="Deviance")
+ 
+ } # end{"MPV" data}
Loading required package: MPV

Attaching package: ‘MPV’

The following object is masked from ‘package:datasets’:

    stackloss

Error in anovaLmrobPair(obj0, modform[[k - 1]], initCoef[[k - 1]], test = test) : 
  Please fit the nested models by lmrob
Robust Deviance Table

Model 1: y ~ x1 + x2 + x3 + x4 + x5 + x6
Model 2: y ~ x1 + x5 + x6
Largest model fitted by lmrob(), i.e. SM

  pseudoDf Test.Stat Df Pr(>chisq)
1       33                        
2       36     5.544  3      0.136
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("anova.lmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:MPV’

> nameEx("biomassTill")
> ### * biomassTill
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: biomassTill
> ### Title: Biomass Tillage Data
> ### Aliases: biomassTill
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(biomassTill)
> str(biomassTill)
'data.frame':	58 obs. of  4 variables:
 $ Tillage: Factor w/ 3 levels "CA-","CA+","CT": 1 1 1 1 1 1 1 1 1 1 ...
 $ DVS    : num  0.49 0.49 0.49 0.49 0.749 ...
 $ Biomass: num  0.541 1.309 7.03 2.03 5.911 ...
 $ Biom.2 : num  108.25 261.8 7.03 2.03 5.91 ...
> require(lattice)
Loading required package: lattice
> ## With long tailed errors
> xyplot(Biomass ~ DVS | Tillage, data = biomassTill, type=c("p","smooth"))
> ## With additional 2 outliers:
> xyplot(Biom.2 ~ DVS | Tillage, data = biomassTill, type=c("p","smooth"))
> 
> ### Fit nonlinear Regression models: -----------------------------------
> 
> ## simple starting values, needed:
> m00st <- list(Wm = rep(300,  3),
+                a = rep( 1.5, 3),
+                b = rep( 2.2, 3))
> 
> robm <- nlrob(Biomass ~ Wm[Tillage] * (-expm1(-(DVS/a[Tillage])^b[Tillage])),
+               data = biomassTill, start = m00st, maxit = 200)
> ##                                               -----------
> summary(robm) ## ... 103 IRWLS iterations

Call:
nlrob(formula = Biomass ~ Wm[Tillage] * (-expm1(-(DVS/a[Tillage])^b[Tillage])), 
    data = biomassTill, start = m00st, maxit = 200)

Residuals:
     Min       1Q   Median       3Q      Max 
-124.369  -23.776   -5.418   28.073  340.556 

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Wm1 219.84347   78.59343   2.797 0.007346 ** 
Wm2 265.91513   97.32363   2.732 0.008722 ** 
Wm3 343.38787   26.39224  13.011  < 2e-16 ***
a1    1.46076    0.41373   3.531 0.000913 ***
a2    1.49303    0.44386   3.364 0.001500 ** 
a3    1.29362    0.07733  16.728  < 2e-16 ***
b1    2.88871    1.35760   2.128 0.038409 *  
b2    2.83763    1.18395   2.397 0.020401 *  
b3    4.04557    0.87533   4.622 2.79e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 36.9 
Convergence in 103 IRWLS iterations

Robustness weights: 
 43 weights are ~= 1. The remaining 15 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1457  0.3444  0.5338  0.5237  0.6462  0.9266 
> plot(sort(robm$rweights), log = "y",
+      main = "ordered robustness weights (log scale)")
> mtext(getCall(robm))
> 
> ## the classical (only works for the mild outliers):
> cl.m <- nls(Biomass ~ Wm[Tillage] * (-expm1(-(DVS/a[Tillage])^b[Tillage])),
+             data = biomassTill, start = m00st)
> 
> ## now for the extra-outlier data: -- fails with singular gradient !!
> try(
+ rob2 <- nlrob(Biom.2 ~ Wm[Tillage] * (-expm1(-(DVS/a[Tillage])^b[Tillage])),
+               data = biomassTill, start = m00st)
+ )
Error in nls(formula, data = data, start = start, algorithm = algorithm,  : 
  singular gradient
> ## use better starting values:
> m1st <- setNames(as.list(as.data.frame(matrix(
+                 coef(robm), 3))),
+                 c("Wm", "a","b"))
> try(# just breaks a bit later!
+ rob2 <- nlrob(Biom.2 ~ Wm[Tillage] * (-expm1(-(DVS/a[Tillage])^b[Tillage])),
+               data = biomassTill, start = m1st, maxit= 200, trace=TRUE)
+ )
robust iteration 1 
132570.9 :  219.843474 265.915135 343.387869   1.460763   1.493028   1.293623   2.888710   2.837634   4.045572
128604.8 :  256.127351 173.157197 344.261838   1.655889   1.209569   1.295166   1.999126   3.086581   4.040089
127364.3 :  368.479727 193.182438 344.252014   2.339725   1.242377   1.295119   1.649138   3.262429   4.040244
127273.3 :  681.452488 194.093283 344.252334   4.117629   1.245100   1.295120   1.466655   3.186278   4.040239
127051.6 :  1869.221835  194.045018  344.252325   10.057630    1.244583    1.295120    1.371601    3.202393    4.040239
127026.5 :  2484.692612  194.046190  344.252325   12.615190    1.244593    1.295120    1.368389    3.202187    4.040239
127020.4 :  3015.959565  194.046735  344.252325   14.670749    1.244597    1.295120    1.366951    3.202091    4.040239
127014.7 :  3401.096725  194.046998  344.252325   16.088794    1.244600    1.295120    1.366276    3.202045    4.040239
127013.6 :  3885.755878  194.047256  344.252325   17.818157    1.244602    1.295120    1.365624    3.202000    4.040239
127010.3 :  4199.028987  194.047383  344.252325   18.898057    1.244603    1.295120    1.365309    3.201978    4.040239
127008.1 :  4562.615293  194.047509  344.252325   20.126062    1.244604    1.295120    1.365001    3.201956    4.040239
127007.5 :  4989.399170  194.047634  344.252325   21.536440    1.244605    1.295120    1.364698    3.201935    4.040239
127005.4 :  5243.157240  194.047695  344.252325   22.355645    1.244605    1.295120    1.364549    3.201924    4.040239
127003.6 :  5522.442888  194.047757  344.252325   23.245497    1.244606    1.295120    1.364402    3.201913    4.040239
127002.2 :  5831.240515  194.047818  344.252325   24.215973    1.244606    1.295120    1.364256    3.201903    4.040239
127001.2 :  6174.435384  194.047879  344.252325   25.279173    1.244607    1.295120    1.364112    3.201892    4.040239
127000.8 :  6557.990783  194.047940  344.252325   26.449637    1.244608    1.295120    1.363969    3.201881    4.040239
126999.6 :  6773.669017  194.047970  344.252325   27.097453    1.244608    1.295120    1.363898    3.201876    4.040239
126998.5 :  7003.354768  194.048000  344.252325   27.781442    1.244608    1.295120    1.363828    3.201871    4.040239
126997.5 :  7248.438041  194.048030  344.252325   28.504857    1.244608    1.295120    1.363758    3.201866    4.040239
126996.6 :  7510.529878  194.048060  344.252325   29.271456    1.244609    1.295120    1.363688    3.201860    4.040239
126995.8 :  7791.431437  194.048090  344.252325   30.085380    1.244609    1.295120    1.363619    3.201855    4.040239
126995.2 :  8093.224685  194.048120  344.252325   30.951381    1.244609    1.295120    1.363550    3.201850    4.040239
126994.7 :  8418.252534  194.048150  344.252325   31.874725    1.244609    1.295120    1.363482    3.201845    4.040239
126994.3 :  8769.328341  194.048180  344.252325   32.861744    1.244610    1.295120    1.363413    3.201840    4.040239
126994.2 :  9149.698921  194.048210  344.252325   33.919652    1.244610    1.295120    1.363346    3.201835    4.040239
126993.6 :  9356.392066  194.048224  344.252325   34.488114    1.244610    1.295120    1.363312    3.201832    4.040239
126993 :  9572.349499  194.048239  344.252325   35.078544    1.244610    1.295120    1.363278    3.201829    4.040239
126992.5 :  9798.177950  194.048254  344.252325   35.692233    1.244610    1.295120    1.363245    3.201827    4.040239
126992 :  10034.569687   194.048269   344.252325    36.330664     1.244610     1.295120     1.363211     3.201824     4.040239
126991.5 :  10282.246483   194.048283   344.252325    36.995354     1.244610     1.295120     1.363178     3.201822     4.040239
126991.1 :  10542.093973   194.048298   344.252325    37.688213     1.244611     1.295120     1.363144     3.201819     4.040239
126990.7 :  10815.000717   194.048313   344.252325    38.411096     1.244611     1.295120     1.363111     3.201817     4.040239
126990.4 :  11101.954963   194.048328   344.252325    39.166056     1.244611     1.295120     1.363078     3.201814     4.040239
126990.1 :  11404.083334   194.048342   344.252325    39.955445     1.244611     1.295120     1.363045     3.201812     4.040239
126989.9 :  11722.591565   194.048357   344.252325    40.781734     1.244611     1.295120     1.363012     3.201809     4.040239
126989.7 :  12058.856015   194.048372   344.252325    41.647749     1.244611     1.295120     1.362979     3.201806     4.040239
126989.6 :  12414.407859   194.048386   344.252325    42.556613     1.244611     1.295120     1.362946     3.201804     4.040239
126989.5 :  12790.874986   194.048401   344.252325    43.511571     1.244611     1.295120     1.362914     3.201801     4.040239
Error in nls(formula, data = data, start = start, algorithm = algorithm,  : 
  step factor 0.000488281 reduced below 'minFactor' of 0.000976562
> 
> ## Comparison  {more to come} % once we have  "MM" working...
> rbind(start = unlist(m00st),
+       class = coef(cl.m),
+       rob   = coef(robm))
           Wm1      Wm2      Wm3       a1       a2       a3       b1       b2
start 300.0000 300.0000 300.0000 1.500000 1.500000 1.500000 2.200000 2.200000
class 489.9173 615.5279 380.0640 2.342740 2.189602 1.371278 2.397332 2.594862
rob   219.8435 265.9151 343.3879 1.460763 1.493028 1.293623 2.888710 2.837634
            b3
start 2.200000
class 3.594968
rob   4.045572
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("biomassTill", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:lattice’

> nameEx("bushfire")
> ### * bushfire
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bushfire
> ### Title: Campbell Bushfire Data
> ### Aliases: bushfire
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bushfire)
> plot(bushfire)
> covMcd(bushfire)
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=22); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = bushfire)
Log(Det.):  18.14 

Robust Estimate of Location:
   V1     V2     V3     V4     V5  
105.5  146.9  274.4  217.5  279.0  
Robust Estimate of Covariance:
         V1       V2     V3      V4      V5
V1    566.7    438.5  -2771  -623.5  -508.6
V2    438.5    386.9  -1843  -376.4  -318.1
V3  -2771.2  -1842.5  16367  4021.4  3195.7
V4   -623.5   -376.4   4021  1059.2   827.3
V5   -508.6   -318.1   3196   827.3   651.6
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bushfire", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("carrots")
> ### * carrots
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: carrots
> ### Title: Insect Damages on Carrots
> ### Aliases: carrots
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(carrots)
> str(carrots)
'data.frame':	24 obs. of  4 variables:
 $ success: int  10 16 8 6 9 9 1 2 17 10 ...
 $ total  : int  35 42 50 42 35 42 32 28 38 40 ...
 $ logdose: num  1.52 1.64 1.76 1.88 2 2.12 2.24 2.36 1.52 1.64 ...
 $ block  : Factor w/ 3 levels "B1","B2","B3": 1 1 1 1 1 1 1 1 2 2 ...
> plot(success/total ~ logdose, data = carrots, col = as.integer(block))
> coplot(success/total ~ logdose | block, data = carrots)
> 
> ## Classical glm
> Cfit0 <- glm(cbind(success, total-success) ~ logdose + block,
+              data=carrots, family=binomial)
> summary(Cfit0)

Call:
glm(formula = cbind(success, total - success) ~ logdose + block, 
    family = binomial, data = carrots)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.9200  -1.0215  -0.3239   1.0602   3.4324  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   2.0226     0.6501   3.111  0.00186 ** 
logdose      -1.8174     0.3439  -5.285 1.26e-07 ***
blockB2       0.3009     0.1991   1.511  0.13073    
blockB3      -0.5424     0.2318  -2.340  0.01929 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 83.344  on 23  degrees of freedom
Residual deviance: 39.976  on 20  degrees of freedom
AIC: 128.61

Number of Fisher Scoring iterations: 4

> 
> ## Robust Fit (see help(glmrob)) ....
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("carrots", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("chgDefaults-methods")
> ### * chgDefaults-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: chgDefaults-methods
> ### Title: Change Defaults (Parameters) of "Psi Function" Objects
> ### Aliases: chgDefaults chgDefaults-methods chgDefaults,ANY-method
> ###   chgDefaults,psi_func-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> ## Hampel's psi and rho:
> H.38 <- chgDefaults(hampelPsi, k = c(1.5, 3.5, 8))
> H.38
Hampel psi function (k1 = 1.5, k2 = 3.5, k3 = 8) 
> plot(H.38)
> ## for more see  ?psiFunc
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("chgDefaults-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("classPC")
> ### * classPC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: classPC
> ### Title: Compute Classical Principal Components via SVD or Eigen
> ### Aliases: classPC
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> set.seed(17)
> x <- matrix(rnorm(120), 10, 12) # n < p {the unusual case}
> pcx  <- classPC(x)
> (k <- pcx$rank) # = 9  [after centering!]
[1] 9
> pc2  <- classPC(x, scores=TRUE)
> pcS  <- classPC(x, via.svd=TRUE)
> all.equal(pcx, pcS, tol = 1e-8)
[1] TRUE
> ## TRUE: eigen() & svd() based PC are close here
> pc0 <- classPC(x, center=FALSE, scale=TRUE)
> pc0$rank # = 10  here *no* centering (as E[.] = 0)
[1] 10
> 
> ## Loadings are orthnormal:
> zapsmall( crossprod( pcx$loadings ) )
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    1    0    0    0    0    0    0    0    0
 [2,]    0    1    0    0    0    0    0    0    0
 [3,]    0    0    1    0    0    0    0    0    0
 [4,]    0    0    0    1    0    0    0    0    0
 [5,]    0    0    0    0    1    0    0    0    0
 [6,]    0    0    0    0    0    1    0    0    0
 [7,]    0    0    0    0    0    0    1    0    0
 [8,]    0    0    0    0    0    0    0    1    0
 [9,]    0    0    0    0    0    0    0    0    1
> 
> ## PC Scores are roughly orthogonal:
> S.S <- crossprod(pc2$scores)
> print.table(signif(zapsmall(S.S), 3), zero.print=".")
      [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  
 [1,] 35.700      .      .      .      .      .      .      .      .
 [2,]      . 21.600      .      .      .      .      .      .      .
 [3,]      .      . 17.300      .      .      .      .      .      .
 [4,]      .      .      . 14.300      .      .      .      .      .
 [5,]      .      .      .      .  6.120      .      .      .      .
 [6,]      .      .      .      .      .  5.450      .      .      .
 [7,]      .      .      .      .      .      .  2.300      .      .
 [8,]      .      .      .      .      .      .      .  1.390      .
 [9,]      .      .      .      .      .      .      .      .  0.493
> stopifnot(all.equal(pcx$eigenvalues, diag(S.S)/k))
> 
> ## the usual n > p case :
> pc.x <- classPC(t(x))
> pc.x$rank # = 10, full rank in the n > p case
[1] 10
> ## Don't show: 
> stopifnot(classPC(x, center=FALSE)$rank == min(dim(x)))
> ii <- names(pcx); ii <- ii[ii != "scores"]
> stopifnot(all.equal(pcx[ii], pc2[ii], tol=0),
+ 	  all.equal(pcx, pcS, tol=1e-8),
+ 	  length(pc.x$center) == 10, identical(pc0$center, FALSE),
+           all.equal(crossprod(pcx $loadings), diag(9)),
+           all.equal(crossprod(pc.x$loadings), diag(10)),
+           all.equal(colSums(abs(pcx$loadings)),
+                     c(2.69035673, 2.78449399, 3.00148438,
+                       2.9016688,  2.49400759, 2.90477204,
+                       3.01639807, 2.4217181, 2.64665957)),
+ 	  length(pc0$scale) == 12)
> ## End(Don't show)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("classPC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cloud")
> ### * cloud
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cloud
> ### Title: Cloud point of a Liquid
> ### Aliases: cloud
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(cloud)
> summary(lm.cloud <- lm(CloudPoint ~., data=cloud))

Call:
lm(formula = CloudPoint ~ ., data = cloud)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.4464 -0.4282  0.1809  0.6127  0.9718 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 23.34638    0.29675   78.67  < 2e-16 ***
Percentage   1.04546    0.05516   18.95 7.18e-13 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.7372 on 17 degrees of freedom
Multiple R-squared:  0.9548,	Adjusted R-squared:  0.9522 
F-statistic: 359.3 on 1 and 17 DF,  p-value: 7.182e-13

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cloud", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("colMedians")
> ### * colMedians
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: colMedians
> ### Title: Fast Row or Column-wise Medians of a Matrix
> ### Aliases: colMedians rowMedians
> ### Keywords: array robust univar
> 
> ### ** Examples
> 
> set.seed(1); n <- 234; p <- 543 # n*p = 127'062
> x <- matrix(rnorm(n*p), n, p)
> x[sample(seq_along(x), size= n*p / 256)] <- NA
> R1 <- system.time(r1 <- rowMedians(x, na.rm=TRUE))
> C1 <- system.time(y1 <- colMedians(x, na.rm=TRUE))
> R2 <- system.time(r2 <- apply(x, 1, median, na.rm=TRUE))
> C2 <- system.time(y2 <- apply(x, 2, median, na.rm=TRUE))
> R2 / R1 # speedup factor: ~= 4   {platform dependent}
   user  system elapsed 
    5.5     NaN     5.5 
> C2 / C1 # speedup factor: ~= 5.8 {platform dependent}
   user  system elapsed 
     18     Inf      18 
> stopifnot(all.equal(y1, y2, tol=1e-15),
+           all.equal(r1, r2, tol=1e-15))
> 
> (m <- cbind(x1=3, x2=c(4:1, 3:4,4)))
     x1 x2
[1,]  3  4
[2,]  3  3
[3,]  3  2
[4,]  3  1
[5,]  3  3
[6,]  3  4
[7,]  3  4
> stopifnot(colMedians(m) == 3,
+           all.equal(colMeans(m), colMedians(m)),# <- including names !
+           all.equal(rowMeans(m), rowMedians(m)))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("colMedians", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("coleman")
> ### * coleman
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coleman
> ### Title: Coleman Data Set
> ### Aliases: coleman
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(coleman)
> pairs(coleman)
> summary( lm.coleman <-     lm(Y ~ . , data = coleman))

Call:
lm(formula = Y ~ ., data = coleman)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.9497 -0.6174  0.0623  0.7343  5.0018 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 19.94857   13.62755   1.464   0.1653    
salaryP     -1.79333    1.23340  -1.454   0.1680    
fatherWc     0.04360    0.05326   0.819   0.4267    
sstatus      0.55576    0.09296   5.979 3.38e-05 ***
teacherSc    1.11017    0.43377   2.559   0.0227 *  
motherLev   -1.81092    2.02739  -0.893   0.3868    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.074 on 14 degrees of freedom
Multiple R-squared:  0.9063,	Adjusted R-squared:  0.8728 
F-statistic: 27.08 on 5 and 14 DF,  p-value: 9.927e-07

> summary(lts.coleman <- ltsReg(Y ~ . , data = coleman))

Call:
ltsReg.formula(formula = Y ~ ., data = coleman)

Residuals (from reweighted LS):
    Min      1Q  Median      3Q     Max 
-1.2155 -0.3887  0.0000  0.3056  0.9845 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
Intercept 29.75772    5.53224   5.379 0.000166 ***
salaryP   -1.69854    0.46602  -3.645 0.003358 ** 
fatherWc   0.08512    0.02079   4.093 0.001490 ** 
sstatus    0.66617    0.03824  17.423 6.94e-10 ***
teacherSc  1.18400    0.16425   7.208 1.07e-05 ***
motherLev -4.06675    0.84867  -4.792 0.000440 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.7824 on 12 degrees of freedom
Multiple R-Squared: 0.9883,	Adjusted R-squared: 0.9835 
F-statistic: 203.2 on 5 and 12 DF,  p-value: 3.654e-11 

> 
> coleman.x <- data.matrix(coleman[, 1:6])
> (Cc <- covMcd(coleman.x))
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=13); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = coleman.x)
Log(Det.):  1.558 

Robust Estimate of Location:
  salaryP   fatherWc    sstatus  teacherSc  motherLev          Y  
    2.615     43.302      2.805     24.766      6.271     34.733  
Robust Estimate of Covariance:
           salaryP  fatherWc  sstatus  teacherSc  motherLev        Y
salaryP     0.5131     9.193    2.115     1.2075     0.1364    2.586
fatherWc    9.1930  2866.913  918.993    26.4050    65.2060  621.151
sstatus     2.1152   918.993  408.775     8.0530    22.9589  266.202
teacherSc   1.2075    26.405    8.053     5.4481     0.5468   10.078
motherLev   0.1364    65.206   22.959     0.5468     1.6812   14.973
Y           2.5860   621.151  266.202    10.0776    14.9727  178.916
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coleman", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("condroz")
> ### * condroz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: condroz
> ### Title: Condroz Data
> ### Aliases: condroz
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   adjbox(condroz$Ca)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("condroz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("covComed")
> ### * covComed
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: covComed
> ### Title: Co-Median Location and Scatter "Covariance" Estimator
> ### Aliases: covComed comedian COM .wgtFUN.covComed
> 
> ### ** Examples
> 
> data(hbk)
> hbk.x <- data.matrix(hbk[, 1:3])
> (cc1 <- covComed(hbk.x))
$Z
              [,1]        [,2]          [,3]
 [1,] -6.087809254 13.09999354 -14.705465671
 [2,] -5.777228968 13.64634107 -15.052212929
 [3,] -6.536101218 13.56143334 -16.162000384
 [4,] -6.111574526 14.34825012 -16.565974104
 [5,] -6.297788761 14.10072524 -16.218097351
 [6,] -6.468706561 13.63735058 -15.146601077
 [7,] -6.286768634 13.93004059 -15.095480588
 [8,] -6.015541425 13.10704917 -14.996115962
 [9,] -6.000161208 13.83327590 -16.207379832
[10,] -5.794443424 13.18932959 -15.865515487
[11,] -6.772255277 16.00427044 -18.279792818
[12,] -7.452170489 15.48206281 -19.363262321
[13,] -7.139581165 17.23266496 -17.612583607
[14,] -6.281552750 22.08802267 -17.466612096
[15,] -1.753276252  1.94492066  -0.900244788
[16,] -1.518745224  1.45732603   0.068937934
[17,]  0.056461929  0.98333683  -0.070787684
[18,] -1.237065583  1.11058694  -0.941557472
[19,] -0.385035223  1.84343471  -0.772375796
[20,] -1.583588589  2.24313094  -0.960733521
[21,] -1.359513613  1.48462556  -0.853003931
[22,] -0.184740103  2.02156566  -0.955390062
[23,] -0.979162178  1.49514259  -0.271483571
[24,] -0.600659567  1.46325462  -0.144765063
[25,] -0.538967978  0.04476564  -0.165082266
[26,] -0.474430108  2.11610253  -1.258598292
[27,] -1.768008612  1.71917505  -1.362700678
[28,] -1.014187954  0.60481610  -0.991036330
[29,] -0.627711388  0.61257300  -0.353711359
[30,] -0.795553846  0.56210932  -1.809733937
[31,] -1.595977246  0.98773866  -0.342105112
[32,] -0.172540831  1.49186780  -0.077113437
[33,] -0.730448282  1.98650923  -0.670773168
[34,] -0.248662904  0.03281096  -0.367377806
[35,] -1.675534766  1.65407663  -1.432683871
[36,] -0.636813495  1.45611893  -1.386645086
[37,] -0.081864817  1.90854196  -1.368565884
[38,] -0.732417294  0.78947036   0.006211199
[39,] -1.153883229  0.10394431  -0.547569358
[40,] -0.244845068  1.27225483  -0.589560320
[41,] -1.858105966  1.17252575  -1.379849175
[42,] -0.276773680  0.69577641  -1.463770182
[43,]  0.035145964  2.04496035  -0.412233459
[44,] -1.100573075  0.45459706  -1.668345700
[45,] -1.009944435  0.14175204  -0.221817581
[46,] -1.088322811  0.44907680  -1.556736479
[47,] -1.588108893  0.18436993  -0.269477008
[48,] -1.709890863  1.16516834  -1.453094640
[49,] -1.603863802  1.68482873  -0.816281804
[50,] -1.137764137  1.86204552  -1.424810053
[51,] -1.143357981  1.00531132  -0.051235042
[52,] -1.745477096  0.51109567  -0.462497867
[53,] -0.339291545  0.34565598  -1.813905925
[54,] -0.455454229  1.87878408  -0.026923653
[55,] -0.209291624  1.50842858  -0.411941103
[56,] -0.843743212  2.04117952  -0.315953302
[57,] -0.938855749  0.50782087  -0.268127733
[58,] -1.180585450  2.20020244  -0.610796569
[59,] -0.916717128  1.42014834  -1.527542176
[60,] -0.292051912  1.01790487  -1.785841117
[61,] -0.243527532  2.17415416  -1.564138090
[62,] -0.477101589  0.09974653  -0.112539927
[63,] -0.462212633  1.69268334   0.021226919
[64,] -1.489302327  2.00788017  -1.379012036
[65,] -1.164251881  0.56976851  -1.372592718
[66,] -0.074593329  1.12886970  -0.388885422
[67,] -0.810759263  1.30935246  -0.525610524
[68,] -0.118823198  0.03373395  -0.608037103
[69,] -1.021543223  0.44241184  -0.035833400
[70,] -0.597617014  1.45826668  -1.504067926
[71,] -1.165343625  1.66551664  -1.091822808
[72,] -0.314667210  1.28390773  -0.751160536
[73,] -0.216086436  1.10977051  -1.166887704
[74,] -0.003522848  1.38865986  -0.836744161
[75,] -0.296415621  0.32633507  -1.423273648

$raw.cov
             [,1]         [,2]       [,3]
[1,]  3.562613961 -0.007646157 0.06862357
[2,] -0.007646157  2.491357097 0.01816029
[3,]  0.068623567  0.018160292 2.47944913

$raw.center
[1] 1.914091 2.197396 2.021472

$raw.mah
 [1] 413.26701462 436.34206667 483.89439421 516.12597478 497.64308013
 [6] 446.87547230 450.68952609 423.02595844 486.90613102 455.05264601
[11] 644.33160094 686.60550680 659.58619698 831.83678287   0.82050583
[16]   1.62268762   2.45249023   0.18489708   0.61144075   0.98643384
[21]   0.13938812   1.04835988   0.61078870   1.03058170   3.19340659
[26]   0.87160194   0.86790315   0.78776229   1.39971095   1.83966446
[31]   1.08355679   1.73764914   0.48366919   3.24454426   0.77906968
[36]   0.38050679   1.32878511   1.76461960   2.21118811   0.83103368
[41]   1.05597753   1.51841502   1.89180190   1.73500319   2.56336692
[46]   1.55853769   2.70036798   0.90874897   0.44080452   0.46146299
[51]   1.30059971   1.84189093   2.73922588   1.62580983   1.06176328
[56]   0.91917658   1.59465079   0.76532920   0.42332582   1.62603885
[61]   1.62350879   3.20590011   1.60802546   0.77547640   1.09279519
[66]   1.45643795   0.31080873   3.17444293   2.20799901   0.55860928
[71]   0.08944104   0.59955665   0.85033951   1.08807727   2.18959018

$wgtFUN
function (d) 
as.numeric(d < median(d) * cMah)
<bytecode: 0x7fd94ca87260>
<environment: 0x7fd94cad8c00>

$cov
          X1        X2        X3
X1 1.1320546 0.0507541 0.1173361
X2 0.0507541 1.1522732 0.1407377
X3 0.1173361 0.1407377 1.0701585

$center
      X1       X2       X3 
1.537705 1.780328 1.686885 

$n.obs
[1] 75

$weights
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

attr(,"class")
[1] "comed"
> (ccW <- covComed(hbk.x, reweight=TRUE))
$Z
              [,1]        [,2]          [,3]
 [1,] -6.087809254 13.09999354 -14.705465671
 [2,] -5.777228968 13.64634107 -15.052212929
 [3,] -6.536101218 13.56143334 -16.162000384
 [4,] -6.111574526 14.34825012 -16.565974104
 [5,] -6.297788761 14.10072524 -16.218097351
 [6,] -6.468706561 13.63735058 -15.146601077
 [7,] -6.286768634 13.93004059 -15.095480588
 [8,] -6.015541425 13.10704917 -14.996115962
 [9,] -6.000161208 13.83327590 -16.207379832
[10,] -5.794443424 13.18932959 -15.865515487
[11,] -6.772255277 16.00427044 -18.279792818
[12,] -7.452170489 15.48206281 -19.363262321
[13,] -7.139581165 17.23266496 -17.612583607
[14,] -6.281552750 22.08802267 -17.466612096
[15,] -1.753276252  1.94492066  -0.900244788
[16,] -1.518745224  1.45732603   0.068937934
[17,]  0.056461929  0.98333683  -0.070787684
[18,] -1.237065583  1.11058694  -0.941557472
[19,] -0.385035223  1.84343471  -0.772375796
[20,] -1.583588589  2.24313094  -0.960733521
[21,] -1.359513613  1.48462556  -0.853003931
[22,] -0.184740103  2.02156566  -0.955390062
[23,] -0.979162178  1.49514259  -0.271483571
[24,] -0.600659567  1.46325462  -0.144765063
[25,] -0.538967978  0.04476564  -0.165082266
[26,] -0.474430108  2.11610253  -1.258598292
[27,] -1.768008612  1.71917505  -1.362700678
[28,] -1.014187954  0.60481610  -0.991036330
[29,] -0.627711388  0.61257300  -0.353711359
[30,] -0.795553846  0.56210932  -1.809733937
[31,] -1.595977246  0.98773866  -0.342105112
[32,] -0.172540831  1.49186780  -0.077113437
[33,] -0.730448282  1.98650923  -0.670773168
[34,] -0.248662904  0.03281096  -0.367377806
[35,] -1.675534766  1.65407663  -1.432683871
[36,] -0.636813495  1.45611893  -1.386645086
[37,] -0.081864817  1.90854196  -1.368565884
[38,] -0.732417294  0.78947036   0.006211199
[39,] -1.153883229  0.10394431  -0.547569358
[40,] -0.244845068  1.27225483  -0.589560320
[41,] -1.858105966  1.17252575  -1.379849175
[42,] -0.276773680  0.69577641  -1.463770182
[43,]  0.035145964  2.04496035  -0.412233459
[44,] -1.100573075  0.45459706  -1.668345700
[45,] -1.009944435  0.14175204  -0.221817581
[46,] -1.088322811  0.44907680  -1.556736479
[47,] -1.588108893  0.18436993  -0.269477008
[48,] -1.709890863  1.16516834  -1.453094640
[49,] -1.603863802  1.68482873  -0.816281804
[50,] -1.137764137  1.86204552  -1.424810053
[51,] -1.143357981  1.00531132  -0.051235042
[52,] -1.745477096  0.51109567  -0.462497867
[53,] -0.339291545  0.34565598  -1.813905925
[54,] -0.455454229  1.87878408  -0.026923653
[55,] -0.209291624  1.50842858  -0.411941103
[56,] -0.843743212  2.04117952  -0.315953302
[57,] -0.938855749  0.50782087  -0.268127733
[58,] -1.180585450  2.20020244  -0.610796569
[59,] -0.916717128  1.42014834  -1.527542176
[60,] -0.292051912  1.01790487  -1.785841117
[61,] -0.243527532  2.17415416  -1.564138090
[62,] -0.477101589  0.09974653  -0.112539927
[63,] -0.462212633  1.69268334   0.021226919
[64,] -1.489302327  2.00788017  -1.379012036
[65,] -1.164251881  0.56976851  -1.372592718
[66,] -0.074593329  1.12886970  -0.388885422
[67,] -0.810759263  1.30935246  -0.525610524
[68,] -0.118823198  0.03373395  -0.608037103
[69,] -1.021543223  0.44241184  -0.035833400
[70,] -0.597617014  1.45826668  -1.504067926
[71,] -1.165343625  1.66551664  -1.091822808
[72,] -0.314667210  1.28390773  -0.751160536
[73,] -0.216086436  1.10977051  -1.166887704
[74,] -0.003522848  1.38865986  -0.836744161
[75,] -0.296415621  0.32633507  -1.423273648

$raw.cov
             [,1]         [,2]       [,3]
[1,]  3.562613961 -0.007646157 0.06862357
[2,] -0.007646157  2.491357097 0.01816029
[3,]  0.068623567  0.018160292 2.47944913

$raw.center
[1] 1.914091 2.197396 2.021472

$raw.mah
 [1] 413.26701462 436.34206667 483.89439421 516.12597478 497.64308013
 [6] 446.87547230 450.68952609 423.02595844 486.90613102 455.05264601
[11] 644.33160094 686.60550680 659.58619698 831.83678287   0.82050583
[16]   1.62268762   2.45249023   0.18489708   0.61144075   0.98643384
[21]   0.13938812   1.04835988   0.61078870   1.03058170   3.19340659
[26]   0.87160194   0.86790315   0.78776229   1.39971095   1.83966446
[31]   1.08355679   1.73764914   0.48366919   3.24454426   0.77906968
[36]   0.38050679   1.32878511   1.76461960   2.21118811   0.83103368
[41]   1.05597753   1.51841502   1.89180190   1.73500319   2.56336692
[46]   1.55853769   2.70036798   0.90874897   0.44080452   0.46146299
[51]   1.30059971   1.84189093   2.73922588   1.62580983   1.06176328
[56]   0.91917658   1.59465079   0.76532920   0.42332582   1.62603885
[61]   1.62350879   3.20590011   1.60802546   0.77547640   1.09279519
[66]   1.45643795   0.31080873   3.17444293   2.20799901   0.55860928
[71]   0.08944104   0.59955665   0.85033951   1.08807727   2.18959018

$wgtFUN
function (d) 
as.numeric(d < median(d) * cMah)
<bytecode: 0x7fd94ca87260>
<environment: 0x7fd94ca33468>

$cov
          X1        X2        X3
X1 1.1320546 0.0507541 0.1173361
X2 0.0507541 1.1522732 0.1407377
X3 0.1173361 0.1407377 1.0701585

$center
      X1       X2       X3 
1.537705 1.780328 1.686885 

$n.obs
[1] 75

$raw.weights
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

$mah
 [1]  866.8549007  912.3681940 1017.0299206 1079.9186877 1041.8580415
 [6]  935.6980871  941.3078111  888.0064615 1021.0376511  957.4611322
[11] 1342.3698119 1440.5949347 1362.9053822 1688.5026579    4.0064280
[16]    4.6884713    3.7574080    0.6178804    1.6567463    4.2714721
[21]    1.1205589    3.0480588    1.3526403    1.7339162    3.9441987
[26]    2.9096498    3.9755147    1.0723383    1.2914025    4.4561502
[31]    2.9401141    3.1064228    1.6295712    4.1685558    3.5514637
[36]    1.3096674    4.0559690    2.2133428    3.2201247    1.1746971
[41]    4.1844894    3.2543802    4.6603888    4.0877683    3.4392115
[46]    3.4973306    5.2049556    3.5483292    2.5236386    2.1725973
[51]    2.2939158    4.3831564    6.3346432    3.6282032    1.8882576
[56]    2.7059747    1.8502041    3.0356765    1.6369388    4.3965207
[61]    5.0323398    3.9487802    3.2484854    3.4413018    2.3934458
[66]    2.1370579    0.3027165    4.4393944    3.0483378    1.8469822
[71]    1.0073289    0.8502209    1.7521614    2.2965290    4.2555744

$weights
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

attr(,"class")
[1] "comed"
> cc0  <- covComed(hbk.x, n.iter=0)
> cc0W <- covComed(hbk.x, n.iter=0, reweight=TRUE)
> 
> stopifnot(all.equal(unclass(cc0), # here, the 0-1 weights don't change:
+                     cc0W[names(cc0)], tol=1e-12),
+           which(cc1$weights == 0) == 1:14,
+           which(ccW$weights == 0) == 1:14,
+           which(cc0$weights == 0) == 1:14)
> 
> ## Martin's smooth reweighting:
> 
> ## List of experimental pre-specified wgtFUN() creators:
> ## Cutoffs may depend on  (n, p, control$beta) :
> str(.wgtFUN.covComed)
List of 6
 $ 01.original :function (p, ...)  
 $ 01.flex     :function (p, n, control)  
 $ 01.adaptive :function (p, n, ...)  
 $ sm1.flex    :function (p, n, control)  
 $ sm1.adaptive:function (p, n, ...)  
 $ sm2.adaptive:function (p, n, ...)  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("covComed", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("covMcd")
> ### * covMcd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: covMcd
> ### Title: Robust Location and Scatter Estimation via MCD
> ### Aliases: covMcd print.mcd .MCDcons .MCDcnp2 .MCDcnp2.rew
> ###   .MCDsingularityMsg .wgtFUN.covMcd
> ### Keywords: robust multivariate
> 
> ### ** Examples
> 
> data(hbk)
> hbk.x <- data.matrix(hbk[, 1:3])
> set.seed(17)
> (cH <- covMcd(hbk.x))
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=39); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = hbk.x)
Log(Det.):  -1.048 

Robust Estimate of Location:
   X1     X2     X3  
1.538  1.780  1.687  
Robust Estimate of Covariance:
        X1      X2      X3
X1  1.6528  0.0741  0.1713
X2  0.0741  1.6823  0.2055
X3  0.1713  0.2055  1.5624
> cH0 <- covMcd(hbk.x, nsamp = "deterministic")
> with(cH0, stopifnot(quan == 39,
+      iBest == c(1:4,6), # 5 out of 6 gave the same
+      identical(raw.weights, mcd.wt),
+      identical(which(mcd.wt == 0), 1:14), all.equal(crit, -1.045500594135)))
> 
> ## the following three statements are equivalent
> c1 <- covMcd(hbk.x, alpha = 0.75)
> c2 <- covMcd(hbk.x, control = rrcov.control(alpha = 0.75))
> ## direct specification overrides control one:
> c3 <- covMcd(hbk.x, alpha = 0.75,
+              control = rrcov.control(alpha=0.95))
> c1
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.75 ==> h=57); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = hbk.x, alpha = 0.75)
Log(Det.):  0.1 

Robust Estimate of Location:
   X1     X2     X3  
1.538  1.780  1.687  
Robust Estimate of Covariance:
         X1       X2      X3
X1  1.67867  0.07526  0.1740
X2  0.07526  1.70865  0.2087
X3  0.17399  0.20869  1.5869
> 
> ## Martin's smooth reweighting:
> 
> ## List of experimental pre-specified wgtFUN() creators:
> ## Cutoffs may depend on  (n, p, control$beta) :
> str(.wgtFUN.covMcd)
List of 8
 $ 01.original :function (p, ...)  
 $ 01.flex     :function (p, n, control)  
 $ 01.adaptive :function (p, n, ...)  
 $ sm1.orig    :function (p, n, ...)  
 $ sm2.orig    :function (p, n, ...)  
 $ sm1.adaptive:function (p, n, ...)  
 $ sm2.adaptive:function (p, n, ...)  
 $ smE.adaptive:function (p, n, ...)  
> 
> cMM <- covMcd(hbk.x, wgtFUN = "sm1.adaptive")
> 
> ina <- which(names(cH) == "call")
> all.equal(cMM[-ina], cH[-ina]) # *some* differences, not huge (same 'best'):
[1] "Component “cov”: Mean relative difference: 0.00791192"      
[2] "Component “center”: Mean relative difference: 0.001770837"  
[3] "Component “raw.weights”: Mean relative difference: 0.146213"
[4] "Component “mah”: Mean relative difference: 0.004345562"     
[5] "Component “cnp2”: Mean relative difference: 0.002769554"    
> stopifnot(all.equal(cMM[-ina], cH[-ina], tol = 0.2))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("covMcd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("covOGK")
> ### * covOGK
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: covOGK
> ### Title: Orthogonalized Gnanadesikan-Kettenring (OGK) Covariance Matrix
> ###   Estimation
> ### Aliases: covOGK covGK s_mad s_IQR hard.rejection
> ### Keywords: robust multivariate
> 
> ### ** Examples
> 
> data(hbk)
> hbk.x <- data.matrix(hbk[, 1:3])
> 
> cO1 <- covOGK(hbk.x, sigmamu = scaleTau2)
> cO2 <- covOGK(hbk.x, sigmamu = s_Qn)
> cO3 <- covOGK(hbk.x, sigmamu = s_Sn)
> cO4 <- covOGK(hbk.x, sigmamu = s_mad)
> cO5 <- covOGK(hbk.x, sigmamu = s_IQR)
> 
> 
> data(toxicity)
> cO1tox <- covOGK(toxicity, sigmamu = scaleTau2)
> cO2tox <- covOGK(toxicity, sigmamu = s_Qn)
> 
> ## nice formatting of correlation matrices:
> as.dist(round(cov2cor(cO1tox$cov), 2))
       1     2     3     4     5     6     7     8     9
2   0.70                                                
3  -0.64 -0.43                                          
4   0.05 -0.21  0.58                                    
5  -0.14  0.02  0.51  0.30                              
6   0.73  0.61 -0.87 -0.58 -0.17                        
7   0.31  0.55 -0.26 -0.41  0.60  0.60                  
8  -0.12 -0.21 -0.45 -0.76 -0.02  0.50  0.43            
9  -0.71 -0.51  0.31 -0.40  0.43 -0.19  0.31  0.66      
10  0.17 -0.16 -0.08  0.22 -0.18  0.00 -0.29 -0.12 -0.25
> as.dist(round(cov2cor(cO2tox$cov), 2))
       1     2     3     4     5     6     7     8     9
2   0.91                                                
3  -0.32 -0.17                                          
4  -0.25 -0.05  0.64                                    
5  -0.01  0.28  0.48  0.48                              
6   0.88  0.72 -0.50 -0.54 -0.08                        
7   0.78  0.78 -0.11 -0.06  0.36  0.77                  
8   0.32  0.13 -0.57 -0.84 -0.22  0.70  0.41            
9  -0.28 -0.35 -0.11 -0.50  0.00  0.11  0.14  0.72      
10  0.36  0.18 -0.25 -0.07 -0.06  0.41  0.43  0.24  0.09
> 
> ## "graphical"
> symnum(cov2cor(cO1tox$cov))
                         
 [1,] 1                  
 [2,] , 1                
 [3,] , . 1              
 [4,]     . 1            
 [5,]     . . 1          
 [6,] , , + .   1        
 [7,] . .   . , . 1      
 [8,]     . ,   . . 1    
 [9,] , . . . .   . , 1  
[10,]                   1
attr(,"legend")
[1] 0 ‘ ’ 0.3 ‘.’ 0.6 ‘,’ 0.8 ‘+’ 0.9 ‘*’ 0.95 ‘B’ 1
> symnum(cov2cor(cO2tox$cov), legend=FALSE)
                         
 [1,] 1                  
 [2,] * 1                
 [3,] .   1              
 [4,]     , 1            
 [5,]     . . 1          
 [6,] + , . .   1        
 [7,] , ,     . , 1      
 [8,] .   . +   , . 1    
 [9,]   .   .       , 1  
[10,] .         . .     1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("covOGK", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("covPlot")
> ### * covPlot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.mcd
> ### Title: Robust Distance Plots
> ### Aliases: covPlot plot.mcd
> ### Keywords: hplot robust multivariate
> 
> ### ** Examples
> 
> data(Animals, package ="MASS")
> brain <- Animals[c(1:24, 26:25, 27:28),]
> mcd <- covMcd(log(brain))
> 
> plot(mcd, which = "distance", classic = TRUE)# 2 plots
> plot(mcd, which = "dd")
> plot(mcd, which = "tolEllipsePlot", classic = TRUE)
> op <- par(mfrow = c(2,3))
> plot(mcd) ## -> which = "all" (5 plots)
> par(op)
> 
> ## same plots for another robust Cov estimate:
> data(hbk)
> hbk.x <- data.matrix(hbk[, 1:3])
> cOGK <- covOGK(hbk.x, n.iter = 2, sigmamu = scaleTau2,
+                weight.fn = hard.rejection)
> covPlot(hbk.x, m.cov = cOGK, classic = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("covPlot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("cushny")
> ### * cushny
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cushny
> ### Title: Cushny and Peebles Prolongation of Sleep Data
> ### Aliases: cushny
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(cushny)
> 
> plot(cushny,  rep(0, 10), pch = 3, cex = 3,
+      ylab = "", yaxt = "n")
> plot(jitter(cushny),  rep(0, 10), pch = 3, cex = 2,
+      main = "'cushny' data (n= 10)", ylab = "", yaxt = "n")
> abline(h=0, col="gray", lty=3)
> myPt <- function(m, lwd = 2, ..., e = 1.5*par("cxy")[2])
+   segments(m, +e, m, -e, lwd = lwd, ...)
> myPt(  mean(cushny), col = "pink3")
> myPt(median(cushny), col = "light blue")
> legend("topright", c("mean", "median"), lwd = 2,
+        col = c("pink3", "light blue"), inset = .01)
> 
> ## The 'sleep' data from the standard 'datasets' package:
> d.sleep <- local({ gr <- with(datasets::sleep, split(extra, group))
+                    gr[[2]] - gr[[1]] })
> stopifnot(all.equal(cushny,
+                     sort(d.sleep), tolerance=1e-15))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cushny", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("delivery")
> ### * delivery
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: delivery
> ### Title: Delivery Time Data
> ### Aliases: delivery
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(delivery)
> summary(lm.deli <- lm(delTime ~ ., data = delivery))

Call:
lm(formula = delTime ~ ., data = delivery)

Residuals:
    Min      1Q  Median      3Q     Max 
-5.7880 -0.6629  0.4364  1.1566  7.4197 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 2.341231   1.096730   2.135 0.044170 *  
n.prod      1.615907   0.170735   9.464 3.25e-09 ***
distance    0.014385   0.003613   3.981 0.000631 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 3.259 on 22 degrees of freedom
Multiple R-squared:  0.9596,	Adjusted R-squared:  0.9559 
F-statistic: 261.2 on 2 and 22 DF,  p-value: 4.687e-16

> 
> delivery.x <- as.matrix(delivery[, 1:2])
> c_deli <- covMcd(delivery.x)
> c_deli
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=14); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = delivery.x)
Log(Det.):  10.81 

Robust Estimate of Location:
  n.prod  distance  
   5.895   268.053  
Robust Estimate of Covariance:
          n.prod  distance
n.prod     11.66     220.7
distance  220.72   53202.7
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("delivery", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("education")
> ### * education
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: education
> ### Title: Education Expenditure Data
> ### Aliases: education
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(education)
> education.x <- data.matrix(education[, 3:5])
> summary(lm.education <- lm(Y ~ Region + X1+X2+X3, data=education))

Call:
lm(formula = Y ~ Region + X1 + X2 + X3, data = education)

Residuals:
    Min      1Q  Median      3Q     Max 
-80.143 -24.595  -4.734  15.016  95.274 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -522.77813  126.45851  -4.134 0.000153 ***
Region         7.02248    6.24147   1.125 0.266499    
X1            -0.01803    0.05269  -0.342 0.733707    
X2             0.07509    0.01182   6.355 9.27e-08 ***
X3             1.37998    0.34905   3.953 0.000270 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 40.36 on 45 degrees of freedom
Multiple R-squared:  0.6025,	Adjusted R-squared:  0.5672 
F-statistic: 17.05 on 4 and 45 DF,  p-value: 1.406e-08

> 
> ## See  example(lmrob.M.S) # for how robust regression is used
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("education", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("epilepsy")
> ### * epilepsy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: epilepsy
> ### Title: Epilepsy Attacks Data Set
> ### Aliases: epilepsy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(epilepsy)
> str(epilepsy)
'data.frame':	59 obs. of  11 variables:
 $ ID   : int  104 106 107 114 116 118 123 126 130 135 ...
 $ Y1   : int  5 3 2 4 7 5 6 40 5 14 ...
 $ Y2   : int  3 5 4 4 18 2 4 20 6 13 ...
 $ Y3   : int  3 3 0 1 9 8 0 23 6 6 ...
 $ Y4   : int  3 3 5 4 21 7 2 12 5 0 ...
 $ Base : int  11 11 6 8 66 27 12 52 23 10 ...
 $ Age  : int  31 30 25 36 22 29 31 42 37 28 ...
 $ Trt  : Factor w/ 2 levels "placebo","progabide": 1 1 1 1 1 1 1 1 1 1 ...
 $ Ysum : int  14 14 11 13 55 22 12 95 22 33 ...
 $ Age10: num  3.1 3 2.5 3.6 2.2 2.9 3.1 4.2 3.7 2.8 ...
 $ Base4: num  2.75 2.75 1.5 2 16.5 6.75 3 13 5.75 2.5 ...
> pairs(epilepsy[,c("Ysum","Base4","Trt","Age10")])
> 
> Efit1 <- glm(Ysum ~ Age10 + Base4*Trt, family=poisson, data=epilepsy)
> summary(Efit1)

Call:
glm(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson, data = epilepsy)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-6.0032  -2.0744  -1.0803   0.8202  11.0386  

Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
(Intercept)         1.968014   0.135929  14.478  < 2e-16 ***
Age10               0.243490   0.041297   5.896 3.72e-09 ***
Base4               0.085426   0.003666  23.305  < 2e-16 ***
Trtprogabide       -0.255257   0.076525  -3.336 0.000851 ***
Base4:Trtprogabide  0.007534   0.004409   1.709 0.087475 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for poisson family taken to be 1)

    Null deviance: 2122.73  on 58  degrees of freedom
Residual deviance:  556.51  on 54  degrees of freedom
AIC: 849.78

Number of Fisher Scoring iterations: 5

> 
> ## Robust Fit :
> Efit2 <- glmrob(Ysum ~ Age10 + Base4*Trt, family=poisson, data=epilepsy,
+                 method = "Mqle",
+                 tcc=1.2, maxit=100)
> summary(Efit2)

Call:  glmrob(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson,      data = epilepsy, method = "Mqle", tcc = 1.2, maxit = 100) 


Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
(Intercept)         2.036768   0.154168  13.211  < 2e-16 ***
Age10               0.158434   0.047444   3.339 0.000840 ***
Base4               0.085132   0.004174  20.395  < 2e-16 ***
Trtprogabide       -0.323886   0.087421  -3.705 0.000211 ***
Base4:Trtprogabide  0.011842   0.004967   2.384 0.017124 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 26 weights are ~= 1. The remaining 33 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.07328 0.30750 0.50730 0.49220 0.68940 0.97240 

Number of observations: 59 
Fitted by method ‘Mqle’  (in 14 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.2000 
maxit 
  100 
test.acc 
  "coef" 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("epilepsy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("exAM")
> ### * exAM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: exAM
> ### Title: Example Data of Antille and May - for Simple Regression
> ### Aliases: exAM
> ### Keywords: robust datasets
> 
> ### ** Examples
> 
> data(exAM)
> plot(exAM)
> summary(ls <- lm(y ~ x, data=exAM))

Call:
lm(formula = y ~ x, data = exAM)

Residuals:
    Min      1Q  Median      3Q     Max 
-4.8723 -2.0081  0.0378  1.8103  6.3112 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)  
(Intercept)   5.7824     2.6171   2.209   0.0516 .
x             0.3633     0.3784   0.960   0.3596  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 3.643 on 10 degrees of freedom
Multiple R-squared:  0.0844,	Adjusted R-squared:  -0.007157 
F-statistic: 0.9218 on 1 and 10 DF,  p-value: 0.3596

> abline(ls)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("exAM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("foodstamp")
> ### * foodstamp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: foodstamp
> ### Title: Food Stamp Program Participation
> ### Aliases: foodstamp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(foodstamp)
> 
> (T123 <- xtabs(~ participation+ tenancy+ suppl.income, data=foodstamp))
, , suppl.income = 0

             tenancy
participation  0  1
            0 22 75
            1  9  3

, , suppl.income = 1

             tenancy
participation  0  1
            0 11 18
            1  9  3

> summary(T123) ## ==> the binary var's are clearly not independent
Call: xtabs(formula = ~participation + tenancy + suppl.income, data = foodstamp)
Number of cases in table: 150 
Number of factors: 3 
Test for independence of all factors:
	Chisq = 36.06, df = 4, p-value = 2.818e-07
	Chi-squared approximation may be incorrect
> 
> foodSt <- within(foodstamp, {
+    logInc <- log(1 + income)
+    rm(income)
+ })
> 
> m1 <- glm(participation ~ ., family=binomial, data=foodSt)
> summary(m1)

Call:
glm(formula = participation ~ ., family = binomial, data = foodSt)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.5874  -0.5248  -0.3197  -0.2620   2.5769  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)    0.9264     1.6229   0.571  0.56813    
tenancy       -1.8502     0.5347  -3.460  0.00054 ***
suppl.income   0.8961     0.5009   1.789  0.07365 .  
logInc        -0.3328     0.2729  -1.219  0.22280    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 131.9  on 149  degrees of freedom
Residual deviance: 106.4  on 146  degrees of freedom
AIC: 114.4

Number of Fisher Scoring iterations: 5

> rm1 <- glmrob(participation ~ ., family=binomial, data=foodSt)
> summary(rm1)

Call:  glmrob(formula = participation ~ ., family = binomial, data = foodSt) 


Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)    0.5894     1.6237   0.363 0.716583    
tenancy       -1.7896     0.5377  -3.328 0.000875 ***
suppl.income   0.8167     0.5166   1.581 0.113851    
logInc        -0.2669     0.2736  -0.975 0.329355    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 135 weights are ~= 1. The remaining 15 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.2865  0.5259  0.7527  0.6774  0.8876  0.9052 

Number of observations: 150 
Fitted by method ‘Mqle’  (in 10 iterations)

(Dispersion parameter for binomial family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.3450 
maxit 
   50 
test.acc 
  "coef" 

> ## Now use robust weights.on.x :
> rm2 <- glmrob(participation ~ ., family=binomial, data=foodSt,
+               weights.on.x = "robCov")
> summary(rm2)## aha, now the weights are different:

Call:  glmrob(formula = participation ~ ., family = binomial, data = foodSt,      weights.on.x = "robCov") 


Coefficients:
             Estimate Std. Error z value Pr(>|z|)   
(Intercept)    7.0851     3.2952   2.150  0.03155 * 
tenancy       -1.7413     0.6155  -2.829  0.00466 **
suppl.income   0.7372     0.5777   1.276  0.20191   
logInc        -1.4031     0.5701  -2.461  0.01385 * 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 72 weights are ~= 1. The remaining 78 ones are summarized as
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.002518 0.333600 0.411600 0.422800 0.501200 0.920000 

Number of observations: 150 
Fitted by method ‘Mqle’  (in 9 iterations)

(Dispersion parameter for binomial family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.3450 
maxit 
   50 
test.acc 
  "coef" 

> which( weights(rm2, type="robust") < 0.5)
 [1]   3   5  16  17  18  22  24  25  26  27  30  31  33  34  40  44  47  51  52
[20]  54  57  58  59  60  61  62  64  66  70  72  73  76  78  84  91  95  96 102
[39] 103 105 106 107 108 109 113 114 115 120 125 128 137 138 140 142 144 146 147
[58] 149
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("foodstamp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("glmrob")
> ### * glmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: glmrob
> ### Title: Robust Fitting of Generalized Linear Models
> ### Aliases: glmrob
> ### Keywords: robust regression nonlinear
> 
> ### ** Examples
> 
> ## Binomial response --------------
> data(carrots)
> 
> Cfit1 <- glm(cbind(success, total-success) ~ logdose + block,
+              data = carrots, family = binomial)
> summary(Cfit1)

Call:
glm(formula = cbind(success, total - success) ~ logdose + block, 
    family = binomial, data = carrots)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.9200  -1.0215  -0.3239   1.0602   3.4324  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   2.0226     0.6501   3.111  0.00186 ** 
logdose      -1.8174     0.3439  -5.285 1.26e-07 ***
blockB2       0.3009     0.1991   1.511  0.13073    
blockB3      -0.5424     0.2318  -2.340  0.01929 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 83.344  on 23  degrees of freedom
Residual deviance: 39.976  on 20  degrees of freedom
AIC: 128.61

Number of Fisher Scoring iterations: 4

> 
> Rfit1 <- glmrob(cbind(success, total-success) ~ logdose + block,
+                 family = binomial, data = carrots, method= "Mqle",
+                 control= glmrobMqle.control(tcc=1.2))
> summary(Rfit1)

Call:  glmrob(formula = cbind(success, total - success) ~ logdose +      block, family = binomial, data = carrots, method = "Mqle",      control = glmrobMqle.control(tcc = 1.2)) 


Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   2.3883     0.6923   3.450 0.000561 ***
logdose      -2.0491     0.3685  -5.561 2.68e-08 ***
blockB2       0.2351     0.2122   1.108 0.267828    
blockB3      -0.4496     0.2409  -1.866 0.061989 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 15 weights are ~= 1. The remaining 9 ones are
     2      5      6      7     13     14     21     22     23 
0.7756 0.7026 0.6751 0.9295 0.8536 0.2626 0.8337 0.9051 0.9009 

Number of observations: 24 
Fitted by method ‘Mqle’  (in 9 iterations)

(Dispersion parameter for binomial family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.2000 
maxit 
   50 
test.acc 
  "coef" 

> 
> Rfit2 <- glmrob(success/total ~ logdose + block, weights = total,
+                 family = binomial, data = carrots, method= "Mqle",
+                 control= glmrobMqle.control(tcc=1.2))
> coef(Rfit2)  ## The same as Rfit1
(Intercept)     logdose     blockB2     blockB3 
  2.3882515  -2.0491078   0.2351038  -0.4496314 
> 
> 
> ## Binary response --------------
> data(vaso)
> 
> Vfit1 <- glm(Y ~ log(Volume) + log(Rate), family=binomial, data=vaso)
> coef(Vfit1)
(Intercept) log(Volume)   log(Rate) 
  -2.875422    5.179324    4.561675 
> 
> Vfit2 <- glmrob(Y ~ log(Volume) + log(Rate), family=binomial, data=vaso,
+                 method="Mqle", control = glmrobMqle.control(tcc=3.5))
> coef(Vfit2) # c = 3.5 ==> not much different from classical
(Intercept) log(Volume)   log(Rate) 
  -2.753375    4.973897    4.388113 
> ## Note the problems with  tcc <= 3 %% FIXME algorithm ???
> 
> Vfit3 <- glmrob(Y ~ log(Volume) + log(Rate), family=binomial, data=vaso,
+                 method= "BY")
Convergence Achieved
> coef(Vfit3)## note that results differ much.
(Intercept) log(Volume)   log(Rate) 
  -6.851509   10.734325    9.364316 
> ## That's not unreasonable however, see Kuensch et al.(1989), p.465
> 
> ## Poisson response --------------
> data(epilepsy)
> 
> Efit1 <- glm(Ysum ~ Age10 + Base4*Trt, family=poisson, data=epilepsy)
> summary(Efit1)

Call:
glm(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson, data = epilepsy)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-6.0032  -2.0744  -1.0803   0.8202  11.0386  

Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
(Intercept)         1.968014   0.135929  14.478  < 2e-16 ***
Age10               0.243490   0.041297   5.896 3.72e-09 ***
Base4               0.085426   0.003666  23.305  < 2e-16 ***
Trtprogabide       -0.255257   0.076525  -3.336 0.000851 ***
Base4:Trtprogabide  0.007534   0.004409   1.709 0.087475 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for poisson family taken to be 1)

    Null deviance: 2122.73  on 58  degrees of freedom
Residual deviance:  556.51  on 54  degrees of freedom
AIC: 849.78

Number of Fisher Scoring iterations: 5

> 
> Efit2 <- glmrob(Ysum ~ Age10 + Base4*Trt, family = poisson,
+                 data = epilepsy, method= "Mqle",
+                 control = glmrobMqle.control(tcc= 1.2))
> summary(Efit2)

Call:  glmrob(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson,      data = epilepsy, method = "Mqle", control = glmrobMqle.control(tcc = 1.2)) 


Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
(Intercept)         2.036768   0.154168  13.211  < 2e-16 ***
Age10               0.158434   0.047444   3.339 0.000840 ***
Base4               0.085132   0.004174  20.395  < 2e-16 ***
Trtprogabide       -0.323886   0.087421  -3.705 0.000211 ***
Base4:Trtprogabide  0.011842   0.004967   2.384 0.017124 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 26 weights are ~= 1. The remaining 33 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.07328 0.30750 0.50730 0.49220 0.68940 0.97240 

Number of observations: 59 
Fitted by method ‘Mqle’  (in 14 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.2000 
maxit 
   50 
test.acc 
  "coef" 

> 
> ## 'x' weighting:
> (Efit3 <- glmrob(Ysum ~ Age10 + Base4*Trt, family = poisson,
+  	         data = epilepsy, method= "Mqle", weights.on.x = "hat",
+ 		 control = glmrobMqle.control(tcc= 1.2)))

Call:  glmrob(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson,      data = epilepsy, method = "Mqle", weights.on.x = "hat", control = glmrobMqle.control(tcc = 1.2)) 

Coefficients:
       (Intercept)               Age10               Base4        Trtprogabide  
         1.8712949           0.1898471           0.1014575          -0.2713479  
Base4:Trtprogabide  
         0.0007315  

Number of observations: 59 
Fitted by method  ‘Mqle’ 
> 
> try( # gives singular cov matrix: 'Trt' is binary factor -->
+      # affine equivariance and subsampling are problematic
+ Efit4 <- glmrob(Ysum ~ Age10 + Base4*Trt, family = poisson,
+                 data = epilepsy, method= "Mqle", weights.on.x = "covMcd",
+                 control = glmrobMqle.control(tcc=1.2, maxit=100))
+ )
Warning in covFun(X) :
  The covariance matrix has become singular during
the iterations of the MCD algorithm.
There are 32 observations (in the entire dataset of 59 obs.) lying on
the hyperplane with equation a_1*(x_i1 - m_1) + ... + a_p*(x_ip - m_p)
= 0 with (m_1, ..., m_p) the mean of these observations and
coefficients a_i from the vector a <- c(0, -0.2232582, -0.9488475,
0.2232582)
Error in solve.default(cov, ...) : 
  system is computationally singular: reciprocal condition number = 1.64839e-18
> 
> ##--> See  example(possumDiv)  for another  Poisson-regression
> 
> 
> ### -------- Gamma family -- data from example(glm) ---
> 
> clotting <- data.frame(
+             u = c(5,10,15,20,30,40,60,80,100),
+          lot1 = c(118,58,42,35,27,25,21,19,18),
+          lot2 = c(69,35,26,21,18,16,13,12,12))
> summary(cl <- glm   (lot1 ~ log(u), data=clotting, family=Gamma))

Call:
glm(formula = lot1 ~ log(u), family = Gamma, data = clotting)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-0.04008  -0.03756  -0.02637   0.02905   0.08641  

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.0165544  0.0009275  -17.85 4.28e-07 ***
log(u)       0.0153431  0.0004150   36.98 2.75e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for Gamma family taken to be 0.002446059)

    Null deviance: 3.51283  on 8  degrees of freedom
Residual deviance: 0.01673  on 7  degrees of freedom
AIC: 37.99

Number of Fisher Scoring iterations: 3

> summary(ro <- glmrob(lot1 ~ log(u), data=clotting, family=Gamma))

Call:  glmrob(formula = lot1 ~ log(u), family = Gamma, data = clotting) 


Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.0165260  0.0008369  -19.75   <2e-16 ***
log(u)       0.0153664  0.0003738   41.11   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
[1] 1.0000 0.6208 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000

Number of observations: 9 
Fitted by method ‘Mqle’  (in 3 iterations)

(Dispersion parameter for Gamma family taken to be 0.001869399)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.3450 
maxit 
   50 
test.acc 
  "coef" 

> 
> clotM5.high <- within(clotting, { lot1[5] <- 60 })
> op <- par(mfrow=2:1, mgp = c(1.6, 0.8, 0), mar = c(3,3:1))
> plot( lot1  ~ log(u), data=clotM5.high)
> plot(1/lot1 ~ log(u), data=clotM5.high)
> par(op)
> ## Obviously, there the first observation is an outlier with respect to both
> ## representations!
> 
> cl5.high <- glm   (lot1 ~ log(u), data=clotM5.high, family=Gamma)
> ro5.high <- glmrob(lot1 ~ log(u), data=clotM5.high, family=Gamma)
> with(ro5.high, cbind(w.x, w.r))## the 5th obs. is downweighted heavily!
      w.x        w.r
 [1,]   1 1.00000000
 [2,]   1 1.00000000
 [3,]   1 1.00000000
 [4,]   1 1.00000000
 [5,]   1 0.07239104
 [6,]   1 1.00000000
 [7,]   1 1.00000000
 [8,]   1 1.00000000
 [9,]   1 1.00000000
> 
> plot(1/lot1 ~ log(u), data=clotM5.high)
> abline(cl5.high, lty=2, col="red")
> abline(ro5.high, lwd=2, col="blue") ## result is ok (but not "perfect")
> 
> 
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("glmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("glmrob.control")
> ### * glmrob.control
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: glmrob..control
> ### Title: Controlling Robust GLM Fitting by Different Methods
> ### Aliases: glmrobMqle.control glmrobMT.control glmrobBY.control
> ### Keywords: robust regression nonlinear
> 
> ### ** Examples
> 
> str(glmrobMqle.control())
List of 4
 $ acc     : num 1e-04
 $ test.acc: chr "coef"
 $ maxit   : num 50
 $ tcc     : num 1.34
> str(glmrobBY.control())
List of 3
 $ const  : num 0.5
 $ maxhalf: num 10
 $ maxit  : num 1000
> str(glmrobMT.control())
List of 4
 $ cw   : num 2.1
 $ nsubm: num 500
 $ acc  : num 1e-06
 $ maxit: num 200
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("glmrob.control", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("h.alpha.n")
> ### * h.alpha.n
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: h.alpha.n
> ### Title: Compute h, the subsample size for MCD and LTS
> ### Aliases: h.alpha.n
> ### Keywords: arith
> 
> ### ** Examples
> 
> n <- c(10:20,50,100)
> p <- 5
> ## show the simple "alpha = 1/2" case:
> cbind(n=n, h= h.alpha.n(1/2, n, p), n2p = floor((n+p+1)/2))
        n  h n2p
 [1,]  10  8   8
 [2,]  11  8   8
 [3,]  12  9   9
 [4,]  13  9   9
 [5,]  14 10  10
 [6,]  15 10  10
 [7,]  16 11  11
 [8,]  17 11  11
 [9,]  18 12  12
[10,]  19 12  12
[11,]  20 13  13
[12,]  50 28  28
[13,] 100 53  53
> 
> ## alpha = 3/4 is recommended by some authors :
> n <- c(15, 20, 25, 30, 50, 100)
> cbind(n=n, h= h.alpha.n(3/4, n, p = 6))
       n  h
[1,]  15 13
[2,]  20 16
[3,]  25 20
[4,]  30 24
[5,]  50 39
[6,] 100 76
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("h.alpha.n", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hbk")
> ### * hbk
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hbk
> ### Title: Hawkins, Bradu, Kass's Artificial Data
> ### Aliases: hbk
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(hbk)
> plot(hbk)
> summary(lm.hbk <- lm(Y ~ ., data = hbk))

Call:
lm(formula = Y ~ ., data = hbk)

Residuals:
    Min      1Q  Median      3Q     Max 
-9.3717 -0.7162 -0.0230  0.7083  4.5130 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)   
(Intercept)  -0.3875     0.4165  -0.930  0.35527   
X1            0.2392     0.2625   0.911  0.36521   
X2           -0.3345     0.1551  -2.158  0.03434 * 
X3            0.3833     0.1288   2.976  0.00399 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.25 on 71 degrees of freedom
Multiple R-squared:  0.6018,	Adjusted R-squared:  0.585 
F-statistic: 35.77 on 3 and 71 DF,  p-value: 3.382e-14

> 
> hbk.x <- data.matrix(hbk[, 1:3])
> (cHBK <- covMcd(hbk.x))
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=39); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = hbk.x)
Log(Det.):  -1.043 

Robust Estimate of Location:
   X1     X2     X3  
1.538  1.780  1.687  
Robust Estimate of Covariance:
        X1      X2      X3
X1  1.6528  0.0741  0.1713
X2  0.0741  1.6823  0.2055
X3  0.1713  0.2055  1.5624
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hbk", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("heart")
> ### * heart
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: heart
> ### Title: Heart Catherization Data
> ### Aliases: heart
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(heart, package="robustbase")
> heart.x <- data.matrix(heart[, 1:2]) # the X-variables
> plot(heart.x)
> covMcd(heart.x)
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=7); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = heart.x)
Log(Det.):  5.679 

Robust Estimate of Location:
height  weight  
 38.25   33.09  
Robust Estimate of Covariance:
        height  weight
height   157.3   302.6
weight   302.6   660.1
> summary( lm.heart <-     lm(clength ~ . , data = heart))

Call:
lm(formula = clength ~ ., data = heart)

Residuals:
    Min      1Q  Median      3Q     Max 
-6.7419 -1.2034 -0.2595  1.8892  6.6566 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)  
(Intercept)  20.3758     8.3859   2.430    0.038 *
height        0.2107     0.3455   0.610    0.557  
weight        0.1911     0.1583   1.207    0.258  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 3.778 on 9 degrees of freedom
Multiple R-squared:  0.8254,	Adjusted R-squared:  0.7865 
F-statistic: 21.27 on 2 and 9 DF,  p-value: 0.0003888

> summary(lts.heart <- ltsReg(clength ~ . , data = heart))

Call:
ltsReg.formula(formula = clength ~ ., data = heart)

Residuals (from reweighted LS):
      1       2       3       4       5       6       7       8       9      10 
-1.3927  0.1691  0.0000  0.4434 -0.3413  0.1655 -0.1148  0.0000  0.0000  0.0000 
     11      12 
 0.6663  0.4045 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
Intercept 63.35284    4.02270  15.749 1.88e-05 ***
height    -1.22650    0.14032  -8.741 0.000325 ***
weight     0.68835    0.05278  13.041 4.73e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.7654 on 5 degrees of freedom
Multiple R-Squared: 0.9913,	Adjusted R-squared: 0.9879 
F-statistic:   286 on 2 and 5 DF,  p-value: 6.992e-06 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("heart", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("huberM")
> ### * huberM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: huberM
> ### Title: Safe (generalized) Huber M-Estimator of Location
> ### Aliases: huberM
> ### Keywords: univar robust
> 
> ### ** Examples
> 
> huberM(c(1:9, 1000))
$mu
[1] 5.617749

$s
[1] 3.7065

$it
[1] 6

$SE
[1] NA

> mad   (c(1:9, 1000))
[1] 3.7065
> mad   (rep(9, 100))
[1] 0
> huberM(rep(9, 100))
$mu
[1] 9

$s
[1] 0

$it
[1] 0

$SE
[1] NA

> 
> ## When you have "binned" aka replicated observations:
> set.seed(7)
> x <- c(round(rnorm(1000),1), round(rnorm(50, m=10, sd = 10)))
> t.x <- table(x) # -> unique values and multiplicities
> x.uniq <- as.numeric(names(t.x)) ## == sort(unique(x))
> x.mult <- unname(t.x)
> str(Hx  <- huberM(x.uniq, weights = x.mult), digits = 7)
List of 4
 $ mu: num 0.05013769
 $ s : num 0.7
 $ it: int 11
 $ SE: num NA
> str(Hx. <- huberM(x, s = Hx$s, se=TRUE), digits = 7) ## should be ~= Hx
List of 4
 $ mu: num 0.05013769
 $ s : num 0.7
 $ it: int 11
 $ SE: num 0.03382601
> stopifnot(all.equal(Hx[-4], Hx.[-4]))
> str(Hx2 <- huberM(x, se=TRUE), digits = 7)## somewhat different, since 's' differs
List of 4
 $ mu: num 0.05891084
 $ s : num 1.03782
 $ it: int 7
 $ SE: num 0.03379949
> 
> ## Confirm correctness of std.error :
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("huberM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kootenay")
> ### * kootenay
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kootenay
> ### Title: Waterflow Measurements of Kootenay River in Libby and Newgate
> ### Aliases: kootenay
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(kootenay)
> plot(kootenay, main = "'kootenay' data")
> points(kootenay[4,], col = 2, cex =2, pch = 3)
> 
> abline(lm   (Newgate ~ Libby, data = kootenay), col = "pink")
> abline(lmrob(Newgate ~ Libby, data = kootenay), col = "blue")
> 
> ## The original version of Ezekiel & Fox:
> kootenay0 <- kootenay
> kootenay0[4, "Newgate"] <- 44.9
> plot(kootenay0, main = "'kootenay0': the original data")
> abline(lm   (Newgate ~ Libby, data = kootenay0), col = "pink")
> abline(lmrob(Newgate ~ Libby, data = kootenay0), col = "blue")
> 
> ## The version with "milder" outlier -- Hampel et al., p.310
> kootenay2 <- kootenay0
> kootenay2[4, "Libby"] <- 20.0 # instead of 77.6
> plot(kootenay2, main = "The 'kootenay2' data",
+      xlim = range(kootenay[,"Libby"]))
> points(kootenay2[4,], col = 2, cex =2, pch = 3)
> abline(lm   (Newgate ~ Libby, data = kootenay2), col = "pink")
> abline(lmrob(Newgate ~ Libby, data = kootenay2), col = "blue")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kootenay", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lactic")
> ### * lactic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lactic
> ### Title: Lactic Acid Concentration Measurement Data
> ### Aliases: lactic
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(lactic)
> summary(lm.lactic <- lm(Y ~., data=lactic))

Call:
lm(formula = Y ~ ., data = lactic)

Residuals:
    Min      1Q  Median      3Q     Max 
-2.4426 -0.7260  0.1444  0.6886  1.9021 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  0.15948    0.39681   0.402    0.692    
X            1.22769    0.04703  26.107 9.28e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.079 on 18 degrees of freedom
Multiple R-squared:  0.9743,	Adjusted R-squared:  0.9728 
F-statistic: 681.5 on 1 and 18 DF,  p-value: 9.278e-16

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lactic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmrob..D..fit")
> ### * lmrob..D..fit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmrob..D..fit
> ### Title: Compute Design Adaptive Scale estimate
> ### Aliases: lmrob..D..fit
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(stackloss)
> ## Compute manual SMD-estimate:
> ## 1) MM-estimate
> m1 <- lmrob(stack.loss ~ ., data = stackloss)
> ## 2) Add Design Adaptive Scale estimate
> m2 <- lmrob..D..fit(m1)
> print(c(m1$scale, m2$scale))
[1] 1.912355 2.650919
> 
> summary(m1)

Call:
lmrob(formula = stack.loss ~ ., data = stackloss)
 \--> method = "MM"
Residuals:
      Min        1Q    Median        3Q       Max 
-10.50974  -1.43819  -0.09134   1.02503   7.23113 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) -41.52462    5.29780  -7.838 4.82e-07 ***
Air.Flow      0.93885    0.11743   7.995 3.68e-07 ***
Water.Temp    0.57955    0.26296   2.204   0.0416 *  
Acid.Conc.   -0.11292    0.06989  -1.616   0.1246    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 1.912 
Multiple R-squared:  0.9593,	Adjusted R-squared:  0.9521 
Convergence in 17 IRWLS iterations

Robustness weights: 
 observation 21 is an outlier with |weight| = 0 ( < 0.0048); 
 2 weights are ~= 1. The remaining 18 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1215  0.8757  0.9428  0.8721  0.9797  0.9978 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         4.762e-03         1.692e-10 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> summary(m2) ## the covariance matrix estimate is also updated

Call:
lmrob(formula = stack.loss ~ ., data = stackloss, method = "SMD")
 \--> method = "SMD"
Residuals:
      Min        1Q    Median        3Q       Max 
-10.50974  -1.43819  -0.09134   1.02503   7.23113 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -41.5246     8.9525  -4.638 0.000235 ***
Air.Flow      0.9388     0.1175   7.990 3.71e-07 ***
Water.Temp    0.5796     0.3199   1.812 0.087756 .  
Acid.Conc.   -0.1129     0.1176  -0.960 0.350512    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 2.651 
Multiple R-squared:  0.9593,	Adjusted R-squared:  0.9521 
Convergence in 17 IRWLS iterations

Robustness weights: 
 observation 21 is an outlier with |weight| = 0 ( < 0.0048); 
 2 weights are ~= 1. The remaining 18 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1215  0.8757  0.9428  0.8721  0.9797  0.9978 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         4.762e-03         1.692e-10 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd      numpoints 
           200              0           1000              0             10 
fast.s.large.n 
          2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmrob..D..fit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmrob..M..fit")
> ### * lmrob..M..fit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmrob..M..fit
> ### Title: Compute M-estimators of regression
> ### Aliases: lmrob..M..fit
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(stackloss)
> X <- model.matrix(stack.loss ~ . , data = stackloss)
> y <- stack.loss
> ## Compute manual MM-estimate:
> ## 1) initial LTS:
> m0 <- ltsReg(X[,-1], y)
> ## 2) M-estimate started from LTS:
> m1 <- lmrob..M..fit(X, y, beta.initial = coef(m0), scale = m0$scale,
+                     control = lmrob.control(tuning.psi = 1.6,
+ 		                            psi = 'bisquare'))
> cbind(m0$coef, m1$coef)
                   [,1]         [,2]
Intercept  -37.65245890 -36.79032457
Air.Flow     0.79768556   0.84937712
Water.Temp   0.57734046   0.43210319
Acid.Conc.  -0.06706018  -0.07538038
> ## the scale is kept fixed:
> stopifnot(identical(unname(m0$scale), m1$scale))
> 
> ##  robustness weights: are
> r.s <- with(m1, residuals/scale) # scaled residuals
> m1.wts <- Mpsi(r.s, cc = 1.6, psi="tukey") / r.s
> summarizeRobWeights(m1.wts)
Robustness weights: 
 5 observations c(1,3,4,13,21)
	 are outliers with |weight| <= 9.685e-06 ( < 0.004762); 
 2 weights are ~= 1. The remaining 14 ones are summarized as
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.4499621 0.7351054 0.8729619 0.8269551 0.9560550 0.9927093 
> ##--> outliers 1,3,4,13,21
> which(m0$lts.wt == 0) # 1,3,4,21 but not 13
[1]  1  3  4 21
> ## Don't show: 
> stopifnot(which(m0$lts.wt == 0) == c(1,3,4,21))
> ## End(Don't show)
> ## Add M-step to SMD-estimate
> m2 <- lmrob(stack.loss ~ ., data = stackloss, method = 'SMD')
> m3 <- lmrob..M..fit(obj = m2)
> 
> ## Simple function that allows custom initial estimates
> ## (Deprecated; use init argument to lmrob() instead.) %% MM: why deprecated?
> lmrob.custom <- function(x, y, beta.initial, scale, terms) {
+   ## initialize object
+   obj <- list(control = lmrob.control("KS2011"),
+               terms = terms) ## terms is needed for summary()
+   ## M-step
+   obj <- lmrob..M..fit(x, y, beta.initial, scale, obj = obj)
+   ## D-step
+   obj <- lmrob..D..fit(obj, x)
+   ## Add some missing elements
+   obj$cov <- TRUE ## enables calculation of cov matrix
+   obj$p <- obj$qr$rank
+   obj$degree.freedom <- length(y) - obj$p
+   ## M-step
+   obj <- lmrob..M..fit(x, y, obj=obj)
+   obj$control$method <- ".MDM"
+   obj
+ }
> 
> m4 <- lmrob.custom(X, y, m2$init$init.S$coef,
+                    m2$init$scale,m2$terms)
> stopifnot(all.equal(m4$coef, m3$coef))
> 
> ## Start from ltsReg:
> m5 <- ltsReg(stack.loss ~ ., data = stackloss)
> m6 <- lmrob.custom(m5$X, m5$Y, coef(m5), m5$scale, m5$terms)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmrob..M..fit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmrob.M.S")
> ### * lmrob.M.S
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmrob.M.S
> ### Title: M-S regression estimators
> ### Aliases: lmrob.M.S
> ### Keywords: M-S robust regression
> 
> ### ** Examples
> 
> data(education)
> education <- within(education, Region <- factor(Region))
> flm <- lm(Y ~ Region + X1 + X2 + X3, education)
> x <- model.matrix(flm)
> y <- education$Y # == model.response(model.frame(flm))
> set.seed(17)
> f.MS <- lmrob.M.S(x, y, control = lmrob.control(),
+                   mf = model.frame(flm))
> 
> ## The typical use of the "M-S" estimator -- as initial estimate :
> fmMS <- lmrob(Y ~ Region + X1 + X2 + X3, education,
+               init = "M-S")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmrob.M.S", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmrob")
> ### * lmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmrob
> ### Title: MM-type Estimators for Linear Regression
> ### Aliases: lmrob .vcov.avar1 .vcov.w
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(coleman)
> set.seed(0)
> ## Default for a very long time:
> summary( m1 <- lmrob(Y ~ ., data=coleman) )

Call:
lmrob(formula = Y ~ ., data = coleman)
 \--> method = "MM"
Residuals:
     Min       1Q   Median       3Q      Max 
-4.16181 -0.39226  0.01611  0.55619  7.22766 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 30.50232    6.71260   4.544 0.000459 ***
salaryP     -1.66615    0.43129  -3.863 0.001722 ** 
fatherWc     0.08425    0.01467   5.741 5.10e-05 ***
sstatus      0.66774    0.03385  19.726 1.30e-11 ***
teacherSc    1.16778    0.10983  10.632 4.35e-08 ***
motherLev   -4.13657    0.92084  -4.492 0.000507 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 1.134 
Multiple R-squared:  0.9814,	Adjusted R-squared:  0.9747 
Convergence in 11 IRWLS iterations

Robustness weights: 
 observation 18 is an outlier with |weight| = 0 ( < 0.005); 
 The remaining 19 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1491  0.9412  0.9847  0.9279  0.9947  0.9982 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         5.000e-03         1.569e-10 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> ## Nowadays strongly recommended for routine use:
> summary( m2 <- lmrob(Y ~ ., data=coleman, setting = "KS2011") )

Call:
lmrob(formula = Y ~ ., data = coleman, setting = "KS2011")
 \--> method = "SMDM"
Residuals:
     Min       1Q   Median       3Q      Max 
-4.18529 -0.42074  0.02314  0.55263  7.22731 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 30.43635    6.07018   5.014 0.000190 ***
salaryP     -1.67840    0.51387  -3.266 0.005628 ** 
fatherWc     0.08504    0.02286   3.719 0.002287 ** 
sstatus      0.66706    0.04203  15.869 2.41e-10 ***
teacherSc    1.17113    0.18062   6.484 1.44e-05 ***
motherLev   -4.13766    0.93212  -4.439 0.000561 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 0.9746 
Multiple R-squared:  0.982,	Adjusted R-squared:  0.9755 
Convergence in 7 IRWLS iterations

Robustness weights: 
 observation 18 is an outlier with |weight| <= 0.0012 ( < 0.005); 
 16 weights are ~= 1. The remaining 3 ones are
     3     16     17 
0.1368 0.9955 0.9755 
Algorithmic parameters: 
      tuning.chi1       tuning.chi2       tuning.chi3       tuning.chi4 
       -5.000e-01         1.500e+00                NA         5.000e-01 
               bb       tuning.psi1       tuning.psi2       tuning.psi3 
        5.000e-01        -5.000e-01         1.500e+00         9.500e-01 
      tuning.psi4        refine.tol           rel.tol         solve.tol 
               NA         1.000e-07         1.000e-07         1.000e-07 
      eps.outlier             eps.x warn.limit.reject warn.limit.meanrw 
        5.000e-03         1.569e-10         5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500            500              2              1           2000 
   maxit.scale      trace.lev            mts     compute.rd      numpoints 
           200              0           1000              0             10 
fast.s.large.n 
          2000 
              setting                   psi           subsampling 
             "KS2011"                 "lqq"         "nonsingular" 
                  cov compute.outlier.stats 
            ".vcov.w"                "SMDM" 
seed : int(0) 
> plot(residuals(m2) ~ weights(m2, type="robustness")) ##-> weights.lmrob()
> abline(h=0, lty=3)
> 
> data(starsCYG, package = "robustbase")
> ## Plot simple data and fitted lines
> plot(starsCYG)
>   lmST <-    lm(log.light ~ log.Te, data = starsCYG)
> (RlmST <- lmrob(log.light ~ log.Te, data = starsCYG))

Call:
lmrob(formula = log.light ~ log.Te, data = starsCYG)
 \--> method = "MM"
Coefficients:
(Intercept)       log.Te  
     -4.969        2.253  

> abline(lmST, col = "red")
> abline(RlmST, col = "blue")
> summary(RlmST)

Call:
lmrob(formula = log.light ~ log.Te, data = starsCYG)
 \--> method = "MM"
Residuals:
     Min       1Q   Median       3Q      Max 
-0.80959 -0.28838  0.00282  0.36668  3.39585 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)   
(Intercept)  -4.9694     3.4100  -1.457  0.15198   
log.Te        2.2532     0.7691   2.930  0.00531 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 0.4715 
Multiple R-squared:  0.3737,	Adjusted R-squared:  0.3598 
Convergence in 15 IRWLS iterations

Robustness weights: 
 4 observations c(11,20,30,34) are outliers with |weight| = 0 ( < 0.0021); 
 4 weights are ~= 1. The remaining 39 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.6533  0.9171  0.9593  0.9318  0.9848  0.9986 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         2.128e-03         8.404e-12 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> vcov(RlmST)
            (Intercept)     log.Te
(Intercept)   11.628338 -2.6221417
log.Te        -2.622142  0.5914543
attr(,"weights")
        1         2         3         4         5         6         7         8 
0.9495503 0.9239441 0.9632237 0.9239441 0.9112033 0.9415944 0.6532507 0.9986423 
        9        10        11        12        13        14        15        16 
0.6700018 0.9759260 0.0000000 0.9229432 0.9645902 0.9998978 0.9233596 0.9324119 
       17        18        19        20        21        22        23        24 
0.8479334 0.7493654 0.9412319 0.0000000 0.9593133 0.9090245 0.8714281 0.9640937 
       25        26        27        28        29        30        31        32 
0.9940525 0.9559661 0.9994487 0.9999999 0.9909255 0.0000000 0.9079843 0.9828421 
       33        34        35        36        37        38        39        40 
0.9891620 0.0000000 0.9799916 0.9867941 0.9922722 0.9891620 0.9986483 0.8764843 
       41        42        43        44        45        46        47 
0.9682416 0.9999967 0.9881656 0.9674794 0.9730027 0.9975596 0.9041552 
attr(,"eigen")
attr(,"eigen")$values
[1] 1.221963e+01 1.639891e-04

attr(,"eigen")$vectors
           [,1]       [,2]
[1,] -0.9755054 -0.2199755
[2,]  0.2199755 -0.9755054

> stopifnot(all.equal(fitted(RlmST),
+                     predict(RlmST, newdata = starsCYG),
+                     tolerance = 1e-14))
> 
> ## --- init argument
> ## string
> set.seed(0)
> m3 <- lmrob(Y ~ ., data=coleman, init = "S")
> stopifnot(all.equal(m1[-18], m3[-18]))
> ## function
> initFun <- function(x, y, control, mf) {
+     init.S <- lmrob.S(x, y, control)
+     list(coefficients=init.S$coef, scale = init.S$scale)
+ }
> set.seed(0)
> m4 <- lmrob(Y ~ ., data=coleman, method = "M", init = initFun)
> ## list
> m5 <- lmrob(Y ~ ., data=coleman, method = "M",
+             init = list(coefficients = m3$init$coef, scale = m3$scale))
> stopifnot(all.equal(m4[-17], m5[-17]))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmrob.S")
> ### * lmrob.S
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmrob.S
> ### Title: S-regression estimators
> ### Aliases: lmrob.S
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> set.seed(33)
> x1 <- sort(rnorm(30)); x2 <- sort(rnorm(30)); x3 <- sort(rnorm(30))
> X. <- cbind(x1, x2, x3)
> y <-  10 + X. %*% (10*(2:4)) + rnorm(30)/10
> y[1] <- 500   # a moderate outlier
> X.[2,1] <- 20 # an X outlier
> X1  <- cbind(1, X.)
> 
> (m.lm <- lm(y ~ X.))

Call:
lm(formula = y ~ X.)

Coefficients:
(Intercept)         X.x1         X.x2         X.x3  
    -23.756       -7.774     -276.785      253.358  

> set.seed(12)
> m.lmS <- lmrob.S(x=X1, y=y,
+                  control = lmrob.control(nRes = 20), trace.lev=1)
lmrob_S(n = 30, nRes = 20): fast_s() [non-large n]:
 Subsampling to find candidate betas:
 Now refine() to convergence for 2 very best ones:
  Best[0]: convergence (22 iter.): -> improved scale to 0.106807908892488
  Best[1]: convergence (30 iter.): -> improved scale to 0.10680546931887
> m.lmS[c("coefficients","scale")]
$coefficients
                 x1        x2        x3 
 9.980894 20.046884 30.056596 39.968754 

$scale
[1] 0.1068055

> all.equal(unname(m.lmS$coef), 10 * (1:4), tolerance = 0.005)
[1] TRUE
> stopifnot(all.equal(unname(m.lmS$coef), 10 * (1:4), tolerance = 0.005),
+           all.equal(m.lmS$scale, 1/10, tolerance = 0.09))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmrob.S", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmrob.control")
> ### * lmrob.control
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmrob.control
> ### Title: Tuning Parameters for lmrob() and Auxiliaries
> ### Aliases: lmrob.control lmrob.control .Mchi.tuning.default
> ###   .Mpsi.tuning.default .Mchi.tuning.defaults .Mpsi.tuning.defaults
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> ## Show the default settings:
> str(lmrob.control())
List of 32
 $ setting              : NULL
 $ seed                 : int(0) 
 $ nResample            : num 500
 $ psi                  : chr "bisquare"
 $ tuning.chi           : num 1.55
 $ bb                   : num 0.5
 $ tuning.psi           : num 4.69
 $ max.it               : num 50
 $ groups               : num 5
 $ n.group              : num 400
 $ best.r.s             : num 2
 $ k.fast.s             : num 1
 $ k.max                : num 200
 $ maxit.scale          : num 200
 $ k.m_s                : num 20
 $ refine.tol           : num 1e-07
 $ rel.tol              : num 1e-07
 $ solve.tol            : num 1e-07
 $ trace.lev            : num 0
 $ mts                  : num 1000
 $ subsampling          : chr "nonsingular"
 $ compute.rd           : logi FALSE
 $ method               : chr "MM"
 $ numpoints            : num 10
 $ cov                  : chr ".vcov.avar1"
 $ split.type           : chr "f"
 $ fast.s.large.n       : num 2000
 $ eps.outlier          :function (nobs)  
 $ eps.x                :function (maxx)  
 $ compute.outlier.stats: chr "SM"
 $ warn.limit.reject    : num 0.5
 $ warn.limit.meanrw    : num 0.5
> 
> ## Artificial data for a  simple  "robust t test":
> set.seed(17)
> y <- y0 <- rnorm(200)
> y[sample(200,20)] <- 100*rnorm(20)
> gr <- as.factor(rbinom(200, 1, prob = 1/8))
> lmrob(y0 ~ 0+gr)

Call:
lmrob(formula = y0 ~ 0 + gr)
 \--> method = "MM"
Coefficients:
    gr0      gr1  
-0.0375  -0.1310  

> 
> ## Use  Koller & Stahel(2011)'s recommendation but a larger  'max.it':
> str(ctrl <- lmrob.control("KS2011", max.it = 1000))
List of 32
 $ setting              : chr "KS2011"
 $ seed                 : int(0) 
 $ nResample            : num 500
 $ psi                  : chr "lqq"
 $ tuning.chi           : num [1:4] -0.5 1.5 NA 0.5
 $ bb                   : num 0.5
 $ tuning.psi           : num [1:4] -0.5 1.5 0.95 NA
 $ max.it               : num 1000
 $ groups               : num 5
 $ n.group              : num 400
 $ best.r.s             : num 2
 $ k.fast.s             : num 1
 $ k.max                : num 2000
 $ maxit.scale          : num 200
 $ k.m_s                : num 20
 $ refine.tol           : num 1e-07
 $ rel.tol              : num 1e-07
 $ solve.tol            : num 1e-07
 $ trace.lev            : num 0
 $ mts                  : num 1000
 $ subsampling          : chr "nonsingular"
 $ compute.rd           : logi FALSE
 $ method               : chr "SMDM"
 $ numpoints            : num 10
 $ cov                  : chr ".vcov.w"
 $ split.type           : chr "f"
 $ fast.s.large.n       : num 2000
 $ eps.outlier          :function (nobs)  
 $ eps.x                :function (maxx)  
 $ compute.outlier.stats: chr "SMDM"
 $ warn.limit.reject    : num 0.5
 $ warn.limit.meanrw    : num 0.5
> 
> str(.Mpsi.tuning.defaults)
List of 7
 $ huber   : num 1.34
 $ bisquare: num 4.69
 $ welsh   : num 2.11
 $ ggw     : num [1:4] -0.5 1.5 0.95 NA
 $ lqq     : num [1:4] -0.5 1.5 0.95 NA
 $ optimal : num 1.06
 $ hampel  : num [1:3] 1.35 3.16 7.21
> stopifnot(identical(.Mpsi.tuning.defaults,
+                    sapply(names(.Mpsi.tuning.defaults),
+                           .Mpsi.tuning.default)))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmrob.control", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmrob.lar")
> ### * lmrob.lar
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmrob.lar
> ### Title: Least Absolute Residuals / L1 Regression
> ### Aliases: lmrob.lar
> ### Keywords: L1 regression
> 
> ### ** Examples
> 
> data(stackloss)
> X <- model.matrix(stack.loss ~ . , data = stackloss)
> y <- stack.loss
> lmrob.lar(X, y)
$coefficients
[1] -39.68985507   0.83188406   0.57391304  -0.06086957

$scale
[1] 1.529158

$residuals
 [1]  5.06086957  0.00000000  5.42898551  7.63478261 -1.21739130 -1.79130435
 [7] -1.00000000  0.00000000 -1.46376812 -0.02028986  0.52753623  0.04057971
[13] -2.89855072 -1.80289855  1.18260870  0.00000000 -0.42608696  0.00000000
[19]  0.48695652  1.61739130 -9.48115942

$iter
[1] 7

$status
[1] 1

$converged
[1] TRUE

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmrob.lar", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("los")
> ### * los
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: los
> ### Title: Length of Stay Data
> ### Aliases: los
> ### Keywords: datasets
> 
> ### ** Examples
> 
>  summary(los) # quite skewed, with median(.) = 8
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2.00    4.00    8.00   11.25   13.00  102.00 
>  plot(table(los))
>  boxplot(los, horizontal=TRUE, add=TRUE, col = "red", axes=FALSE)
>  ##-> "outliers" instead of "just skewed"
> 
>  hist(log(los))
>  boxplot(log(los), add=TRUE, col=2, border=2, horizontal = TRUE, at = -1)
> 
>  ## Hubert and Vandervieren (2006), p. 15, Fig. 11.
>  adjbox(los, col = "gray", staplecol="red", outcol = "red",
+         main = "(Skewness-)Adjusted and original boxplot for 'los' data")
>  boxplot(los, add = TRUE, staplewex= 0.2, outcex= 0.5, outpch= 4,
+          staplecol = "blue", outcol = "blue", staplelwd=2)
>  legend("topright", c("adjbox(los)", "boxplot(los)"),
+         col=c("red","blue"), lwd = 1:2, bty="n")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("los", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ltsPlot")
> ### * ltsPlot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.lts
> ### Title: Robust LTS Regression Diagnostic Plots
> ### Aliases: plot.lts ltsPlot
> ### Keywords: hplot multivariate
> 
> ### ** Examples
> 
> data(hbk)
> lts <- ltsReg(Y ~ ., data = hbk)
> lts

Call:
ltsReg.formula(formula = Y ~ ., data = hbk)

Coefficients:
Intercept         X1         X2         X3  
 -0.18046    0.08138    0.03990   -0.05167  

Scale estimate 0.744 

> plot(lts, which = "rqq") 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ltsPlot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ltsReg")
> ### * ltsReg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ltsReg
> ### Title: Least Trimmed Squares Robust (High Breakdown) Regression
> ### Aliases: ltsReg ltsReg.default ltsReg.formula print.lts
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(heart)
> ## Default method works with 'x'-matrix and y-var:
> heart.x <- data.matrix(heart[, 1:2]) # the X-variables
> heart.y <- heart[,"clength"]
> ltsReg(heart.x, heart.y)

Call:
ltsReg.default(x = heart.x, y = heart.y)

Coefficients:
Intercept     height     weight  
  63.3528    -1.2265     0.6884  

Scale estimate 1.525 

> 
> data(stackloss)
> ltsReg(stack.loss ~ ., data = stackloss)

Call:
ltsReg.formula(formula = stack.loss ~ ., data = stackloss)

Coefficients:
 Intercept    Air.Flow  Water.Temp  Acid.Conc.  
 -37.65246     0.79769     0.57734    -0.06706  

Scale estimate 1.922 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ltsReg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mc")
> ### * mc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mc
> ### Title: Medcouple, a Robust Measure of Skewness
> ### Aliases: mc
> ### Keywords: robust univar
> 
> ### ** Examples
> 
> mc(1:5) # 0 for a symmetric sample
[1] 0
> 
> x1 <- c(1, 2, 7, 9, 10)
> mc(x1) # = -1/3
[1] -0.3333333
> 
> data(cushny)
> mc(cushny) # 0.125
[1] 0.125
> 
> stopifnot(mc(c(-20, -5, -2:2, 5, 20)) == 0,
+           mc(x1, doReflect=FALSE) ==  -mc(-x1, doReflect=FALSE),
+           all.equal(mc(x1, doReflect=FALSE), -1/3, tolerance = 1e-12))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("milk")
> ### * milk
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: milk
> ### Title: Daudin's Milk Composition Data
> ### Aliases: milk
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(milk)
> (c.milk <- covMcd(milk))
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=47); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = milk)
Log(Det.):  -28.93 

Robust Estimate of Location:
    X1      X2      X3      X4      X5      X6      X7      X8  
  1.03   35.76   33.05   26.12   25.10   25.04  122.94   14.36  
Robust Estimate of Covariance:
           X1         X2         X3         X4         X5         X6         X7
X1  5.916e-07  0.0001128  0.0002277  0.0002179  0.0001928  0.0001809  0.0007906
X2  1.128e-04  1.9721091  0.2768672  0.2042320  0.1278470  0.2495522  1.6169174
X3  2.277e-04  0.2768672  1.4892823  1.0985757  1.0820610  1.0937341  0.8726426
X4  2.179e-04  0.2042320  1.0985757  0.8707893  0.8336079  0.8357018  0.7145498
X5  1.928e-04  0.1278470  1.0820610  0.8336079  0.8756956  0.8446955  0.7216003
X6  1.809e-04  0.2495522  1.0937341  0.8357018  0.8446955  0.8776423  0.7238344
X7  7.906e-04  1.6169174  0.8726426  0.7145498  0.7216003  0.7238344  4.3859630
X8  4.455e-06  0.1458103  0.2179742  0.1450524  0.1232310  0.1365020  0.2680560
           X8
X1  4.455e-06
X2  1.458e-01
X3  2.180e-01
X4  1.451e-01
X5  1.232e-01
X6  1.365e-01
X7  2.681e-01
X8  1.461e-01
> summarizeRobWeights(c.milk $ mcd.wt)# 19..20 outliers
Robustness weights: 
 20 observations c(1,2,3,11,12,13,14,15,16,17,18,20,27,41,44,47,70,74,75,77)
	 are outliers with |weight| = 0 ( < 0.001163); 
 66 weights are ~= 1.
> umilk <- unique(milk) # dropping obs.64 (== obs.63)
> summary(cumilk <- covMcd(umilk, nsamp = "deterministic")) # 20 outliers
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Deterministic MCD(alpha=0.5 ==> h=47)
Call:
covMcd(x = umilk, nsamp = "deterministic")
iBest: 5; C-step iterations: 3, 4, 4, 3, 3, 3
Log(Det.):  -28.84 

Robust Estimate of Location:
    X1      X2      X3      X4      X5      X6      X7      X8  
  1.03   35.82   33.06   26.12   25.11   25.04  123.02   14.38  
Robust Estimate of Covariance:
           X1         X2         X3         X4         X5         X6         X7
X1  6.043e-07  0.0001269  0.0002231  0.0002181  0.0001913  0.0001811  0.0008209
X2  1.269e-04  1.9742513  0.1081467  0.0844286  0.0180828  0.1610617  1.5475045
X3  2.231e-04  0.1081467  1.4257668  1.0504639  1.0348803  1.0568403  0.6360380
X4  2.181e-04  0.0844286  1.0504639  0.8329041  0.7993233  0.8077483  0.5448902
X5  1.913e-04  0.0180828  1.0348803  0.7993233  0.8433813  0.8193057  0.5699901
X6  1.811e-04  0.1610617  1.0568403  0.8077483  0.8193057  0.8588606  0.5986619
X7  8.209e-04  1.5475045  0.6360380  0.5448902  0.5699901  0.5986619  4.2640894
X8  8.858e-06  0.1820374  0.1991418  0.1340407  0.1127432  0.1295396  0.3108235
           X8
X1  8.858e-06
X2  1.820e-01
X3  1.991e-01
X4  1.340e-01
X5  1.127e-01
X6  1.295e-01
X7  3.108e-01
X8  1.629e-01

Eigenvalues:
[1] 5.768e+00 3.203e+00 1.149e+00 1.370e-01 4.708e-02 3.399e-02 2.408e-02
[8] 3.585e-07

Robust Distances: 
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
   1.121    4.507    6.408   43.010   13.550 2442.000 
Robustness weights: 
 20 observations c(1,2,3,11,12,13,14,15,16,17,18,20,27,41,44,47,69,73,74,76)
	 are outliers with |weight| = 0 ( < 0.0012); 
 65 weights are ~= 1.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("milk", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nlrob-algos")
> ### * nlrob-algos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nlrob-algorithms
> ### Title: MM-, Tau-, CM-, and MTL- Estimators for Nonlinear Robust
> ###   Regression
> ### Aliases: nlrob.algorithms nlrob.MM nlrob.tau nlrob.CM nlrob.mtl
> ### Keywords: robust regression nonlinear
> 
> ### ** Examples
> 
> DNase1 <- DNase[DNase$Run == 1,]
> form <- density ~ Asym/(1 + exp(( xmid -log(conc) )/scal ))
> pnms <- c("Asym", "xmid", "scal")
> set.seed(47) # as these by default use randomized optimization:
> 
> fMM <- robustbase:::nlrob.MM(form, data = DNase1,
+            lower = setNames(c(0,0,0), pnms), upper = 3,
+            ## call to nlrob.control to pass 'optim.control':
+            ctrl = nlrob.control("MM", optim.control = list(trace = 1),
+                                 optArgs = list(trace = TRUE)))
1 : < 0.06568043 > ( 0.030657 ) 2.699558 1.662672 1.071085
2 : < 0.05135563 > ( 0.01986514 ) 2.367089 1.520246 1.071085
3 : < 0.03176846 > ( 0.01986514 ) 2.367089 1.520246 1.071085
4 : < 0.03073827 > ( 0.01986514 ) 2.367089 1.520246 1.071085
5 : < 0.02446155 > ( 0.01986514 ) 2.367089 1.520246 1.071085
6 : < 0.02158731 > ( 0.01986514 ) 2.367089 1.520246 1.071085
7 : < 0.02076038 > ( 0.01986514 ) 2.367089 1.520246 1.071085
8 : < 0.01409694 > ( 0.01986514 ) 2.367089 1.520246 1.071085
9 : < 0.01014985 > ( 0.01985212 ) 2.303141 1.388635 1.028954
10 : < 0.009128672 > ( 0.01985212 ) 2.303141 1.388635 1.028954
11 : < 0.008785776 > ( 0.01985212 ) 2.303141 1.388635 1.028954
12 : < 0.008176153 > ( 0.01882007 ) 1.429895 0.7101177 0.9320048
13 : < 0.007138518 > ( 0.01882007 ) 1.429895 0.7101177 0.9320048
14 : < 0.00663419 > ( 0.01694984 ) 2.264548 1.373464 1.007218
15 : < 0.004990433 > ( 0.01218113 ) 2.634336 1.786663 1.130746
16 : < 0.004450077 > ( 0.01218113 ) 2.634336 1.786663 1.130746
17 : < 0.003781576 > ( 0.01218113 ) 2.634336 1.786663 1.130746
18 : < 0.003439636 > ( 0.01218113 ) 2.634336 1.786663 1.130746
19 : < 0.002096688 > ( 0.01218113 ) 2.634336 1.786663 1.130746
20 : < 0.001858781 > ( 0.01218113 ) 2.634336 1.786663 1.130746
21 : < 0.001466238 > ( 0.01218113 ) 2.634336 1.786663 1.130746
22 : < 0.001418615 > ( 0.01218113 ) 2.634336 1.786663 1.130746
23 : < 0.001301314 > ( 0.01218113 ) 2.634336 1.786663 1.130746
24 : < 0.001301314 > ( 0.01218113 ) 2.634336 1.786663 1.130746
25 : < 0.001223393 > ( 0.01218113 ) 2.634336 1.786663 1.130746
26 : < 0.0009908125 > ( 0.01218113 ) 2.634336 1.786663 1.130746
27 : < 0.000939791 > ( 0.01218113 ) 2.634336 1.786663 1.130746
28 : < 0.0009356657 > ( 0.01218113 ) 2.634336 1.786663 1.130746
29 : < 0.0009316897 > ( 0.01218113 ) 2.634336 1.786663 1.130746
30 : < 0.0008635449 > ( 0.01211585 ) 2.594124 1.780671 1.127007
31 : < 0.0009441278 > ( 0.01153015 ) 2.574215 1.73965 1.117878
32 : < 0.0009441278 > ( 0.01153015 ) 2.574215 1.73965 1.117878
33 : < 0.0009234668 > ( 0.01153015 ) 2.574215 1.73965 1.117878
34 : < 0.001017899 > ( 0.0104385 ) 2.555245 1.744374 1.124387
35 : < 0.0009771945 > ( 0.01011045 ) 2.715392 1.880491 1.15727
36 : < 0.001117598 > ( 0.00935059 ) 2.720104 1.882524 1.155785
37 : < 0.0008365975 > ( 0.00935059 ) 2.720104 1.882524 1.155785
38 : < 0.0007486373 > ( 0.00935059 ) 2.720104 1.882524 1.155785
39 : < 0.0007486373 > ( 0.00935059 ) 2.720104 1.882524 1.155785
40 : < 0.0006539709 > ( 0.00935059 ) 2.720104 1.882524 1.155785
41 : < 0.0006052928 > ( 0.00935059 ) 2.720104 1.882524 1.155785
42 : < 0.0008283781 > ( 0.007374737 ) 2.70406 1.863656 1.151602
43 : < 0.0007742664 > ( 0.007374737 ) 2.70406 1.863656 1.151602
44 : < 0.0006118239 > ( 0.007374737 ) 2.70406 1.863656 1.151602
45 : < 0.000559146 > ( 0.007374737 ) 2.70406 1.863656 1.151602
46 : < 0.0005460518 > ( 0.00735965 ) 2.69992 1.859164 1.149771
47 : < 0.0005050816 > ( 0.00735965 ) 2.69992 1.859164 1.149771
48 : < 0.0004511749 > ( 0.00735965 ) 2.69992 1.859164 1.149771
49 : < 0.0004511749 > ( 0.00735965 ) 2.69992 1.859164 1.149771
50 : < 0.0004308587 > ( 0.00735965 ) 2.69992 1.859164 1.149771
51 : < 0.0004021508 > ( 0.007323208 ) 2.705071 1.86404 1.151824
52 : < 0.0004021508 > ( 0.007323208 ) 2.705071 1.86404 1.151824
53 : < 0.00032253 > ( 0.007323208 ) 2.705071 1.86404 1.151824
54 : < 0.0002989224 > ( 0.007268853 ) 2.701306 1.860916 1.150708
55 : < 0.0002612988 > ( 0.007268853 ) 2.701306 1.860916 1.150708
56 : < 0.0002094852 > ( 0.007268853 ) 2.701306 1.860916 1.150708
57 : < 0.0002141296 > ( 0.007162363 ) 2.688279 1.849162 1.147415
58 : < 0.0001640686 > ( 0.007162363 ) 2.688279 1.849162 1.147415
59 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
60 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
61 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
62 : < 7.936557e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
63 : < 4.461414e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
64 : < 4.289425e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
65 : < 2.867267e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
66 : < 2.209151e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
67 : < 1.419382e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
68 : < 1.617992e-05 > ( 0.007115951 ) 2.693241 1.853284 1.148951
69 : < 1.431852e-05 > ( 0.007115951 ) 2.693241 1.853284 1.148951
70 : < 1.173847e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
71 : < 1.153084e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
72 : < 1.112424e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
73 : < 8.432844e-06 > ( 0.007114441 ) 2.687203 1.847581 1.147502
74 : < 6.626809e-06 > ( 0.007108962 ) 2.690307 1.850949 1.148608
75 : < 5.855829e-06 > ( 0.007108962 ) 2.690307 1.850949 1.148608
76 : < 6.557656e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
77 : < 6.341923e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
78 : < 4.799942e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
79 : < 3.70222e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
80 : < 3.299484e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
81 : < 2.867961e-06 > ( 0.007095899 ) 2.691273 1.851573 1.148496
82 : < 2.419718e-06 > ( 0.007095899 ) 2.691273 1.851573 1.148496
83 : < 3.092519e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
84 : < 3.092519e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
85 : < 2.59233e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
86 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
87 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
88 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
89 : < 1.951421e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
90 : < 1.951421e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
91 : < 1.469318e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
92 : < 1.038646e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
93 : < 8.753423e-07 > ( 0.007090491 ) 2.691199 1.851383 1.148837
iter   10 value 732.941462
final  value 732.397073 
converged
> 
> ## The same via nlrob() {recommended; same random seed to necessarily give the same}:
> set.seed(47)
> gMM  <- nlrob(form, data = DNase1, method = "MM",
+               lower = setNames(c(0,0,0), pnms), upper = 3, trace = TRUE)
1 : < 0.06568043 > ( 0.030657 ) 2.699558 1.662672 1.071085
2 : < 0.05135563 > ( 0.01986514 ) 2.367089 1.520246 1.071085
3 : < 0.03176846 > ( 0.01986514 ) 2.367089 1.520246 1.071085
4 : < 0.03073827 > ( 0.01986514 ) 2.367089 1.520246 1.071085
5 : < 0.02446155 > ( 0.01986514 ) 2.367089 1.520246 1.071085
6 : < 0.02158731 > ( 0.01986514 ) 2.367089 1.520246 1.071085
7 : < 0.02076038 > ( 0.01986514 ) 2.367089 1.520246 1.071085
8 : < 0.01409694 > ( 0.01986514 ) 2.367089 1.520246 1.071085
9 : < 0.01014985 > ( 0.01985212 ) 2.303141 1.388635 1.028954
10 : < 0.009128672 > ( 0.01985212 ) 2.303141 1.388635 1.028954
11 : < 0.008785776 > ( 0.01985212 ) 2.303141 1.388635 1.028954
12 : < 0.008176153 > ( 0.01882007 ) 1.429895 0.7101177 0.9320048
13 : < 0.007138518 > ( 0.01882007 ) 1.429895 0.7101177 0.9320048
14 : < 0.00663419 > ( 0.01694984 ) 2.264548 1.373464 1.007218
15 : < 0.004990433 > ( 0.01218113 ) 2.634336 1.786663 1.130746
16 : < 0.004450077 > ( 0.01218113 ) 2.634336 1.786663 1.130746
17 : < 0.003781576 > ( 0.01218113 ) 2.634336 1.786663 1.130746
18 : < 0.003439636 > ( 0.01218113 ) 2.634336 1.786663 1.130746
19 : < 0.002096688 > ( 0.01218113 ) 2.634336 1.786663 1.130746
20 : < 0.001858781 > ( 0.01218113 ) 2.634336 1.786663 1.130746
21 : < 0.001466238 > ( 0.01218113 ) 2.634336 1.786663 1.130746
22 : < 0.001418615 > ( 0.01218113 ) 2.634336 1.786663 1.130746
23 : < 0.001301314 > ( 0.01218113 ) 2.634336 1.786663 1.130746
24 : < 0.001301314 > ( 0.01218113 ) 2.634336 1.786663 1.130746
25 : < 0.001223393 > ( 0.01218113 ) 2.634336 1.786663 1.130746
26 : < 0.0009908125 > ( 0.01218113 ) 2.634336 1.786663 1.130746
27 : < 0.000939791 > ( 0.01218113 ) 2.634336 1.786663 1.130746
28 : < 0.0009356657 > ( 0.01218113 ) 2.634336 1.786663 1.130746
29 : < 0.0009316897 > ( 0.01218113 ) 2.634336 1.786663 1.130746
30 : < 0.0008635449 > ( 0.01211585 ) 2.594124 1.780671 1.127007
31 : < 0.0009441278 > ( 0.01153015 ) 2.574215 1.73965 1.117878
32 : < 0.0009441278 > ( 0.01153015 ) 2.574215 1.73965 1.117878
33 : < 0.0009234668 > ( 0.01153015 ) 2.574215 1.73965 1.117878
34 : < 0.001017899 > ( 0.0104385 ) 2.555245 1.744374 1.124387
35 : < 0.0009771945 > ( 0.01011045 ) 2.715392 1.880491 1.15727
36 : < 0.001117598 > ( 0.00935059 ) 2.720104 1.882524 1.155785
37 : < 0.0008365975 > ( 0.00935059 ) 2.720104 1.882524 1.155785
38 : < 0.0007486373 > ( 0.00935059 ) 2.720104 1.882524 1.155785
39 : < 0.0007486373 > ( 0.00935059 ) 2.720104 1.882524 1.155785
40 : < 0.0006539709 > ( 0.00935059 ) 2.720104 1.882524 1.155785
41 : < 0.0006052928 > ( 0.00935059 ) 2.720104 1.882524 1.155785
42 : < 0.0008283781 > ( 0.007374737 ) 2.70406 1.863656 1.151602
43 : < 0.0007742664 > ( 0.007374737 ) 2.70406 1.863656 1.151602
44 : < 0.0006118239 > ( 0.007374737 ) 2.70406 1.863656 1.151602
45 : < 0.000559146 > ( 0.007374737 ) 2.70406 1.863656 1.151602
46 : < 0.0005460518 > ( 0.00735965 ) 2.69992 1.859164 1.149771
47 : < 0.0005050816 > ( 0.00735965 ) 2.69992 1.859164 1.149771
48 : < 0.0004511749 > ( 0.00735965 ) 2.69992 1.859164 1.149771
49 : < 0.0004511749 > ( 0.00735965 ) 2.69992 1.859164 1.149771
50 : < 0.0004308587 > ( 0.00735965 ) 2.69992 1.859164 1.149771
51 : < 0.0004021508 > ( 0.007323208 ) 2.705071 1.86404 1.151824
52 : < 0.0004021508 > ( 0.007323208 ) 2.705071 1.86404 1.151824
53 : < 0.00032253 > ( 0.007323208 ) 2.705071 1.86404 1.151824
54 : < 0.0002989224 > ( 0.007268853 ) 2.701306 1.860916 1.150708
55 : < 0.0002612988 > ( 0.007268853 ) 2.701306 1.860916 1.150708
56 : < 0.0002094852 > ( 0.007268853 ) 2.701306 1.860916 1.150708
57 : < 0.0002141296 > ( 0.007162363 ) 2.688279 1.849162 1.147415
58 : < 0.0001640686 > ( 0.007162363 ) 2.688279 1.849162 1.147415
59 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
60 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
61 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
62 : < 7.936557e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
63 : < 4.461414e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
64 : < 4.289425e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
65 : < 2.867267e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
66 : < 2.209151e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
67 : < 1.419382e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
68 : < 1.617992e-05 > ( 0.007115951 ) 2.693241 1.853284 1.148951
69 : < 1.431852e-05 > ( 0.007115951 ) 2.693241 1.853284 1.148951
70 : < 1.173847e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
71 : < 1.153084e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
72 : < 1.112424e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
73 : < 8.432844e-06 > ( 0.007114441 ) 2.687203 1.847581 1.147502
74 : < 6.626809e-06 > ( 0.007108962 ) 2.690307 1.850949 1.148608
75 : < 5.855829e-06 > ( 0.007108962 ) 2.690307 1.850949 1.148608
76 : < 6.557656e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
77 : < 6.341923e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
78 : < 4.799942e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
79 : < 3.70222e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
80 : < 3.299484e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
81 : < 2.867961e-06 > ( 0.007095899 ) 2.691273 1.851573 1.148496
82 : < 2.419718e-06 > ( 0.007095899 ) 2.691273 1.851573 1.148496
83 : < 3.092519e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
84 : < 3.092519e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
85 : < 2.59233e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
86 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
87 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
88 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
89 : < 1.951421e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
90 : < 1.951421e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
91 : < 1.469318e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
92 : < 1.038646e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
93 : < 8.753423e-07 > ( 0.007090491 ) 2.691199 1.851383 1.148837
> gMM
Robustly fitted nonlinear regression model (method MM)
  model:  density ~ Asym/(1 + exp((xmid - log(conc))/scal)) 
   data:  DNase1 
    Asym     xmid     scal 
2.561138 1.730322 1.112787 
 status:  converged 
> summary(gMM)

Call:
nlrob(formula = form, data = DNase1, lower = setNames(c(0, 0, 
    0), pnms), upper = 3, method = "MM", trace = TRUE)

Method "MM", init = "S", psi = "bisquare"
Residuals:
      Min        1Q    Median        3Q       Max 
-0.018373 -0.005795  0.002020  0.007377  0.070651 

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Asym  2.56114    0.08933   28.67 1.09e-11 ***
xmid  1.73032    0.08988   19.25 8.05e-10 ***
scal  1.11279    0.02840   39.18 3.62e-13 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 0.00709 
Convergence after 21 function and 21 gradient evaluations

Robustness weights: 
 2 observations c(11,12) are outliers with |weight| = 0 ( < 0.0063); 
 one weight is ~= 1. The remaining 13 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.2026  0.8169  0.9271  0.8095  0.9533  0.9933 
> ## and they are the same {apart from 'call' and 'ctrl' and new stuff in gMM}:
> ni <- names(fMM); ni <- ni[is.na(match(ni, c("call","ctrl")))]
> stopifnot(all.equal(fMM[ni], gMM[ni]))
> ## Don't show: 
> if(doExtras <- robustbase:::doExtras()) {
+  gtau <- nlrob(form, data = DNase1, method = "tau",
+ 	       lower = setNames(c(0,0,0), pnms), upper = 3, trace = TRUE)
+ 
+  ## these two have "sigma" also as parameter :
+  psNms <- c(pnms, "sigma")
+  gCM  <- nlrob(form, data = DNase1, method = "CM",
+ 	       lower = setNames(c(0,0,0,0), psNms), upper = 3, trace = TRUE)
+  gmtl <- nlrob(form, data = DNase1, method = "mtl",
+ 	       lower = setNames(c(0,0,0,0), psNms), upper = 3, trace = TRUE)
+  stopifnot(identical(sapply(list(gMM, gCM, gmtl), estimethod),
+                      c("MM", "CM", "mtl")))
+ }
> ## End(Don't show)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nlrob-algos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nlrob")
> ### * nlrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nlrob
> ### Title: Robust Fitting of Nonlinear Regression Models
> ### Aliases: nlrob fitted.nlrob residuals.nlrob predict.nlrob vcov.nlrob
> ### Keywords: robust regression nonlinear
> 
> ### ** Examples
> 
> DNase1 <- DNase[ DNase$Run == 1, ]
> 
> ## note that selfstarting models don't work yet % <<< FIXME !!!
> 
> ##--- without conditional linearity ---
> 
> ## classical
> fmNase1 <- nls( density ~ Asym/(1 + exp(( xmid - log(conc) )/scal ) ),
+                 data = DNase1,
+                 start = list( Asym = 3, xmid = 0, scal = 1 ),
+                 trace = TRUE )
14.32279 :  3 0 1
0.4542698 :  2.1152456 0.8410193 1.2000640
0.05869603 :  2.446376 1.747516 1.189515
0.005663524 :  2.294087 1.412198 1.020463
0.004791528 :  2.341429 1.479688 1.040758
0.004789569 :  2.345135 1.483047 1.041439
0.004789569 :  2.345179 1.483089 1.041454
> summary( fmNase1 )

Formula: density ~ Asym/(1 + exp((xmid - log(conc))/scal))

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Asym  2.34518    0.07815   30.01 2.17e-13 ***
xmid  1.48309    0.08135   18.23 1.22e-10 ***
scal  1.04145    0.03227   32.27 8.51e-14 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.01919 on 13 degrees of freedom

Number of iterations to convergence: 6 
Achieved convergence tolerance: 1.989e-06

> 
> ## robust
> RmN1  <- nlrob( density ~ Asym/(1 + exp(( xmid - log(conc) )/scal ) ),
+                 data = DNase1, trace = TRUE,
+                 start = list( Asym = 3, xmid = 0, scal = 1 ))
robust iteration 1 
14.32279 :  3 0 1
0.4542698 :  2.1152456 0.8410193 1.2000640
0.05869603 :  2.446376 1.747516 1.189515
0.005663524 :  2.294087 1.412198 1.020463
0.004791528 :  2.341429 1.479688 1.040758
0.004789569 :  2.345135 1.483047 1.041439
0.004789569 :  2.345179 1.483089 1.041454
 --> irls.delta(previous, resid) = 0.999803 -- *not* converged
robust iteration 2 
0.003971483 :  2.345179 1.483089 1.041454
0.003954569 :  2.356445 1.495544 1.043788
0.003954565 :  2.356586 1.495650 1.043815
 --> irls.delta(previous, resid) = 0.0614628 -- *not* converged
robust iteration 3 
0.003934724 :  2.356586 1.495650 1.043815
0.00393411 :  2.358633 1.498205 1.044647
0.00393411 :  2.358657 1.498229 1.044655
 --> irls.delta(previous, resid) = 0.0121515 -- *not* converged
robust iteration 4 
0.003930685 :  2.358657 1.498229 1.044655
0.00393062 :  2.359307 1.499046 1.044928
0.00393062 :  2.359314 1.499053 1.044931
 --> irls.delta(previous, resid) = 0.00395053 -- *not* converged
robust iteration 5 
0.00392958 :  2.359314 1.499053 1.044931
0.003929573 :  2.359525 1.499320 1.045020
 --> irls.delta(previous, resid) = 0.00128458 -- *not* converged
robust iteration 6 
0.003929244 :  2.359525 1.499320 1.045020
0.003929244 :  2.359596 1.499409 1.045050
 --> irls.delta(previous, resid) = 0.000422992 -- *not* converged
robust iteration 7 
0.003929132 :  2.359596 1.499409 1.045050
0.003929132 :  2.359620 1.499438 1.045060
 --> irls.delta(previous, resid) = 0.000139347 -- *not* converged
robust iteration 8 
0.003929095 :  2.359620 1.499438 1.045060
0.003929095 :  2.359628 1.499448 1.045063
 --> irls.delta(previous, resid) = 4.58494e-05 -- *not* converged
robust iteration 9 
0.003929083 :  2.359628 1.499448 1.045063
0.003929083 :  2.359630 1.499451 1.045064
 --> irls.delta(previous, resid) = 1.51142e-05 -- *not* converged
robust iteration 10 
0.003929079 :  2.359630 1.499451 1.045064
> summary( RmN1 )

Call:
nlrob(formula = density ~ Asym/(1 + exp((xmid - log(conc))/scal)), 
    data = DNase1, start = list(Asym = 3, xmid = 0, scal = 1), 
    trace = TRUE)

Residuals:
       Min         1Q     Median         3Q        Max 
-0.0322811 -0.0130976 -0.0008932  0.0095784  0.0404174 

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Asym  2.35963    0.08627   27.35 7.10e-13 ***
xmid  1.49945    0.09022   16.62 3.87e-10 ***
scal  1.04506    0.03504   29.83 2.34e-13 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 0.01829 
Convergence in 10 IRWLS iterations

Robustness weights: 
 14 weights are ~= 1. The remaining 2 ones are
    11     13 
0.6087 0.7621 
> 
> ##--- using conditional linearity ---
> 
> ## classical
> fm2DNase1 <- nls( density ~ 1/(1 + exp(( xmid - log(conc) )/scal ) ),
+                   data = DNase1,
+                   start = c( xmid = 0, scal = 1 ),
+                   alg = "plinear", trace = TRUE )
0.7139315 :  0.000000 1.000000 1.453853
0.1445295 :  1.640243 1.390186 2.461754
0.008302151 :  1.620899 1.054228 2.478388
0.004794192 :  1.485226 1.043709 2.347334
0.004789569 :  1.483130 1.041468 2.345218
0.004789569 :  1.483090 1.041455 2.345180
> summary( fm2DNase1 )

Formula: density ~ 1/(1 + exp((xmid - log(conc))/scal))

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
xmid  1.48309    0.08135   18.23 1.22e-10 ***
scal  1.04145    0.03227   32.27 8.51e-14 ***
.lin  2.34518    0.07815   30.01 2.17e-13 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.01919 on 13 degrees of freedom

Number of iterations to convergence: 5 
Achieved convergence tolerance: 1.032e-06

> 
> ## robust
> frm2DNase1 <- nlrob(density ~ 1/(1 + exp(( xmid - log(conc) )/scal ) ),
+                   data = DNase1, start = c( xmid = 0, scal = 1 ),
+                   alg = "plinear", trace = TRUE )
robust iteration 1 
0.304811 :  0.000000 1.000000 1.211703
0.07453107 :  1.799940 1.389332 2.444108
0.005090972 :  1.608012 1.036879 2.499053
0.002808544 :  1.497344 1.042272 2.358425
0.002808302 :  1.494768 1.041249 2.355939
0.002808302 :  1.494782 1.041248 2.355956
 --> irls.delta(previous, resid) = 1.00066 -- *not* converged
robust iteration 2 
0.003921933 :  1.494782 1.041248 2.355292
0.003912465 :  1.497919 1.044494 2.358442
0.003912465 :  1.497985 1.044519 2.358504
 --> irls.delta(previous, resid) = 0.0468789 -- *not* converged
robust iteration 3 
0.00393094 :  1.497985 1.044519 2.358321
0.003930894 :  1.498919 1.044885 2.359206
0.003930894 :  1.498928 1.044888 2.359214
 --> irls.delta(previous, resid) = 0.00529692 -- *not* converged
robust iteration 4 
0.003929736 :  1.498928 1.044888 2.359162
0.00392973 :  1.499278 1.045006 2.359492
 --> irls.delta(previous, resid) = 0.00169282 -- *not* converged
robust iteration 5 
0.003929297 :  1.499278 1.045006 2.359475
0.003929297 :  1.499395 1.045045 2.359585
 --> irls.delta(previous, resid) = 0.000557848 -- *not* converged
robust iteration 6 
0.003929149 :  1.499395 1.045045 2.359580
0.003929149 :  1.499433 1.045058 2.359616
 --> irls.delta(previous, resid) = 0.000183791 -- *not* converged
robust iteration 7 
0.003929101 :  1.499433 1.045058 2.359614
0.003929101 :  1.499446 1.045062 2.359626
 --> irls.delta(previous, resid) = 6.05288e-05 -- *not* converged
robust iteration 8 
0.003929085 :  1.499446 1.045062 2.359626
0.003929085 :  1.499450 1.045064 2.359630
 --> irls.delta(previous, resid) = 1.99549e-05 -- *not* converged
robust iteration 9 
0.00392908 :  1.499450 1.045064 2.359630
 --> irls.delta(previous, resid) = 4.31224e-06 -- *not* converged
robust iteration 10 
0.003929081 :  1.499450 1.045064 2.359629
> summary( frm2DNase1 )

Call:
nlrob(formula = density ~ 1/(1 + exp((xmid - log(conc))/scal)), 
    data = DNase1, start = c(xmid = 0, scal = 1), algorithm = "plinear", 
    trace = TRUE)

Residuals:
     Min       1Q   Median       3Q      Max 
0.003927 0.107372 0.280145 0.641955 1.002490 

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
xmid  1.49945    0.24983   6.002 4.43e-05 ***
scal  1.04506    0.09702  10.771 7.55e-08 ***
.lin  2.35963    0.23889   9.878 2.08e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 0.01829 
Convergence in 10 IRWLS iterations

Robustness weights: 
 14 weights are ~= 1. The remaining 2 ones are
    11     13 
0.6087 0.7621 
> ## Confidence for linear parameter is quite smaller than "Asym" above
> c1 <- coef(summary(RmN1))
> c2 <- coef(summary(frm2DNase1))
> rownames(c2)[rownames(c2) == ".lin"] <- "Asym"
> stopifnot(all.equal(c1[,1:2], c2[rownames(c1), 1:2], tol = 0.09)) # 0.07315
> 
> ### -- new examples -- "moderate outlier":
> DN2 <- DNase1
> DN2[10,"density"] <- 2*DN2[10,"density"]
> 
> fm3DN2 <- nls(density ~  Asym/(1 + exp(( xmid - log(conc) )/scal ) ),
+               data = DN2, trace = TRUE,
+               start = list( Asym = 3, xmid = 0, scal = 1 ))
13.20738 :  3 0 1
0.4904635 :  1.933442 0.576412 1.054796
0.2894794 :  2.0054964 1.0087049 0.9968011
0.2868991 :  2.0439449 1.0247260 0.9979447
0.2868974 :  2.0470151 1.0283037 0.9997718
0.2868973 :  2.0473652 1.0287752 0.9998902
0.2868973 :  2.047436 1.028867 0.999929
> 
> ## robust
> Rm3DN2 <- nlrob(density ~  Asym/(1 + exp(( xmid - log(conc) )/scal ) ),
+                 data = DN2, trace = TRUE,
+                 start = list( Asym = 3, xmid = 0, scal = 1 ))
robust iteration 1 
13.20738 :  3 0 1
0.4904635 :  1.933442 0.576412 1.054796
0.2894794 :  2.0054964 1.0087049 0.9968011
0.2868991 :  2.0439449 1.0247260 0.9979447
0.2868974 :  2.0470151 1.0283037 0.9997718
0.2868973 :  2.0473652 1.0287752 0.9998902
0.2868973 :  2.047436 1.028867 0.999929
 --> irls.delta(previous, resid) = 0.989031 -- *not* converged
robust iteration 2 
0.1026235 :  2.047436 1.028867 0.999929
0.07680281 :  2.222549 1.341555 1.042084
0.07547494 :  2.267845 1.372212 1.042454
0.07547382 :  2.270530 1.374585 1.043476
0.07547382 :  2.270591 1.374656 1.043484
 --> irls.delta(previous, resid) = 0.335864 -- *not* converged
robust iteration 3 
0.0240026 :  2.270591 1.374656 1.043484
0.02286633 :  2.303234 1.423823 1.037888
0.02286476 :  2.304999 1.424856 1.038261
0.02286476 :  2.305018 1.424877 1.038266
 --> irls.delta(previous, resid) = 0.0669037 -- *not* converged
robust iteration 4 
0.01583561 :  2.305018 1.424877 1.038266
0.01580947 :  2.307501 1.428119 1.035495
0.01580947 :  2.307668 1.428290 1.035585
 --> irls.delta(previous, resid) = 0.00966066 -- *not* converged
robust iteration 5 
0.01595473 :  2.307668 1.428290 1.035585
0.01595369 :  2.309546 1.430846 1.036013
0.01595369 :  2.309603 1.430907 1.036034
 --> irls.delta(previous, resid) = 0.0020366 -- *not* converged
robust iteration 6 
0.01574504 :  2.309603 1.430907 1.036034
0.01574478 :  2.310779 1.432422 1.036364
0.01574478 :  2.310809 1.432455 1.036375
 --> irls.delta(previous, resid) = 0.00101819 -- *not* converged
robust iteration 7 
0.01561744 :  2.310809 1.432455 1.036375
0.01561737 :  2.311424 1.433240 1.036545
0.01561737 :  2.311439 1.433257 1.036551
 --> irls.delta(previous, resid) = 0.000522669 -- *not* converged
robust iteration 8 
0.01555337 :  2.311439 1.433257 1.036551
0.01555335 :  2.311750 1.433654 1.036636
0.01555335 :  2.311757 1.433662 1.036639
 --> irls.delta(previous, resid) = 0.000264669 -- *not* converged
robust iteration 9 
0.01552105 :  2.311757 1.433662 1.036639
0.01552105 :  2.311914 1.433862 1.036682
 --> irls.delta(previous, resid) = 0.000132035 -- *not* converged
robust iteration 10 
0.01550511 :  2.311914 1.433862 1.036682
0.01550511 :  2.311995 1.433966 1.036705
 --> irls.delta(previous, resid) = 6.69924e-05 -- *not* converged
robust iteration 11 
0.01549687 :  2.311995 1.433966 1.036705
0.01549687 :  2.312037 1.434019 1.036717
 --> irls.delta(previous, resid) = 3.40651e-05 -- *not* converged
robust iteration 12 
0.01549269 :  2.312037 1.434019 1.036717
0.01549269 :  2.312058 1.434045 1.036722
 --> irls.delta(previous, resid) = 1.73048e-05 -- *not* converged
robust iteration 13 
0.01549057 :  2.312058 1.434045 1.036722
0.01549057 :  2.312069 1.434059 1.036725
 --> irls.delta(previous, resid) = 8.78399e-06 -- *not* converged
robust iteration 14 
0.01548949 :  2.312069 1.434059 1.036725
0.01548949 :  2.312074 1.434066 1.036727
 --> irls.delta(previous, resid) = 4.45564e-06 -- *not* converged
robust iteration 15 
0.01548895 :  2.312074 1.434066 1.036727
> Rm3DN2
Robustly fitted nonlinear regression model
  model:  density ~ Asym/(1 + exp((xmid - log(conc))/scal)) 
   data:  DN2 
    Asym     xmid     scal 
2.312074 1.434066 1.036727 
 status:  converged 
> summary(Rm3DN2) # -> robustness weight of obs. 10 ~= 0.037

Call:
nlrob(formula = density ~ Asym/(1 + exp((xmid - log(conc))/scal)), 
    data = DN2, start = list(Asym = 3, xmid = 0, scal = 1), trace = TRUE)

Residuals:
      Min        1Q    Median        3Q       Max 
-0.041530 -0.011918 -0.004290  0.008586  0.574492 

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Asym  2.31207    0.07715   29.97 2.20e-13 ***
xmid  1.43407    0.08344   17.19 2.55e-10 ***
scal  1.03673    0.03321   31.21 1.31e-13 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 0.01591 
Convergence in 15 IRWLS iterations

Robustness weights: 
 12 weights are ~= 1. The remaining 4 ones are
      9      10      11      13 
0.72536 0.03726 0.81895 0.51538 
> confint(Rm3DN2, method = "Wald")
         0.025    0.975
Asym 2.1608716 2.463277
xmid 1.2705179 1.597614
scal 0.9716312 1.101823
> 
> ## utility function sfsmisc::lseq() :
> lseq <- function (from, to, length)
+   2^seq(log2(from), log2(to), length.out = length)
> ## predict() {and plot}:
> h.x <- lseq(min(DN2$conc), max(DN2$conc), length = 100)
> nDat <- data.frame(conc = h.x)
> 
> h.p  <- predict(fm3DN2, newdata = nDat)# classical
> h.rp <- predict(Rm3DN2, newdata = nDat)# robust
> 
> plot(density ~ conc, data=DN2, log="x",
+      main = format(formula(Rm3DN2)))
> lines(h.x, h.p,  col="blue")
> lines(h.x, h.rp, col="magenta")
> legend("topleft", c("classical nls()", "robust nlrob()"),
+        lwd = 1, col= c("blue", "magenta"), inset = 0.05)
> 
> ## See  ?nlrob.algorithms for examples
> ## Not run: 
> ##D DNase1 <- DNase[DNase$Run == 1,]
> ##D form <- density ~ Asym/(1 + exp(( xmid -log(conc) )/scal ))
> ##D gMM  <- nlrob(form, data = DNase1, method = "MM",
> ##D               lower = c(Asym = 0, xmid = 0, scal = 0),
> ##D               upper = 3, trace = TRUE)
> ##D 
> ##D ## "CM" (and "mtl") additionally need bounds for "sigma" :
> ##D gCM  <- nlrob(form, data = DNase1, method = "CM",
> ##D               lower = c(Asym = 0, xmid = 0, scal = 0, sigma = 0),
> ##D               upper = c(3,3,3, sigma = 0.8))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nlrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nlrob.control")
> ### * nlrob.control
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nlrob.control
> ### Title: Control Nonlinear Robust Regression Algorithms
> ### Aliases: nlrob.control
> ### Keywords: utilities
> 
> ### ** Examples
> 
> str(nlrob.control("MM"))
List of 9
 $ method          : chr "MM"
 $ init            : chr "S"
 $ psi             : chr "bisquare"
 $ fnscale         : NULL
 $ tuning.chi.scale: num 1.55
 $ tuning.psi.M    : num 4.69
 $ optim.control   : list()
 $ optimizer       : chr "JDEoptim"
 $ optArgs         : list()
> str(nlrob.control("tau"))
List of 7
 $ method          : chr "tau"
 $ psi             : chr "bisquare"
 $ fnscale         : NULL
 $ tuning.chi.scale: NULL
 $ tuning.chi.tau  : NULL
 $ optimizer       : chr "JDEoptim"
 $ optArgs         : list()
> str(nlrob.control("CM"))
List of 6
 $ method    : chr "CM"
 $ psi       : chr "bisquare"
 $ fnscale   : NULL
 $ tuning.chi: NULL
 $ optimizer : chr "JDEoptim"
 $ optArgs   : list()
> str(nlrob.control("mtl"))
List of 5
 $ method   : chr "mtl"
 $ fnscale  : NULL
 $ cutoff   : num 2.5
 $ optimizer: chr "JDEoptim"
 $ optArgs  : list()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nlrob.control", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("outlierStats")
> ### * outlierStats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: outlierStats
> ### Title: Robust Regression Outlier Statistics
> ### Aliases: outlierStats
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> ## artificial data example
> data <- expand.grid(grp1 = letters[1:5], grp2 = letters[1:5], rep=1:3)
> set.seed(101)
> data$y <- c(rt(nrow(data), 1))
> ## compute outlier statistics for all the estimators
> control <- lmrob.control(method = "SMDM",
+                          compute.outlier.stats = c("S", "MM", "SMD", "SMDM"))
> ## warning is only issued for some seeds
> set.seed(2)
> fit1 <- lmrob(y ~ grp1*grp2, data, control = control)
Warning in outlierStats(b, x, control) :
  Detected possible local breakdown of S-estimate in coefficient 'grp1c:grp2c'.
Use lmrob argument 'setting="KS2014"' to avoid this problem.
> ## do as suggested:
> fit2 <- lmrob(y ~ grp1*grp2, data, setting = "KS2014")
> 
> ## the plot function should work for such models as well
> plot(fit1)
recomputing robust Mahalanobis distances
Warning in robMD(x = if (!is.null(x[["x"]])) x$x else if (!is.null(x[["model"]])) model.matrix(x,  :
  Failed to compute robust Mahalanobis distances, reverting to robust leverages.
saving the robust distances 'MD' as part of ‘fit1’
> 
> ## Not run: 
> ##D   ## access statistics:
> ##D   fit1$ostats ## SMDM
> ##D   fit1$init$ostats ## SMD
> ##D   fit1$init$init$ostats ## SM
> ##D   fit1$init$init$init.S$ostats ## S
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("outlierStats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pension")
> ### * pension
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pension
> ### Title: Pension Funds Data
> ### Aliases: pension
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(pension)
> plot(pension)
> 
> summary(lm.p  <-    lm(Reserves ~., data=pension))

Call:
lm(formula = Reserves ~ ., data = pension)

Residuals:
   Min     1Q Median     3Q    Max 
-886.3 -533.5 -309.6  352.8 1931.4 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 613.0206   216.6178   2.830   0.0121 *  
Income        5.0316     0.5916   8.505 2.48e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 801.2 on 16 degrees of freedom
Multiple R-squared:  0.8189,	Adjusted R-squared:  0.8076 
F-statistic: 72.34 on 1 and 16 DF,  p-value: 2.483e-07

> summary(lmR.p <- lmrob(Reserves ~., data=pension))

Call:
lmrob(formula = Reserves ~ ., data = pension)
 \--> method = "MM"
Residuals:
     Min       1Q   Median       3Q      Max 
-6245.07  -223.74   -69.83   180.69  1580.51 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 103.9083    97.5007   1.066    0.302    
Income        9.2042     0.9429   9.761 3.84e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 352.9 
Multiple R-squared:  0.9156,	Adjusted R-squared:  0.9103 
Convergence in 10 IRWLS iterations

Robustness weights: 
 observation 18 is an outlier with |weight| = 0 ( < 0.0056); 
 one weight is ~= 1. The remaining 16 ones are summarized as
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.007457 0.873200 0.964300 0.863500 0.986100 0.996200 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         5.556e-03         2.558e-09 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> summary(lts.p <- ltsReg(Reserves ~., data=pension))

Call:
ltsReg.formula(formula = Reserves ~ ., data = pension)

Residuals (from reweighted LS):
   Min     1Q Median     3Q    Max 
-404.1 -129.2    0.0  199.6  839.9 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
Intercept  30.7415   119.5759   0.257    0.801    
Income      9.2091     0.7627  12.074 8.64e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 365.7 on 14 degrees of freedom
Multiple R-Squared: 0.9124,	Adjusted R-squared: 0.9061 
F-statistic: 145.8 on 1 and 14 DF,  p-value: 8.641e-09 

> abline( lm.p)
> abline(lmR.p, col=2)
> abline(lts.p, col=2, lty=2)
> 
> ## MM: "the" solution is much simpler:
> plot(pension, log = "xy")
> lm.lp  <-    lm(log(Reserves) ~ log(Income), data=pension)
> lmR.lp <- lmrob(log(Reserves) ~ log(Income), data=pension)
> plot(log(Reserves) ~ log(Income), data=pension)
> ## no difference between LS and robust:
> abline( lm.lp)
> abline(lmR.lp, col=2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pension", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("phosphor")
> ### * phosphor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: phosphor
> ### Title: Phosphorus Content Data
> ### Aliases: phosphor
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(phosphor)
> plot(phosphor)
> summary(lm.phosphor <- lm(plant ~ ., data = phosphor))

Call:
lm(formula = plant ~ ., data = phosphor)

Residuals:
    Min      1Q  Median      3Q     Max 
-32.828  -8.440  -1.118   6.694  58.757 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)   
(Intercept) 56.25102   16.31074   3.449  0.00358 **
inorg        1.78977    0.55674   3.215  0.00579 **
organic      0.08665    0.41494   0.209  0.83740   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 20.68 on 15 degrees of freedom
Multiple R-squared:  0.4823,	Adjusted R-squared:  0.4133 
F-statistic: 6.988 on 2 and 15 DF,  p-value: 0.00717

> summary(lts.phosphor <- ltsReg(plant ~ ., data = phosphor))

Call:
ltsReg.formula(formula = plant ~ ., data = phosphor)

Residuals (from reweighted LS):
     Min       1Q   Median       3Q      Max 
-30.2967  -3.5911  -0.6916   4.2514  17.1156 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
Intercept 60.91489   10.19950   5.972 3.41e-05 ***
inorg      1.21103    0.35494   3.412  0.00421 ** 
organic    0.08833    0.25742   0.343  0.73661    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 12.69 on 14 degrees of freedom
Multiple R-Squared: 0.5188,	Adjusted R-squared: 0.4501 
F-statistic: 7.548 on 2 and 14 DF,  p-value: 0.005972 

> 
> phosphor.x <- data.matrix(phosphor[, 1:2])
> cPh <- covMcd(phosphor.x)
> plot(cPh, "dd")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("phosphor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pilot")
> ### * pilot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pilot
> ### Title: Pilot-Plant Data
> ### Aliases: pilot
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(pilot)
> summary(lm.pilot <- lm(Y ~.,data=pilot))

Call:
lm(formula = Y ~ ., data = pilot)

Residuals:
     Min       1Q   Median       3Q      Max 
-1.61909 -1.16685  0.01909  0.72765  2.15979 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 35.458272   0.635049   55.84   <2e-16 ***
X            0.321608   0.005555   57.90   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.23 on 18 degrees of freedom
Multiple R-squared:  0.9947,	Adjusted R-squared:  0.9944 
F-statistic:  3352 on 1 and 18 DF,  p-value: < 2.2e-16

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pilot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot-methods")
> ### * plot-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot-methods
> ### Title: Plot an Object of the "Psi Function" Class
> ### Aliases: plot-methods plot,psi_func-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> plot(huberPsi)
> plot(huberPsi, which=c("psi", "Dpsi", "wgt"),
+      main="short", leg = "topleft")
> 
> plot(hampelPsi)
> ## Plotting aspect ratio = 1:1 :
> plot(hampelPsi, asp=1, main="short",
+      which = c("psi", "Dpsi", "wgt", "Dwgt"))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.lmrob")
> ### * plot.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.lmrob
> ### Title: Plot Method for "lmrob" Objects
> ### Aliases: plot.lmrob
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(starsCYG)
> ## Plot simple data and fitted lines
> plot(starsCYG)
>  lmST <-    lm(log.light ~ log.Te, data = starsCYG)
> RlmST <- lmrob(log.light ~ log.Te, data = starsCYG)
> RlmST

Call:
lmrob(formula = log.light ~ log.Te, data = starsCYG)
 \--> method = "MM"
Coefficients:
(Intercept)       log.Te  
     -4.969        2.253  

> abline(lmST, col = "red")
> abline(RlmST, col = "blue")
> 
> op <- par(mfrow = c(2,2), mgp = c(1.5, 0.6, 0), mar= .1+c(3,3,3,1))
> plot(RlmST, which = c(1:2, 4:5))
recomputing robust Mahalanobis distances
saving the robust distances 'MD' as part of ‘RlmST’
> par(op)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.lmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("possumDiv")
> ### * possumDiv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: possumDiv
> ### Title: Possum Diversity Data
> ### Aliases: possumDiv possum.mat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(possumDiv)
> head(possum.mat)
     Diversity Shrubs Stumps Stags Bark Habitat BAcacia E.regnans
[1,]         3      6      1    12   29       9      31         1
[2,]         2      5      0    15   12       2       4         1
[3,]         1      7      0     6   26       2       8         1
[4,]         2      6      0    14   16       8      16         1
[5,]         3      5      0    16   11       8      20         0
[6,]         2      3      0    16    6      10      31         1
     E.delegatensis E.nitens NW-NE NW-SE SE-SW SW-NW
[1,]              0        0     0     0     0     1
[2,]              0        0     0     0     1     0
[3,]              0        0     1     0     0     0
[4,]              0        0     0     0     0     1
[5,]              1        0     0     0     1     0
[6,]              0        0     0     1     0     0
> 
> str(possumDiv)
'data.frame':	151 obs. of  9 variables:
 $ Diversity : int  3 2 1 2 3 2 3 2 0 0 ...
 $ Shrubs    : int  6 5 7 6 5 3 6 13 5 8 ...
 $ Stumps    : int  1 0 0 0 0 0 0 0 0 0 ...
 $ Stags     : int  12 15 6 14 16 16 9 20 7 4 ...
 $ Bark      : int  29 12 26 16 11 6 10 4 13 9 ...
 $ Habitat   : int  9 2 2 8 8 10 8 8 3 1 ...
 $ BAcacia   : int  31 4 8 16 20 31 16 17 0 8 ...
 $ eucalyptus: Factor w/ 3 levels "regnans","delegatensis",..: 1 1 1 1 2 1 2 1 1 1 ...
 $ aspect    : Factor w/ 4 levels "NW-NE","NW-SE",..: 4 3 1 4 3 2 4 3 4 3 ...
> ## summarize all variables as multilevel factors:
> summary(as.data.frame(lapply(possumDiv, function(v)
+                              if(is.integer(v)) factor(v) else v)))
 Diversity     Shrubs   Stumps      Stags         Bark       Habitat  
 0:39      5      :20   0:138   4      :24   5      :26   2      :22  
 1:43      1      :18   1: 13   2      :18   6      :19   6      :21  
 2:39      3      :18           3      :14   7      :16   7      :18  
 3:21      2      :15           6      :12   4      :15   3      :17  
 4: 6      4      :13           1      :10   9      :13   4      :17  
 5: 3      6      :12           5      :10   3      :11   8      :16  
           (Other):55           (Other):63   (Other):51   (Other):40  
    BAcacia          eucalyptus    aspect  
 0      :17   regnans     :110   NW-NE:35  
 16     :11   delegatensis: 29   NW-SE:47  
 4      :10   nitens      : 12   SE-SW:44  
 17     :10                      SW-NW:25  
 3      : 9                                
 13     : 9                                
 (Other):85                                
> 
> ## Following Cantoni & Ronchetti (2001), JASA, p.1026 f.:% cf. ../tests/poisson-ex.R
> pdFit <- glmrob(Diversity ~ . , data = possumDiv,
+                 family=poisson, tcc = 1.6, weights.on.x = "hat", acc = 1e-15)
> summary(pdFit)

Call:  glmrob(formula = Diversity ~ ., family = poisson, data = possumDiv,      weights.on.x = "hat", tcc = 1.6, acc = 1e-15) 


Coefficients:
                        Estimate Std. Error z value Pr(>|z|)    
(Intercept)            -0.898214   0.269307  -3.335 0.000852 ***
Shrubs                  0.007172   0.022435   0.320 0.749204    
Stumps                 -0.253355   0.288588  -0.878 0.379991    
Stags                   0.040397   0.011343   3.561 0.000369 ***
Bark                    0.041110   0.014600   2.816 0.004865 ** 
Habitat                 0.073025   0.038677   1.888 0.059017 .  
BAcacia                 0.017699   0.010741   1.648 0.099399 .  
eucalyptusdelegatensis -0.028994   0.194215  -0.149 0.881328    
eucalyptusnitens        0.149521   0.271649   0.550 0.582030    
aspectNW-SE             0.050326   0.191676   0.263 0.792890    
aspectSE-SW             0.090987   0.192193   0.473 0.635916    
aspectSW-NW            -0.512248   0.250764  -2.043 0.041077 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.5665  0.7900  0.8635  0.8431  0.9034  0.9411 

Number of observations: 151 
Fitted by method ‘Mqle’  (in 18 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
    acc     tcc 
1.0e-15 1.6e+00 
maxit 
   50 
test.acc 
  "coef" 

> summary(pdF2 <- update(pdFit, ~ . -Shrubs))

Call:  glmrob(formula = Diversity ~ Stumps + Stags + Bark + Habitat +      BAcacia + eucalyptus + aspect, family = poisson, data = possumDiv,      weights.on.x = "hat", tcc = 1.6, acc = 1e-15) 


Coefficients:
                       Estimate Std. Error z value Pr(>|z|)    
(Intercept)            -0.86810    0.24343  -3.566 0.000362 ***
Stumps                 -0.24124    0.28680  -0.841 0.400257    
Stags                   0.04023    0.01132   3.553 0.000381 ***
Bark                    0.04333    0.01352   3.204 0.001354 ** 
Habitat                 0.07410    0.03853   1.923 0.054432 .  
BAcacia                 0.01651    0.01019   1.620 0.105322    
eucalyptusdelegatensis -0.04878    0.18359  -0.266 0.790473    
eucalyptusnitens        0.12874    0.26655   0.483 0.629102    
aspectNW-SE             0.05311    0.19174   0.277 0.781781    
aspectSE-SW             0.09747    0.19190   0.508 0.611498    
aspectSW-NW            -0.51041    0.25056  -2.037 0.041638 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.5688  0.8022  0.8764  0.8551  0.9139  0.9451 

Number of observations: 151 
Fitted by method ‘Mqle’  (in 18 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
    acc     tcc 
1.0e-15 1.6e+00 
maxit 
   50 
test.acc 
  "coef" 

> summary(pdF3 <- update(pdF2,  ~ . -eucalyptus))

Call:  glmrob(formula = Diversity ~ Stumps + Stags + Bark + Habitat +      BAcacia + aspect, family = poisson, data = possumDiv, weights.on.x = "hat",      tcc = 1.6, acc = 1e-15) 


Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.866417   0.239716  -3.614 0.000301 ***
Stumps      -0.258249   0.288536  -0.895 0.370771    
Stags        0.038534   0.010765   3.580 0.000344 ***
Bark         0.044804   0.013247   3.382 0.000719 ***
Habitat      0.078166   0.037061   2.109 0.034932 *  
BAcacia      0.015075   0.009912   1.521 0.128299    
aspectNW-SE  0.063820   0.190647   0.335 0.737811    
aspectSE-SW  0.089674   0.190180   0.472 0.637269    
aspectSW-NW -0.512627   0.250422  -2.047 0.040653 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.5852  0.8639  0.9061  0.8795  0.9236  0.9508 

Number of observations: 151 
Fitted by method ‘Mqle’  (in 18 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
    acc     tcc 
1.0e-15 1.6e+00 
maxit 
   50 
test.acc 
  "coef" 

> summary(pdF4 <- update(pdF3,  ~ . -Stumps))

Call:  glmrob(formula = Diversity ~ Stags + Bark + Habitat + BAcacia +      aspect, family = poisson, data = possumDiv, weights.on.x = "hat",      tcc = 1.6, acc = 1e-15) 


Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.861867   0.237232  -3.633 0.000280 ***
Stags        0.040538   0.010585   3.830 0.000128 ***
Bark         0.042042   0.012633   3.328 0.000875 ***
Habitat      0.077276   0.037267   2.074 0.038117 *  
BAcacia      0.014368   0.009875   1.455 0.145701    
aspectNW-SE  0.076210   0.189960   0.401 0.688282    
aspectSE-SW  0.080845   0.189741   0.426 0.670048    
aspectSW-NW -0.548241   0.249223  -2.200 0.027821 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.5991  0.8836  0.9132  0.8911  0.9259  0.9513 

Number of observations: 151 
Fitted by method ‘Mqle’  (in 17 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
    acc     tcc 
1.0e-15 1.6e+00 
maxit 
   50 
test.acc 
  "coef" 

> summary(pdF5 <- update(pdF4,  ~ . -BAcacia))

Call:  glmrob(formula = Diversity ~ Stags + Bark + Habitat + aspect,      family = poisson, data = possumDiv, weights.on.x = "hat",      tcc = 1.6, acc = 1e-15) 


Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.769175   0.226487  -3.396 0.000684 ***
Stags        0.035488   0.009863   3.598 0.000320 ***
Bark         0.039804   0.012572   3.166 0.001545 ** 
Habitat      0.108444   0.029423   3.686 0.000228 ***
aspectNW-SE  0.060641   0.189858   0.319 0.749423    
aspectSE-SW  0.073372   0.189250   0.388 0.698237    
aspectSW-NW -0.544781   0.248447  -2.193 0.028326 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.6123  0.8969  0.9236  0.9039  0.9370  0.9542 

Number of observations: 151 
Fitted by method ‘Mqle’  (in 18 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
    acc     tcc 
1.0e-15 1.6e+00 
maxit 
   50 
test.acc 
  "coef" 

> summary(pdF6 <- update(pdF5,  ~ . -aspect))# too much ..

Call:  glmrob(formula = Diversity ~ Stags + Bark + Habitat, family = poisson,      data = possumDiv, weights.on.x = "hat", tcc = 1.6, acc = 1e-15) 


Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.702900   0.190679  -3.686 0.000228 ***
Stags        0.029834   0.009463   3.153 0.001617 ** 
Bark         0.034470   0.012183   2.829 0.004665 ** 
Habitat      0.107640   0.029950   3.594 0.000326 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.6901  0.9401  0.9629  0.9434  0.9740  0.9841 

Number of observations: 151 
Fitted by method ‘Mqle’  (in 17 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
    acc     tcc 
1.0e-15 1.6e+00 
maxit 
   50 
test.acc 
  "coef" 

> anova(pdFit, pdF3, pdF4, pdF5, pdF6, test = "QD") # indeed,
Robust Quasi-Deviance Table

Model 1: Diversity ~ Shrubs + Stumps + Stags + Bark + Habitat + BAcacia + 
    eucalyptus + aspect
Model 2: Diversity ~ Stumps + Stags + Bark + Habitat + BAcacia + aspect
Model 3: Diversity ~ Stags + Bark + Habitat + BAcacia + aspect
Model 4: Diversity ~ Stags + Bark + Habitat + aspect
Model 5: Diversity ~ Stags + Bark + Habitat
Models fitted by method 'Mqle'

  pseudoDf Test.Stat Df Pr(>chisq)  
1      139                          
2      142   -0.4967 -3    0.91962  
3      143   -0.9872 -1    0.32043  
4      144   -2.2536 -1    0.13331  
5      147   -9.9279 -3    0.01919 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> ## indeed, the last simplification is too much
> possumD.2 <- within(possumDiv, levels(aspect)[1:3] <- rep("other", 3))
> ## and use this binary 'aspect' instead of the 4-level one:
> summary(pdF5.1 <- update(pdF5, data = possumD.2))

Call:  glmrob(formula = Diversity ~ Stags + Bark + Habitat + aspect,      family = poisson, data = possumD.2, weights.on.x = "hat",      tcc = 1.6, acc = 1e-15) 


Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.726356   0.195878  -3.708 0.000209 ***
Stags        0.035491   0.009708   3.656 0.000256 ***
Bark         0.039907   0.012518   3.188 0.001432 ** 
Habitat      0.109563   0.029358   3.732 0.000190 ***
aspectSW-NW -0.596608   0.210636  -2.832 0.004620 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.6093  0.9104  0.9541  0.9292  0.9684  0.9816 

Number of observations: 151 
Fitted by method ‘Mqle’  (in 17 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
    acc     tcc 
1.0e-15 1.6e+00 
maxit 
   50 
test.acc 
  "coef" 

> 
> if(FALSE) # not ok, as formually not nested.
+ anova(pdF5, pdF5.1)
> 
> summarizeRobWeights(weights(pdF5.1, type="rob"), eps = 0.73)
Robustness weights: 
 3 observations c(1,59,110) are outliers with |weight| <= 0.7156 ( < 0.73); 
 The remaining 148 ones are summarized as
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.7380940 0.9111449 0.9554390 0.9344807 0.9684888 0.9815720 
> ##->  "outliers"  (1, 59, 110)
> wrob <- setNames(weights(pdF5.1, type="rob"), rownames(possumDiv))
> head(sort(wrob))
      110         1        59       139         3        99 
0.6093143 0.6870817 0.7156091 0.7380940 0.7704873 0.7705985 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("possumDiv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.glmrob")
> ### * predict.glmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.glmrob
> ### Title: Predict Method for Robust GLM ("glmrob") Fits
> ### Aliases: predict.glmrob
> ### Keywords: models regression
> 
> ### ** Examples
> 
> data(carrots)
> ## simplistic testing & training:
> i.tr <- sample(24, 20)
> fm1 <- glmrob(cbind(success, total-success) ~ logdose + block,
+               family = binomial, data = carrots, subset = i.tr)
> fm1

Call:  glmrob(formula = cbind(success, total - success) ~ logdose +      block, family = binomial, data = carrots, subset = i.tr) 

Coefficients:
(Intercept)      logdose      blockB2      blockB3  
     2.2060      -2.0154       0.3994      -0.4608  

Number of observations: 20 
Fitted by method  ‘Mqle’ 
> predict(fm1, carrots[-i.tr, ]) # --> numeric vector
         2         10         15         17 
-1.0993043 -0.6998563 -1.9091175 -1.3182378 
> predict(fm1, carrots[-i.tr, ],
+         type="response", se = TRUE)# -> a list
$fit
        2        10        15        17 
0.2498703 0.3318441 0.1290800 0.2111116 

$se.fit
         2         10         15         17 
0.03782310 0.04277085 0.02567481 0.04496014 

$residual.scale
[1] 1

> 
> data(vaso)
> Vfit <- glmrob(Y ~ log(Volume) + log(Rate), family=binomial, data=vaso)
Warning in glmrobMqle(X = X, y = Y, weights = weights, start = start, offset = offset,  :
  fitted probabilities numerically 0 or 1 occurred
> newd <- expand.grid(Volume = (V. <- seq(.5, 4, by = 0.5)),
+                     Rate   = (R. <- seq(.25,4, by = 0.25)))
> p <- predict(Vfit, newd)
> filled.contour(V., R., matrix(p, length(V.), length(R.)),
+       main = "predict(glmrob(., data=vaso))", xlab="Volume", ylab="Rate")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.glmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.lmrob")
> ### * predict.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.lmrob
> ### Title: Predict method for Robust Linear Model ("lmrob") Fits
> ### Aliases: predict.lmrob
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> ## Predictions --- artificial example -- closely following  example(predict.lm)
> 
> set.seed(5)
> n <- length(x <- sort(c(round(rnorm(25), 1), 20)))
> y <- x + rnorm(n)
> iO <- c(sample(n-1, 3), n)
> y[iO] <- y[iO] + 10*rcauchy(iO)
> 
> p.ex <- function(...) {
+   plot(y ~ x, ...); abline(0,1, col="sky blue")
+   points(y ~ x, subset=iO, col="red", pch=2)
+   abline(lm   (y ~ x), col = "gray40")
+   abline(lmrob(y ~ x), col = "forest green")
+   legend("topleft", c("true", "Least Squares", "robust"),
+          col = c("sky blue", "gray40", "forest green"), lwd=1.5, bty="n")
+ }
> p.ex()
> 
> fm <- lmrob(y ~ x)
> predict(fm)
          1           2           3           4           5           6 
-1.53013833 -0.82011584 -0.66233307 -0.66233307 -0.42565891 -0.42565891 
          7           8           9          10          11          12 
-0.26787613 -0.26787613 -0.26787613 -0.18898475 -0.03120197 -0.03120197 
         13          14          15          16          17          18 
 0.04768942  0.12658080  0.28436358  0.28436358  0.36325496  0.75771190 
         19          20          21          22          23          24 
 0.83660329  0.91549467  0.91549467  1.15216883  1.30995161  1.38884300 
         25          26 
 1.54662577 15.98374960 
> new <- data.frame(x = seq(-3, 10, 0.25))
> str(predict(fm, new, se.fit = TRUE))
List of 4
 $ fit           : Named num [1:53] -2.16 -1.96 -1.77 -1.57 -1.37 ...
  ..- attr(*, "names")= chr [1:53] "1" "2" "3" "4" ...
 $ se.fit        : Named num [1:53] 0.672 0.626 0.581 0.536 0.493 ...
  ..- attr(*, "names")= chr [1:53] "1" "2" "3" "4" ...
 $ df            : int 24
 $ residual.scale: num 1.85
> pred.w.plim <- predict(fm, new, interval = "prediction")
> pred.w.clim <- predict(fm, new, interval = "confidence")
> pmat <- cbind(pred.w.clim, pred.w.plim[,-1])
> 
> matlines(new$x, pmat, lty = c(1,2,2,3,3))# add to first plot
> ## show zoom-in region :
> rect(xleft = -3, ybottom = -20, xright = 10, ytop = 40,
+      lty = 3, border="orange4")
> 
> ## now zoom in :
> p.ex(xlim = c(-3,10), ylim = c(-20, 40))
> matlines(new$x, pmat, lty = c(1,2,2,3,3))
> box(lty = 3, col="orange4", lwd=3)
> legend("bottom", c("fit", "lwr CI", "upr CI", "lwr Pred.I", "upr Pred.I"),
+        col = 1:5, lty=c(1,2,2,3,3), bty="n")
> 
> ## Prediction intervals, special cases
> ##  The first three of these throw warnings
> w <- 1 + x^2
> fit <- lmrob(y ~ x)
> wfit <- lmrob(y ~ x, weights = w)
> predict(fit,       interval = "prediction")
Warning in predict.lmrob(fit, interval = "prediction") :
  Predictions on current data refer to _future_ responses
           fit       lwr       upr
1  -1.53013833 -5.502382  2.442105
2  -0.82011584 -4.720235  3.080003
3  -0.66233307 -4.551090  3.226424
4  -0.66233307 -4.551090  3.226424
5  -0.42565891 -4.300626  3.449308
6  -0.42565891 -4.300626  3.449308
7  -0.26787613 -4.135836  3.600084
8  -0.26787613 -4.135836  3.600084
9  -0.26787613 -4.135836  3.600084
10 -0.18898475 -4.054102  3.676132
11 -0.03120197 -3.891957  3.829553
12 -0.03120197 -3.891957  3.829553
13  0.04768942 -3.811549  3.906928
14  0.12658080 -3.731584  3.984745
15  0.28436358 -3.572985  4.141712
16  0.28436358 -3.572985  4.141712
17  0.36325496 -3.494351  4.220861
18  0.75771190 -3.107834  4.623258
19  0.83660329 -3.031857  4.705063
20  0.91549467 -2.956320  4.787309
21  0.91549467 -2.956320  4.787309
22  1.15216883 -2.732338  5.036675
23  1.30995161 -2.585192  5.205095
24  1.38884300 -2.512267  5.289953
25  1.54662577 -2.367702  5.460954
26 15.98374960  6.886912 25.080588
> predict(wfit,      interval = "prediction")
Warning in predict.lmrob(wfit, interval = "prediction") :
  Predictions on current data refer to _future_ responses
Warning in predict.lmrob(wfit, interval = "prediction") :
  Assuming prediction variance inversely proportional to weights used for fitting
            fit         lwr        upr
1   -4.30551194  -7.4943735  -1.116650
2   -1.63591308  -4.7856137   1.513788
3   -1.22372603  -4.5844892   2.137037
4   -1.22372603  -4.5844892   2.137037
5   -0.71941317  -4.5158797   3.077053
6   -0.71941317  -4.5158797   3.077053
7   -0.45189959  -4.5842611   3.680462
8   -0.45189959  -4.5842611   3.680462
9   -0.45189959  -4.5842611   3.680462
10  -0.33582097  -4.6343678   3.962726
11  -0.13165310  -4.7194434   4.456137
12  -0.13165310  -4.7194434   4.456137
13  -0.03973921  -4.7320931   4.652615
14   0.04840603  -4.7102986   4.807111
15   0.22354180  -4.5334089   4.980492
16   0.22354180  -4.5334089   4.980492
17   0.31569631  -4.3729937   5.004386
18   0.90967184  -3.0313500   4.850694
19   1.06594795  -2.7018569   4.833753
20   1.23705913  -2.3640808   4.838199
21   1.23705913  -2.3640808   4.838199
22   1.84462275  -1.3260931   5.015339
23   2.33151456  -0.6275329   5.290562
24   2.60014080  -0.2787054   5.478987
25   3.18836498   0.4155862   5.961144
26 351.67795993 203.1819257 500.173994
> predict(wfit, new, interval = "prediction")
Warning in predict.lmrob(wfit, new, interval = "prediction") :
  Assuming constant prediction variance even though model fit is weighted
           fit         lwr       upr
1  -2.47869992 -7.41581667  2.458417
2  -2.26086667 -7.17530165  2.653568
3  -2.04303342 -6.93648361  2.850417
4  -1.82520017 -6.69938449  3.048984
5  -1.60736691 -6.46402473  3.249291
6  -1.38953366 -6.23042323  3.451356
7  -1.17170041 -5.99859722  3.655196
8  -0.95386716 -5.76856217  3.860828
9  -0.73603391 -5.54033174  4.068264
10 -0.51820065 -5.31391766  4.277516
11 -0.30036740 -5.08932970  4.488595
12 -0.08253415 -4.86657559  4.701507
13  0.13529910 -4.64566099  4.916259
14  0.35313235 -4.42658946  5.132854
15  0.57096560 -4.20936244  5.351294
16  0.78879886 -3.99397922  5.571577
17  1.00663211 -3.78043696  5.793701
18  1.22446536 -3.56873074  6.017661
19  1.44229861 -3.35885351  6.243451
20  1.66013186 -3.15079620  6.471060
21  1.87796512 -2.94454775  6.700478
22  2.09579837 -2.74009516  6.931692
23  2.31363162 -2.53742356  7.164687
24  2.53146487 -2.33651631  7.399446
25  2.74929812 -2.13735509  7.635951
26  2.96713138 -1.93991995  7.874183
27  3.18496463 -1.74418948  8.114119
28  3.40279788 -1.55014084  8.355737
29  3.62063113 -1.35774993  8.599012
30  3.83846438 -1.16699149  8.843920
31  4.05629763 -0.97783915  9.090434
32  4.27413089 -0.79026565  9.338527
33  4.49196414 -0.60424285  9.588171
34  4.70979739 -0.41974190  9.839337
35  4.92763064 -0.23673334 10.091995
36  5.14546389 -0.05518719 10.346115
37  5.36329715  0.12492694 10.601667
38  5.58113040  0.30363976 10.858621
39  5.79896365  0.48098220 11.116945
40  6.01679690  0.65698530 11.376609
41  6.23463015  0.83168018 11.637580
42  6.45246341  1.00509793 11.899829
43  6.67029666  1.17726951 12.163324
44  6.88812991  1.34822574 12.428034
45  7.10596316  1.51799721 12.693929
46  7.32379641  1.68661422 12.960979
47  7.54162966  1.85410674 13.229153
48  7.75946292  2.02050437 13.498421
49  7.97729617  2.18583627 13.768756
50  8.19512942  2.35013116 14.040128
51  8.41296267  2.51341727 14.312508
52  8.63079592  2.67572234 14.585870
53  8.84862918  2.83707353 14.860185
> predict(wfit, new, interval = "prediction", weights = (new$x)^2) -> p.w2
> p.w2
           fit         lwr        upr
1  -2.47869992  -4.5393655 -0.4180344
2  -2.26086667  -4.3824600 -0.1392733
3  -2.04303342  -4.2620779  0.1760110
4  -1.82520017  -4.1886422  0.5382418
5  -1.60736691  -4.1770882  0.9623544
6  -1.38953366  -4.2502295  1.4711621
7  -1.17170041  -4.4456041  2.1022033
8  -0.95386716  -4.8306097  2.9228753
9  -0.73603391  -5.5403317  4.0682639
10 -0.51820065  -6.8909225  5.8545212
11 -0.30036740  -9.8328797  9.2321449
12 -0.08253415 -19.1235479 18.9584796
13  0.13529910        -Inf        Inf
14  0.35313235 -18.6867965 19.3930613
15  0.57096560  -8.9572119 10.0991431
16  0.78879886  -5.5741916  7.1517894
17  1.00663211  -3.7804370  5.7937012
18  1.22446536  -2.6255441  5.0744749
19  1.44229861  -1.7935281  4.6781253
20  1.66013186  -1.1495652  4.4698289
21  1.87796512  -0.6266252  4.3825555
22  2.09579837  -0.1876314  4.3792281
23  2.31363162   0.1897108  4.4375525
24  2.53146487   0.5198168  4.5431129
25  2.74929812   0.8126515  4.6859448
26  2.96713138   1.0755263  4.8587364
27  3.18496463   1.3140705  5.0558587
28  3.40279788   1.5327638  5.2728320
29  3.62063113   1.7352383  5.5060239
30  3.83846438   1.9244614  5.7524673
31  4.05629763   2.1028592  6.0097361
32  4.27413089   2.2724100  6.2758518
33  4.49196414   2.4347223  6.5492060
34  4.70979739   2.5910998  6.8284950
35  4.92763064   2.7425976  7.1126637
36  5.14546389   2.8900690  7.4008588
37  5.36329715   3.0342051  7.6923892
38  5.58113040   3.1755661  7.9866947
39  5.79896365   3.3146079  8.2833194
40  6.01679690   3.4517023  8.5818915
41  6.23463015   3.5871536  8.8821067
42  6.45246341   3.7212124  9.1837144
43  6.67029666   3.8540854  9.4865080
44  6.88812991   3.9859440  9.7903159
45  7.10596316   4.1169311 10.0949953
46  7.32379641   4.2471662 10.4004266
47  7.54162966   4.3767499 10.7065095
48  7.75946292   4.5057668 11.0131590
49  7.97729617   4.6342889 11.3203034
50  8.19512942   4.7623773 11.6278815
51  8.41296267   4.8900843 11.9358410
52  8.63079592   5.0174547 12.2441372
53  8.84862918   5.1445270 12.5527314
> stopifnot(identical(p.w2, ## the same as using formula:
+      predict(wfit, new, interval = "prediction", weights = ~x^2)))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.lmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.lmrob")
> ### * print.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.lmrob
> ### Title: Print Method for Objects of Class "lmrob"
> ### Aliases: print.lmrob
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(coleman)
> ( m1 <- lmrob(Y ~ ., data=coleman) ) # -> print.lmrob() method

Call:
lmrob(formula = Y ~ ., data = coleman)
 \--> method = "MM"
Coefficients:
(Intercept)      salaryP     fatherWc      sstatus    teacherSc    motherLev  
   30.50232     -1.66615      0.08425      0.66774      1.16778     -4.13657  

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.lmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("psiFunc")
> ### * psiFunc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: psiFunc
> ### Title: Constructor for Objects "Psi Function" Class
> ### Aliases: psiFunc huberPsi hampelPsi
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> ## classical {trivial, not interesting}:
> F1 <- function(x, .) rep.int(1, length(x))
> FF <- function(.) rep.int(1, length(.))
> cPsi <- psiFunc(rho = function(x,.) x^2 / 2, psi = function(x, .) x,
+                 wgt = F1, Dpsi = F1,
+                 Erho = function(.) rep.int(1/2, length(.)),
+                 Epsi2 = FF, EDpsi = FF, name = "classic", . = Inf)
> show(cPsi)
classic psi function 
> 
> ## Hampel's psi and rho:
> H.38 <- chgDefaults(hampelPsi, k = c(1.5, 3.5, 8))
> k. <- H.38@xtras$tuningP$k ; k.. <- as.vector(outer(c(-1,1), k.))
> c.t <- adjustcolor("skyblue3", .8)
> .ax.k <- function(side) { abline(h=0, v=0, lty=2)
+   axis(side, at = k.., labels=formatC(k..), pos=0, col=c.t, col.axis=c.t) }
> op <- par(mfrow=c(2,1), mgp = c(1.5, .6, 0), mar = .6+c(2,2,1,.5))
> curve(H.38@psi(x), -10, 10, col=2, lwd=2, n=512)
> lines(k.., H.38@psi(k..), type = "h", lty=3, col=c.t); .ax.k(1)
> curve(H.38@rho(x), -10, 10, col=2, lwd=2, n=512); abline(h=0, v=0, lty=2)
> lines(k.., H.38@rho(k..), type = "h", lty=3, col=c.t); .ax.k(1)
> title(expression("Hampel's " ~~~ psi(x) ~~ "and" ~~ rho(x) ~~~ " functions"))
> par(op)
> 
> ## Not the same, but similar, directly using the plot() method:
> plot(H.38)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("psiFunc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("psi_func-class")
> ### * psi_func-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: psi_func-class
> ### Title: Class of "Psi Functions" for M-Estimation
> ### Aliases: psi_func-class
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> str(huberPsi, give.attr = FALSE)
Formal class 'psi_func' [package "robustbase"] with 11 slots
  ..@ rho  :Formal class 'functionX' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (x, k = 1.345)  
  ..@ psi  :Formal class 'functionX' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (x, k = 1.345)  
  ..@ wgt  :Formal class 'functionX' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (x, k = 1.345)  
  ..@ Dpsi :Formal class 'functionX' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (x, k = 1.345)  
  ..@ Dwgt :Formal class 'functionX' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (x, k = 1.345)  
  ..@ tDefs: Named num 1.34
  ..@ Erho :Formal class 'functionXal1' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (k = 1.345)  
  ..@ Epsi2:Formal class 'functionXal1' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (k = 1.345)  
  ..@ EDpsi:Formal class 'functionXal1' [package "robustbase"] with 1 slot
  .. .. ..@ .Data:function (k = 1.345)  
  ..@ name : chr "Huber"
  ..@ xtras:List of 1
  .. ..$ tuningP:List of 1
  .. .. ..$ k: num 1.34
> 
> plot(hampelPsi)# calling the plot method.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("psi_func-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pulpfiber")
> ### * pulpfiber
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pulpfiber
> ### Title: Pulp Fiber and Paper Data
> ### Aliases: pulpfiber
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(pulpfiber)
> str(pulpfiber)
'data.frame':	62 obs. of  8 variables:
 $ X1: num  -0.03 0.015 0.025 0.03 -0.07 -0.05 -0.247 -0.099 -0.242 -0.188 ...
 $ X2: num  35.2 35.7 39.2 39.8 33 ...
 $ X3: num  37 36.9 30.6 21.1 36.6 ...
 $ X4: num  1.06 1.06 1.05 1.05 1.05 ...
 $ Y1: num  21.3 21.2 20.7 19.5 20.4 ...
 $ Y2: num  7.04 6.98 6.78 6.6 6.79 ...
 $ Y3: num  5.33 5.24 5.06 4.48 4.91 ...
 $ Y4: num  0.932 0.871 0.742 0.513 0.577 0.784 0.358 0.215 0.432 0.372 ...
> 
> pairs(pulpfiber, gap=.1)
> ## 2 blocks of 4 ..
> c1 <- cov(pulpfiber)
> cR <- covMcd(pulpfiber)
> ## how different are they: The robust estimate has more clear high correlations:
> symnum(cov2cor(c1))
   X1 X2 X3 X4 Y1 Y2 Y3 Y4
X1 1                      
X2 *  1                   
X3 ,  ,  1                
X4 ,  ,  ,  1             
Y1 ,  ,  .  +  1          
Y2 .  ,  .  +  *  1       
Y3 ,  ,  .  +  B  *  1    
Y4 ,  ,  .  +  B  +  B  1 
attr(,"legend")
[1] 0 ‘ ’ 0.3 ‘.’ 0.6 ‘,’ 0.8 ‘+’ 0.9 ‘*’ 0.95 ‘B’ 1
> symnum(cov2cor(cR$cov))
   X1 X2 X3 X4 Y1 Y2 Y3 Y4
X1 1                      
X2 +  1                   
X3 ,  +  1                
X4 ,  +  ,  1             
Y1 ,  +  .  *  1          
Y2 ,  +  .  *  B  1       
Y3 ,  +  .  *  B  B  1    
Y4 ,  +  .  *  B  B  B  1 
attr(,"legend")
[1] 0 ‘ ’ 0.3 ‘.’ 0.6 ‘,’ 0.8 ‘+’ 0.9 ‘*’ 0.95 ‘B’ 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pulpfiber", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("r6pack")
> ### * r6pack
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: r6pack
> ### Title: Robust Distance based observation orderings based on robust "Six
> ###   pack"
> ### Aliases: r6pack
> ### Keywords: robust multivariate
> 
> ### ** Examples
> 
> data(pulpfiber)
> dim(m.pulp <- data.matrix(pulpfiber)) #  62 x 8
[1] 62  8
> dim(fr6  <- r6pack(m.pulp, h = 40, full.h= FALSE)) #  h x 6  = 40 x 6
[1] 40  6
> dim(fr6F <- r6pack(m.pulp, h = 40, full.h= TRUE )) #  n x 6  = 62 x 6
[1] 62  6
> stopifnot(identical(fr6, fr6F[1:40,]))
> ## Don't show: 
> stopifnot(apply(fr6[1:10,], 2L,
+    function(col) c(1,3,6,35,36,38) %in% col))
> ## End(Don't show)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("r6pack", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("radarImage")
> ### * radarImage
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: radarImage
> ### Title: Satellite Radar Image Data from near Munich
> ### Aliases: radarImage
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(radarImage)
> plot(Y.coord ~ X.coord, data = radarImage)
> 
> ## The 8 "clear" outliers (see also below)
> ii8 <- c(1548:1549, 1553:1554, 1565:1566, 1570:1571)
> outF <- 1+(seq_len(nrow(radarImage)) %in% ii8)
> pairs(radarImage[, 3:5], main = "radarImage (n = 1573)",
+       col = outF, pch=outF)
> 
> ## Finding outliers -----------------------------------------
> 
> set.seed(1)
> system.time(cc.ri <- covMcd(radarImage))# ~ 0.1 sec
   user  system elapsed 
  0.105   0.000   0.106 
> ## check for covMcd() consistency:
> iiO <- as.integer(
+  c(262, 450:451, 480:481, 509, 535, 542, 597, 643, 669, 697, 803:804, 832:834,
+    862:864, 892, 989, 1123, 1145, 1223:1224, 1232:1233, 1249:1250, 1267, 1303,
+    1347, 1357, 1375, 1411, 1419:1420, 1443, 1453, 1504, 1510:1512,
+    1518:1521, 1525:1526, 1543:1544, 1546:1555, 1557:1558, 1561:1562, 1564:1566,
+    1569:1571, 1573))
> length(iiO) # 73 -- other seeds sometimes give 72, rarely 71 "outliers"
[1] 73
> isO <- cc.ri$mcd.wt == 0
> stopifnot(identical(iiO, which(isO)),
+           identical(ii8, which(cc.ri$mah > 100)),
+           length(intersect(cc.ri$best, iiO)) == 0)
> 
> cc <- c(adjustcolor("black", 0.4), adjustcolor("tomato", 0.8))
> pairs(radarImage, main = "radarImage (n = 1573) + Outliers", gap=0,
+       col = cc[1+isO], pch = c(1,8)[1+isO], cex = 0.8)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("radarImage", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rankMM")
> ### * rankMM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rankMM
> ### Title: Simple Matrix Rank
> ### Aliases: rankMM
> ### Keywords: algebra array
> 
> ### ** Examples
> 
> rankMM # - note the simple function definition
function (A, tol = NULL, sv = svd(A, 0, 0)$d) 
{
    d <- dim(A)
    stopifnot(length(d) == 2, length(sv) == min(d), diff(sv) <= 
        0)
    if (is.null(tol)) 
        tol <- max(d) * .Machine$double.eps * abs(sv[1])
    else stopifnot(is.numeric(tol), tol >= 0)
    sum(sv >= tol)
}
<bytecode: 0x7fd94c1c8990>
<environment: namespace:robustbase>
> 
> hilbert <- function(n) { i <- seq_len(n); 1/outer(i - 1L, i, "+") }
> hilbert(4)
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.5000000 0.3333333 0.2500000
[2,] 0.5000000 0.3333333 0.2500000 0.2000000
[3,] 0.3333333 0.2500000 0.2000000 0.1666667
[4,] 0.2500000 0.2000000 0.1666667 0.1428571
> H12 <- hilbert(12)
> rankMM(H12)        # 11 - numerically more realistic
[1] 11
> rankMM(H12, tol=0) # -> 12
[1] 12
> ## explanation :
> round(log10(svd(H12, 0,0)$d), 1)
 [1]   0.3  -0.4  -1.3  -2.4  -3.6  -5.0  -6.4  -7.9  -9.6 -11.5 -13.6 -16.0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rankMM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("residuals.glmrob")
> ### * residuals.glmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: residuals.glmrob
> ### Title: Residuals of Robust Generalized Linear Model Fits
> ### Aliases: residuals.glmrob
> ### Keywords: models regression
> 
> ### ** Examples
> 
> ### -------- Gamma family -- data from example(glm) ---
> clotting <- data.frame(
+             u = c(5,10,15,20,30,40,60,80,100),
+          lot1 = c(118,58,42,35,27,25,21,19,18),
+          lot2 = c(69,35,26,21,18,16,13,12,12))
> summary(cl <- glm   (lot1 ~ log(u), data=clotting, family=Gamma))

Call:
glm(formula = lot1 ~ log(u), family = Gamma, data = clotting)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-0.04008  -0.03756  -0.02637   0.02905   0.08641  

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.0165544  0.0009275  -17.85 4.28e-07 ***
log(u)       0.0153431  0.0004150   36.98 2.75e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for Gamma family taken to be 0.002446059)

    Null deviance: 3.51283  on 8  degrees of freedom
Residual deviance: 0.01673  on 7  degrees of freedom
AIC: 37.99

Number of Fisher Scoring iterations: 3

> summary(ro <- glmrob(lot1 ~ log(u), data=clotting, family=Gamma))

Call:  glmrob(formula = lot1 ~ log(u), family = Gamma, data = clotting) 


Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.0165260  0.0008369  -19.75   <2e-16 ***
log(u)       0.0153664  0.0003738   41.11   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
[1] 1.0000 0.6208 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000

Number of observations: 9 
Fitted by method ‘Mqle’  (in 3 iterations)

(Dispersion parameter for Gamma family taken to be 0.001869399)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.3450 
maxit 
   50 
test.acc 
  "coef" 

> clotM5.high <- within(clotting, { lot1[5] <- 60 })
> cl5.high <- glm   (lot1 ~ log(u), data=clotM5.high, family=Gamma)
> ro5.high <- glmrob(lot1 ~ log(u), data=clotM5.high, family=Gamma)
> rr <- range(residuals(ro), residuals(cl), residuals(ro5.high))
> plot(residuals(ro5.high) ~ residuals(cl5.high), xlim = rr, ylim = rr, asp = 1)
> abline(0,1, col=2, lty=3)
> points(residuals(ro) ~ residuals(cl), col = "gray", pch=3)
> 
> ## Show all kinds of residuals:
> r.types <- c("deviance", "pearson", "working", "response")
> sapply(r.types, residuals, object = ro5.high)
     deviance     pearson     working   response
1 -0.03981550 -0.03928883 -0.03928883 -4.8256777
2  0.07296761  0.07475306  0.07475306  4.0341149
3  0.03313416  0.03350112  0.03350112  1.3614374
4  0.01211012  0.01215906  0.01215906  0.4204547
5  0.84608494  1.09974648  1.09974648 31.4251217
6 -0.01741507 -0.01731412 -0.01731412 -0.4404795
7 -0.04768288 -0.04692803 -0.04692803 -1.0340127
8 -0.05684730 -0.05577523 -0.05577523 -1.1223275
9 -0.04597419 -0.04527236 -0.04527236 -0.8535445
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("residuals.glmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rrcov.control")
> ### * rrcov.control
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rrcov.control
> ### Title: Control Settings for covMcd and ltsReg
> ### Aliases: rrcov.control
> ### Keywords: robust multivariate
> 
> ### ** Examples
> 
> data(Animals, package = "MASS")
> brain <- Animals[c(1:24, 26:25, 27:28),]
> data(hbk)
> hbk.x <- data.matrix(hbk[, 1:3])
> 
> ctrl <- rrcov.control(alpha=0.75, trace=TRUE)
> covMcd(hbk.x,      control = ctrl)
Fast MCD(alpha=0.75 ==> h=57); nsamp = 500; (n,k)mini = (300,5) 
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.75 ==> h=57); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = hbk.x, control = ctrl)
Log(Det.):  0.1 

Robust Estimate of Location:
   X1     X2     X3  
1.538  1.780  1.687  
Robust Estimate of Covariance:
         X1       X2      X3
X1  1.67867  0.07526  0.1740
X2  0.07526  1.70865  0.2087
X3  0.17399  0.20869  1.5869
> covMcd(log(brain), control = ctrl)
Fast MCD(alpha=0.75 ==> h=21); nsamp = 500; (n,k)mini = (300,5) 
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.75 ==> h=21); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = log(brain), control = ctrl)
Log(Det.):  0.5577 

Robust Estimate of Location:
 body  brain  
3.029  4.276  
Robust Estimate of Covariance:
        body  brain
body   19.10  14.34
brain  14.34  11.18
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rrcov.control", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("salinity")
> ### * salinity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: salinity
> ### Title: Salinity Data
> ### Aliases: salinity
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(salinity)
> summary(lm.sali  <-        lm(Y ~ . , data = salinity))

Call:
lm(formula = Y ~ ., data = salinity)

Residuals:
    Min      1Q  Median      3Q     Max 
-2.6646 -0.7547  0.2267  0.6517  2.7202 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  9.59026    3.12509   3.069  0.00527 ** 
X1           0.77711    0.08622   9.013 3.59e-09 ***
X2          -0.02551    0.16108  -0.158  0.87548    
X3          -0.29504    0.10680  -2.762  0.01083 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.33 on 24 degrees of freedom
Multiple R-squared:  0.8264,	Adjusted R-squared:  0.8047 
F-statistic: 38.08 on 3 and 24 DF,  p-value: 2.769e-09

> summary(rlm.sali <- MASS::rlm(Y ~ . , data = salinity))

Call: rlm(formula = Y ~ ., data = salinity)
Residuals:
    Min      1Q  Median      3Q     Max 
-2.5279 -0.5272  0.1603  0.5513  4.0337 

Coefficients:
            Value   Std. Error t value
(Intercept) 13.3676  2.7433     4.8728
X1           0.7562  0.0757     9.9913
X2          -0.0935  0.1414    -0.6611
X3          -0.4387  0.0938    -4.6795

Residual standard error: 0.8296 on 24 degrees of freedom
> summary(lts.sali <-    ltsReg(Y ~ . , data = salinity))

Call:
ltsReg.formula(formula = Y ~ ., data = salinity)

Residuals (from reweighted LS):
    Min      1Q  Median      3Q     Max 
-2.4823 -0.3899  0.0000  0.3387  1.7013 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
Intercept 38.06346    5.17184   7.360 4.13e-07 ***
X1         0.44288    0.08604   5.147 4.90e-05 ***
X2        -0.20647    0.13748  -1.502    0.149    
X3        -1.37337    0.19465  -7.056 7.67e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.03 on 20 degrees of freedom
Multiple R-Squared: 0.8989,	Adjusted R-squared: 0.8838 
F-statistic:  59.3 on 3 and 20 DF,  p-value: 3.92e-10 

> 
> salinity.x <- data.matrix(salinity[, 1:3])
> c_sal <- covMcd(salinity.x)
> plot(c_sal, "tolEllipsePlot")
Warning in covPlot(x$X, which = which, classic = classic, ask = ask, m.cov = x,  :
  For tolerance ellipses the dimension 'p' must be 2!
> 
> ## Connection with boot package's version :
> if(requireNamespace("boot")) { ## 'always'
+  print( head(boot.sal <- boot::salinity        ) )
+  print( head(robb.sal <- salinity [, c(4, 1:3)]) ) # difference: has one digit more
+  ## Otherwise the same ?
+  dimnames(robb.sal) <- dimnames(boot.sal)
+  ## apart from the 4th column, they are "identical":
+  stopifnot( all.equal(boot.sal[, -4], robb.sal[, -4], tol = 1e-15) )
+ 
+  ## But the discharge ('X3', 'dis' or 'H2OFLOW')  __differs__ in two places:
+  plot(cbind(robustbase = robb.sal[,4], boot = boot.sal[,4]))
+  abline(0,1, lwd=3, col=adjustcolor("red", 1/4))
+  D.sal <- robb.sal[,4] - boot.sal[,4]
+  stem(robb.sal[,4] - boot.sal[,4])
+  which(abs(D.sal) > 0.01) ## 2 8
+  ## *two* typos (=> difference ~= 1) in the version of 'boot': obs. 2 & 8 !!!
+  cbind(robb = robb.sal[,4], boot = boot.sal[,4], D.sal)
+ }# boot
  sal lag trend   dis
1 7.6 8.2     4 23.01
2 7.7 7.6     5 22.87
3 4.3 4.6     0 26.42
4 5.9 4.3     1 24.87
5 5.0 5.9     2 29.90
6 6.5 5.0     3 24.20
    Y  X1 X2     X3
1 7.6 8.2  4 23.005
2 7.7 7.6  5 23.873
3 4.3 4.6  0 26.417
4 5.9 4.3  1 24.868
5 5.0 5.9  2 29.895
6 6.5 5.0  3 24.200

  The decimal point is 1 digit(s) to the left of the |

  -10 | 0
   -8 | 
   -6 | 
   -4 | 
   -2 | 
   -0 | 1110000000000
    0 | 0000000000000
    2 | 
    4 | 
    6 | 
    8 | 
   10 | 0

        robb  boot  D.sal
 [1,] 23.005 23.01 -0.005
 [2,] 23.873 22.87  1.003
 [3,] 26.417 26.42 -0.003
 [4,] 24.868 24.87 -0.002
 [5,] 29.895 29.90 -0.005
 [6,] 24.200 24.20  0.000
 [7,] 23.215 23.22 -0.005
 [8,] 21.862 22.86 -0.998
 [9,] 22.274 22.27  0.004
[10,] 23.830 23.83  0.000
[11,] 25.144 25.14  0.004
[12,] 22.430 22.43  0.000
[13,] 21.785 21.79 -0.005
[14,] 22.380 22.38  0.000
[15,] 23.927 23.93 -0.003
[16,] 33.443 33.44  0.003
[17,] 24.859 24.86 -0.001
[18,] 22.686 22.69 -0.004
[19,] 21.789 21.79 -0.001
[20,] 22.041 22.04  0.001
[21,] 21.033 21.03  0.003
[22,] 21.005 21.01 -0.005
[23,] 25.865 25.87 -0.005
[24,] 26.290 26.29  0.000
[25,] 22.932 22.93  0.002
[26,] 21.313 21.31  0.003
[27,] 20.769 20.77 -0.001
[28,] 21.393 21.39  0.003
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("salinity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("scaleTau2")
> ### * scaleTau2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: scaleTau2
> ### Title: Robust Tau-Estimate of Scale
> ### Aliases: scaleTau2
> ### Keywords: robust univar
> 
> ### ** Examples
> 
> x <- c(1:7, 1000)
> sd(x) # non-robust std.deviation
[1] 352.1449
> scaleTau2(x)
[1] 2.942916
> scaleTau2(x, mu.too = TRUE)
[1] 4.099889 2.942916
> 
> if(doExtras <- robustbase:::doExtras()) {
+  set.seed(11)
+  ## show how much faster this is, compared to Qn
+  x <- sample(c(rnorm(1e6), rt(5e5, df=3)))
+  (system.time(Qx <- Qn(x)))
+  (system.time(S2x <- scaleTau2(x)))
+  cbind(Qn = Qx, sTau2 = S2x)
+ }  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("scaleTau2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sigma")
> ### * sigma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sigma
> ### Title: Extract 'Sigma' - Standard Deviation of Errors for Robust Models
> ### Aliases: sigma sigma.lmrob
> ### Keywords: models
> 
> ### ** Examples
> 
>       m.cl <-   lm (Y ~ ., data=coleman)
> if(getRversion() >= "3.3.0")  sigma(m.cl)  else  summary(m.cl)$sigma
[1] 2.074296
> sigma( m1  <- lmrob(Y ~ ., data=coleman) )
[1] 1.133836
> sigma( m2  <- lmrob(Y ~ ., data=coleman, setting = "KS2014") )
[1] 0.9745701
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sigma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("smoothWgt")
> ### * smoothWgt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: smoothWgt
> ### Title: Smooth Weighting Function - Generalized Biweight
> ### Aliases: smoothWgt
> ### Keywords: arith robust
> 
> ### ** Examples
> 
> ## a somewhat typical picture:
> curve(smoothWgt(x, c=3, h=1), -5,7, n = 1000)
> 
> csW <- curve(smoothWgt(x, c=1/2, h=1), -2,2) # cutoff 1/2, bandwidth 1
> ## Show that the above is the same as
> ## Tukey's "biweight" or "bi-square" weight function:
> bw <- function(x) pmax(0, (1 - x^2))^2
> cbw <- curve(bw,                     col=adjustcolor(2, 1/2), lwd=2, add=TRUE)
> cMw <- curve(Mwgt(x,c=1,"biweight"), col=adjustcolor(3, 1/2), lwd=2, add=TRUE)
> stopifnot(## proving they are all the same:
+    all.equal(csW, cbw, tol=1e-15),
+    all.equal(csW, cMw, tol=1e-15))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("smoothWgt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("splitFrame")
> ### * splitFrame
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: splitFrame
> ### Title: Split Continuous and Categorical Predictors
> ### Aliases: splitFrame
> 
> ### ** Examples
> 
> data(education)
> education <- within(education, Region <- factor(Region))
> 
> ## no interactions -- same split for all types:
> fm1 <- lm(Y ~ Region + X1 + X2 + X3, education)
> splt <- splitFrame(fm1$model)
> str(splt)
List of 3
 $ x1    : num [1:50, 1:4] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:50] "1" "2" "3" "4" ...
  .. ..$ : chr [1:4] "(Intercept)" "Region2" "Region3" "Region4"
 $ x1.idx: Named logi [1:7] TRUE TRUE TRUE TRUE FALSE FALSE ...
  ..- attr(*, "names")= chr [1:7] "(Intercept)" "Region2" "Region3" "Region4" ...
 $ x2    : num [1:50, 1:3] 508 564 322 846 871 774 856 889 715 753 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:50] "1" "2" "3" "4" ...
  .. ..$ : chr [1:3] "X1" "X2" "X3"
> 
> ## with interactions:
> fm2 <- lm(Y ~ Region:X1:X2 + X1*X2, education)
> s1 <- splitFrame(fm2$model, type="f"  )
> s2 <- splitFrame(fm2$model, type="fi" )
> s3 <- splitFrame(fm2$model, type="fii")
> cbind(s1$x1.idx,
+       s2$x1.idx,
+       s3$x1.idx)
               [,1]  [,2]  [,3]
(Intercept)    TRUE  TRUE  TRUE
X1            FALSE FALSE FALSE
X2            FALSE FALSE FALSE
X1:X2         FALSE FALSE  TRUE
Region2:X1:X2 FALSE  TRUE  TRUE
Region3:X1:X2 FALSE  TRUE  TRUE
Region4:X1:X2 FALSE  TRUE  TRUE
> rbind(p.x1 = c(ncol(s1$x1), ncol(s2$x1), ncol(s3$x1)),
+       p.x2 = c(ncol(s1$x2), ncol(s2$x2), ncol(s3$x2)))
     [,1] [,2] [,3]
p.x1    1    4    5
p.x2    6    3    2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("splitFrame", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("starsCYG")
> ### * starsCYG
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: starsCYG
> ### Title: Hertzsprung-Russell Diagram Data of Star Cluster CYG OB1
> ### Aliases: starsCYG
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(starsCYG)
> plot(starsCYG)
> cst <- covMcd(starsCYG)
> lm.stars <- lm(log.light ~ log.Te, data = starsCYG)
> summary(lm.stars)

Call:
lm(formula = log.light ~ log.Te, data = starsCYG)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.1052 -0.5067  0.1327  0.4423  0.9390 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)   6.7935     1.2365   5.494 1.75e-06 ***
log.Te       -0.4133     0.2863  -1.444    0.156    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.5646 on 45 degrees of freedom
Multiple R-squared:  0.04427,	Adjusted R-squared:  0.02304 
F-statistic: 2.085 on 1 and 45 DF,  p-value: 0.1557

> plot(lm.stars)
> lts.stars <- ltsReg(log.light ~ log.Te, data = starsCYG)
> plot(lts.stars)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("starsCYG", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarizeRobWeights")
> ### * summarizeRobWeights
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarizeRobWeights
> ### Title: Print a Nice "summary" of Robustness Weights
> ### Aliases: summarizeRobWeights
> ### Keywords: utilities
> 
> ### ** Examples
> 
> w <- c(1,1,1,1,0,1,1,1,1,0,1,1,.9999,.99999, .5,.6,1e-12)
> summarizeRobWeights(w) # two outside ~= {0,1}
Robustness weights: 
 3 observations c(5,10,17) are outliers with |weight| <= 1e-12 ( < 0.005882); 
 12 weights are ~= 1. The remaining 2 ones are
 15  16 
0.5 0.6 
> summarizeRobWeights(w, eps1 = 5e-5)# now three outside {0,1}
Robustness weights: 
 3 observations c(5,10,17) are outliers with |weight| <= 1e-12 ( < 0.005882); 
 11 weights are ~= 1. The remaining 3 ones are
    13     15     16 
0.9999 0.5000 0.6000 
> 
> ## See the summary(<lmrob>) outputs
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarizeRobWeights", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.glmrob")
> ### * summary.glmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.glmrob
> ### Title: Summarizing Robust Fits of Generalized Linear Models
> ### Aliases: summary.glmrob vcov.glmrob print.summary.glmrob
> ### Keywords: regression nonlinear robust
> 
> ### ** Examples
> 
> data(epilepsy)
> Rmod <- glmrob(Ysum ~ Age10 + Base4*Trt, family = poisson,
+                data = epilepsy, method= "Mqle")
> ss <- summary(Rmod)
> ss ## calls print.summary.glmrob()

Call:  glmrob(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson,      data = epilepsy, method = "Mqle") 


Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
(Intercept)         2.045101   0.152178  13.439  < 2e-16 ***
Age10               0.159912   0.046837   3.414 0.000640 ***
Base4               0.084966   0.004116  20.641  < 2e-16 ***
Trtprogabide       -0.332755   0.086301  -3.856 0.000115 ***
Base4:Trtprogabide  0.011970   0.004903   2.441 0.014631 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Robustness weights w.r * w.x: 
 27 weights are ~= 1. The remaining 32 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0829  0.3443  0.5625  0.5384  0.7608  0.9638 

Number of observations: 59 
Fitted by method ‘Mqle’  (in 14 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.3450 
maxit 
   50 
test.acc 
  "coef" 

> str(ss) ## internal STRucture of summary object
List of 19
 $ call         : language glmrob(formula = Ysum ~ Age10 + Base4 * Trt, family = poisson, data = epilepsy,      method = "Mqle")
 $ terms        :Classes 'terms', 'formula' length 3 Ysum ~ Age10 + Base4 * Trt
  .. ..- attr(*, "variables")= language list(Ysum, Age10, Base4, Trt)
  .. ..- attr(*, "factors")= int [1:4, 1:4] 0 1 0 0 0 0 1 0 0 0 ...
  .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. ..$ : chr [1:4] "Ysum" "Age10" "Base4" "Trt"
  .. .. .. ..$ : chr [1:4] "Age10" "Base4" "Trt" "Base4:Trt"
  .. ..- attr(*, "term.labels")= chr [1:4] "Age10" "Base4" "Trt" "Base4:Trt"
  .. ..- attr(*, "order")= int [1:4] 1 1 1 2
  .. ..- attr(*, "intercept")= int 1
  .. ..- attr(*, "response")= int 1
  .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
  .. ..- attr(*, "predvars")= language list(Ysum, Age10, Base4, Trt)
  .. ..- attr(*, "dataClasses")= Named chr [1:4] "numeric" "numeric" "numeric" "factor"
  .. .. ..- attr(*, "names")= chr [1:4] "Ysum" "Age10" "Base4" "Trt"
 $ family       :List of 12
  ..$ family    : chr "poisson"
  ..$ link      : chr "log"
  ..$ linkfun   :function (mu)  
  ..$ linkinv   :function (eta)  
  ..$ variance  :function (mu)  
  ..$ dev.resids:function (y, mu, wt)  
  ..$ aic       :function (y, n, mu, wt, dev)  
  ..$ mu.eta    :function (eta)  
  ..$ initialize:  expression({     if (any(y < 0))          stop("negative values not allowed for the 'Poisson' family")     n <- rep.int(1, nobs)     mustart <- y + 0.1 })
  ..$ validmu   :function (mu)  
  ..$ valideta  :function (eta)  
  ..$ simulate  :function (object, nsim)  
  ..- attr(*, "class")= chr "family"
 $ iter         : int 14
 $ control      :List of 4
  ..$ acc     : num 1e-04
  ..$ test.acc: chr "coef"
  ..$ maxit   : num 50
  ..$ tcc     : num 1.34
 $ method       : chr "Mqle"
 $ residuals    : Named num [1:59] -0.507 -0.447 -0.579 -0.816 1.549 ...
  ..- attr(*, "names")= chr [1:59] "1" "2" "3" "4" ...
 $ fitted.values: Named num [1:59] 16 15.8 13.1 16.3 44.6 ...
  ..- attr(*, "names")= chr [1:59] "1" "2" "3" "4" ...
 $ w.r          : num [1:59] 1 1 1 1 0.868 ...
 $ w.x          : num [1:59] 1 1 1 1 1 1 1 1 1 1 ...
 $ deviance     : NULL
 $ df.residual  : NULL
 $ null.deviance: NULL
 $ df.null      : NULL
 $ df           : NULL
 $ aliased      : Named logi [1:5] FALSE FALSE FALSE FALSE FALSE
  ..- attr(*, "names")= chr [1:5] "(Intercept)" "Age10" "Base4" "Trtprogabide" ...
 $ coefficients : num [1:5, 1:4] 2.045 0.16 0.085 -0.333 0.012 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:5] "(Intercept)" "Age10" "Base4" "Trtprogabide" ...
  .. ..$ : chr [1:4] "Estimate" "Std. Error" "z value" "Pr(>|z|)"
 $ dispersion   : num 1
 $ cov.scaled   : num [1:5, 1:5] 0.023158 -0.006473 -0.000209 -0.00396 0.000064 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:5] "(Intercept)" "Age10" "Base4" "Trtprogabide" ...
  .. ..$ : chr [1:5] "(Intercept)" "Age10" "Base4" "Trtprogabide" ...
 - attr(*, "class")= chr "summary.glmrob"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.glmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.lmrob")
> ### * summary.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.lmrob
> ### Title: Summary Method for "lmrob" Objects
> ### Aliases: summary.lmrob vcov.lmrob print.summary.lmrob
> ###   model.matrix.lmrob
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> mod1 <- lmrob(stack.loss ~ ., data = stackloss)
> sa <- summary(mod1)  # calls summary.lmrob(....)
> sa                   # dispatches to call print.summary.lmrob(....)

Call:
lmrob(formula = stack.loss ~ ., data = stackloss)
 \--> method = "MM"
Residuals:
      Min        1Q    Median        3Q       Max 
-10.50974  -1.43819  -0.09134   1.02503   7.23113 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) -41.52462    5.29780  -7.838 4.82e-07 ***
Air.Flow      0.93885    0.11743   7.995 3.68e-07 ***
Water.Temp    0.57955    0.26296   2.204   0.0416 *  
Acid.Conc.   -0.11292    0.06989  -1.616   0.1246    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Robust residual standard error: 1.912 
Multiple R-squared:  0.9593,	Adjusted R-squared:  0.9521 
Convergence in 17 IRWLS iterations

Robustness weights: 
 observation 21 is an outlier with |weight| = 0 ( < 0.0048); 
 2 weights are ~= 1. The remaining 18 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1215  0.8757  0.9428  0.8721  0.9797  0.9978 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         4.762e-03         1.692e-10 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> 
> ## correlation between estimated coefficients:
> cov2cor(vcov(mod1))
            (Intercept)   Air.Flow  Water.Temp  Acid.Conc.
(Intercept)   1.0000000 -0.1918251 -0.62235475 -0.15451275
Air.Flow     -0.1918251  1.0000000 -0.21953080 -0.72959529
Water.Temp   -0.6223548 -0.2195308  1.00000000 -0.06605236
Acid.Conc.   -0.1545128 -0.7295953 -0.06605236  1.00000000
attr(,"weights")
        1         2         3         4         5         6         7         8 
0.8117942 0.8732020 0.6748580 0.1215253 0.9364784 0.8841442 0.9705456 0.9997921 
        9        10        11        12        13        14        15        16 
0.9494262 0.9973437 0.9881843 0.9993914 0.7747917 0.9491294 0.8830017 0.9815868 
       17        18        19        20        21 
0.9977769 0.9939863 0.9739933 0.9358532 0.0000000 
attr(,"eigen")
attr(,"eigen")$values
[1] 2.809410e+01 4.572612e-02 1.463951e-02 1.339274e-05

attr(,"eigen")$vectors
             [,1]        [,2]         [,3]        [,4]
[1,]  0.999510765 -0.02812919 -0.009497104 0.009837858
[2,] -0.004239885  0.30288773 -0.787802716 0.536290896
[3,] -0.030921161 -0.95232598 -0.236365434 0.190395595
[4,] -0.002033497  0.02330214  0.568689781 0.822219441

> 
> cbind(fit = fitted(mod1), resid = residuals(mod1),
+       wgts= weights(mod1, type="robustness"),
+       predict(mod1, interval="prediction"))
Warning in predict.lmrob(mod1, interval = "prediction") :
  Predictions on current data refer to _future_ responses
         fit        resid      wgts       fit       lwr      upr
1  39.180906   2.81909436 0.8117942 39.180906 31.693270 46.66854
2  39.293827  -2.29382747 0.8732020 39.293827 31.725344 46.86231
3  33.214651   3.78534936 0.6748580 33.214651 26.954348 39.47495
4  20.768873   7.23112657 0.1215253 20.768873 15.901402 25.63635
5  19.609767  -1.60976697 0.9364784 19.609767 15.118053 24.10148
6  20.189320  -2.18932020 0.8841442 20.189320 15.538935 24.83971
7  20.091342  -1.09134248 0.9705456 20.091342 15.323545 24.85914
8  20.091342  -0.09134248 0.9997921 20.091342 15.323545 24.85914
9  16.433939  -1.43393883 0.9494262 16.433939 11.904498 20.96338
10 14.326625  -0.32662547 0.9973437 14.326625  9.926107 18.72714
11 13.310329   0.68967096 0.9881843 13.310329  9.035506 17.58515
12 12.843698   0.15630236 0.9993914 12.843698  8.414451 17.27294
13 14.100782  -3.10078182 0.7747917 14.100782  9.762828 18.43874
14 13.438195  -1.43819497 0.9491294 13.438195  9.185574 17.69082
15  5.799566   2.20043371 0.8830017  5.799566  1.284572 10.31456
16  6.138332   0.86166823 0.9815868  6.138332  1.770506 10.50616
17  8.298791  -0.29879055 0.9977769  8.298791  4.053025 12.54456
18  7.508338   0.49166223 0.9939863  7.508338  3.343199 11.67348
19  7.974969   1.02503082 0.9739933  7.974969  3.752523 12.19742
20 13.382198   1.61780241 0.9358532 13.382198  9.224450 17.53994
21 25.509736 -10.50973597 0.0000000 25.509736 20.377911 30.64156
> 
> data(heart)
> sm2 <- summary( m2 <- lmrob(clength ~ ., data = heart) )
> sm2

Call:
lmrob(formula = clength ~ ., data = heart)
 \--> method = "MM"
Residuals:
     Min       1Q   Median       3Q      Max 
-9.88238 -1.75544 -0.09021  0.81805  5.63795 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)
(Intercept)  30.3033    62.6170   0.484    0.640
height       -0.1372     2.1246  -0.065    0.950
weight        0.3136     0.7346   0.427    0.679

Robust residual standard error: 2.59 
Multiple R-squared:  0.8671,	Adjusted R-squared:  0.8376 
Convergence in 36 IRWLS iterations

Robustness weights: 
 3 weights are ~= 1. The remaining 9 ones are
     2      3      4      5      6      7      8      9     11 
0.9887 0.9299 0.9608 0.9082 0.9262 0.9963 0.1134 0.9665 0.6149 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         8.333e-03         1.701e-10 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.lmrob", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.lts")
> ### * summary.lts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.lts
> ### Title: Summary Method for LTS objects
> ### Aliases: summary.lts print.summary.lts
> ### Keywords: regression robust
> 
> ### ** Examples
> 
> data(Animals2)
> ltsA <- ltsReg(log(brain) ~ log(body), data = Animals2)
> (slts <- summary(ltsA))

Call:
ltsReg.formula(formula = log(brain) ~ log(body), data = Animals2)

Residuals (from reweighted LS):
    Min      1Q  Median      3Q     Max 
-1.6565 -0.4141  0.0000  0.5004  1.6781 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
Intercept  2.08980    0.09039   23.12   <2e-16 ***
log(body)  0.74049    0.02690   27.53   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.6517 on 59 degrees of freedom
Multiple R-Squared: 0.9278,	Adjusted R-squared: 0.9265 
F-statistic: 757.9 on 1 and 59 DF,  p-value: < 2.2e-16 

> ## non-default options for printing the summary:
> print(slts, digits = 5, signif.stars = FALSE)

Call:
ltsReg.formula(formula = log(brain) ~ log(body), data = Animals2)

Residuals (from reweighted LS):
     Min       1Q   Median       3Q      Max 
-1.65648 -0.41410  0.00000  0.50036  1.67812 

Coefficients:
          Estimate Std. Error t value  Pr(>|t|)
Intercept 2.089803   0.090391  23.119 < 2.2e-16
log(body) 0.740490   0.026898  27.529 < 2.2e-16

Residual standard error: 0.65173 on 59 degrees of freedom
Multiple R-Squared: 0.92777,	Adjusted R-squared: 0.92655 
F-statistic: 757.87 on 1 and 59 DF,  p-value: < 2.22e-16 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.lts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.mcd")
> ### * summary.mcd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.mcd
> ### Title: Summary Method for MCD objects
> ### Aliases: summary.mcd print.summary.mcd
> ### Keywords: multivariate robust
> 
> ### ** Examples
> 
> data(Animals, package = "MASS")
> brain <- Animals[c(1:24, 26:25, 27:28),]
> lbrain <- log(brain)
> summary(cLB <- covMcd(lbrain))
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=15); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = lbrain)
Log(Det.):  -0.7134 

Robust Estimate of Location:
 body  brain  
3.029  4.276  
Robust Estimate of Covariance:
        body  brain
body   18.86  14.16
brain  14.16  11.03

Eigenvalues:
[1] 29.6369  0.2551

Robust Distances: 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0346  0.4663  1.3500  8.8250  2.5540 79.1800 
Robustness weights: 
 5 observations c(6,14,16,17,25) are outliers with |weight| = 0 ( < 0.0036); 
 23 weights are ~= 1.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.mcd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("telef")
> ### * telef
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: telef
> ### Title: Number of International Calls from Belgium
> ### Aliases: telef
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(telef)
> summary(lm.telef <- lm(Year~., data=telef))

Call:
lm(formula = Year ~ ., data = telef)

Residuals:
   Min     1Q Median     3Q    Max 
-8.824 -3.279 -1.044  1.792 12.732 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)   58.566      1.570  37.304   <2e-16 ***
Calls          0.587      0.193   3.041    0.006 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 6.067 on 22 degrees of freedom
Multiple R-squared:  0.2959,	Adjusted R-squared:  0.2639 
F-statistic: 9.247 on 1 and 22 DF,  p-value: 0.005998

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("telef", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tolEllipsePlot")
> ### * tolEllipsePlot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tolEllipsePlot
> ### Title: Tolerance Ellipse Plot
> ### Aliases: tolEllipsePlot
> ### Keywords: hplot robust
> 
> ### ** Examples
> 
> data(hbk)
> hbk.x <- data.matrix(hbk[, 1:3])
> mcd <- covMcd(hbk.x)       # compute mcd in advance
> ## must be a 2-dimensional data set: take the first two columns :
> tolEllipsePlot(hbk.x[,1:2])
> 
> ## an "impressive" example:
> data(telef)
> tolEllipsePlot(telef, classic=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tolEllipsePlot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("toxicity")
> ### * toxicity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: toxicity
> ### Title: Toxicity of Carboxylic Acids Data
> ### Aliases: toxicity
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(toxicity)
> summary(toxicity)
    toxicity           logKow             pKa              ELUMO      
 Min.   :-0.9400   Min.   :-0.5900   Min.   :-0.2000   Min.   :1.860  
 1st Qu.:-0.4675   1st Qu.: 0.7375   1st Qu.: 0.2472   1st Qu.:4.393  
 Median :-0.2250   Median : 1.5750   Median : 0.8913   Median :4.700  
 Mean   :-0.1558   Mean   : 1.6668   Mean   : 0.6489   Mean   :4.344  
 3rd Qu.: 0.0800   3rd Qu.: 2.6475   3rd Qu.: 0.9675   3rd Qu.:4.830  
 Max.   : 0.9000   Max.   : 4.4200   Max.   : 1.0200   Max.   :4.970  
     Ecarb            Emet               RM              IR       
 Min.   :15.40   Min.   :-0.8056   Min.   :15.33   Min.   :1.397  
 1st Qu.:16.89   1st Qu.: 0.8425   1st Qu.:26.56   1st Qu.:1.425  
 Median :17.23   Median : 2.5304   Median :31.43   Median :1.444  
 Mean   :17.19   Mean   : 3.1191   Mean   :34.27   Mean   :1.446  
 3rd Qu.:17.71   3rd Qu.: 4.5039   3rd Qu.:40.72   3rd Qu.:1.470  
 Max.   :18.48   Max.   :11.2898   Max.   :70.03   Max.   :1.478  
       Ts              P         
 Min.   :30.20   Min.   : 1.422  
 1st Qu.:32.55   1st Qu.: 1.462  
 Median :33.15   Median : 1.476  
 Mean   :38.14   Mean   : 6.808  
 3rd Qu.:41.50   3rd Qu.:12.430  
 Max.   :70.50   Max.   :21.630  
> plot(toxicity)
> plot(toxicity ~ pKa, data = toxicity)
> 
> ## robustly scale the data (to scale 1) using Qn
> (scQ.tox <- sapply(toxicity, Qn))
   toxicity      logKow         pKa       ELUMO       Ecarb        Emet 
 0.40414939  1.45493782  0.12649876  0.24248964  0.70645314  2.62191920 
         RM          IR          Ts           P 
12.40738642  0.02424896  2.62697107  0.06668465 
> scTox <- scale(toxicity, center = FALSE, scale = scQ.tox)
> csT <- covOGK(scTox, n.iter = 2,
+               sigmamu = s_Qn, weight.fn = hard.rejection)
> as.dist(round(cov2cor(csT$cov), 2))
       1     2     3     4     5     6     7     8     9
2   0.91                                                
3  -0.32 -0.17                                          
4  -0.25 -0.05  0.64                                    
5  -0.01  0.28  0.48  0.48                              
6   0.88  0.72 -0.50 -0.54 -0.08                        
7   0.78  0.78 -0.11 -0.06  0.36  0.77                  
8   0.32  0.13 -0.57 -0.84 -0.22  0.70  0.41            
9  -0.28 -0.35 -0.11 -0.50  0.00  0.11  0.14  0.72      
10  0.36  0.18 -0.25 -0.07 -0.06  0.41  0.43  0.24  0.09
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("toxicity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tukeyPsi1")
> ### * tukeyPsi1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tukeyPsi1
> ### Title: Tukey's Bi-square Score (Psi) and "Chi" (Rho) Functions and
> ###   Derivatives
> ### Aliases: robustbase-deprecated tukeyPsi1 tukeyChi
> ### Keywords: robust
> 
> ### ** Examples
> 
> ## Don't show: 
> oop <- options(warn = -1) # against the "deprecated" warnings
> ## End(Don't show)
> op <- par(mfrow = c(3,1), oma = c(0,0, 2, 0),
+           mgp = c(1.5, 0.6, 0), mar= .1+c(3,4,3,2))
> x <- seq(-2.5, 2.5, length = 201)
> cc <- 1.55 # as set by default in lmrob.control()
> plot. <- function(...) { plot(...); abline(h=0,v=0, col="gray", lty=3)}
> plot.(x, tukeyChi(x, cc), type = "l", col = 2)
> plot.(x, tukeyChi(x, cc, deriv = 1), type = "l", col = 2)
> plot.(x, tukeyChi(x, cc, deriv = 2), type = "l", col = 2)
> mtext(sprintf("tukeyChi(x, c = %g, deriv),  deriv = 0,1,2", cc),
+       outer = TRUE, font = par("font.main"), cex = par("cex.main"))
> par(op)
> 
> op <- par(mfrow = c(3,1), oma = c(0,0, 2, 0),
+           mgp = c(1.5, 0.6, 0), mar= .1+c(3,4,1,1))
> x <- seq(-5, 5, length = 201)
> cc <- 4.69 # as set by default in lmrob.control()
> plot. <- function(...) { plot(..., asp = 1); abline(h=0,v=0, col="gray", lty=3)}
> plot.(x, tukeyPsi1(x, cc), type = "l", col = 2)
> abline(0:1, lty = 3, col = "light blue")
> plot.(x, tukeyPsi1(x, cc, deriv = -1), type = "l", col = 2)
> plot.(x, tukeyPsi1(x, cc, deriv =  1), type = "l", col = 2); abline(h=1,lty=3)
> mtext(sprintf("tukeyPsi1(x, c = %g, deriv),  deriv = 0, -1, 1", cc),
+       outer = TRUE, font = par("font.main"), cex = par("cex.main"))
> par(op)
> ## Don't show: 
> options(oop)
> ## End(Don't show)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tukeyPsi1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("vaso")
> ### * vaso
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: vaso
> ### Title: Vaso Constriction Skin Data Set
> ### Aliases: vaso
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(vaso)
> str(vaso)
'data.frame':	39 obs. of  3 variables:
 $ Volume: num  3.7 3.5 1.25 0.75 0.8 0.7 0.6 1.1 0.9 0.9 ...
 $ Rate  : num  0.825 1.09 2.5 1.5 3.2 3.5 0.75 1.7 0.75 0.45 ...
 $ Y     : int  1 1 1 1 1 1 0 0 0 0 ...
> pairs(vaso)
> 
> glmV <- glm(Y ~ log(Volume) + log(Rate), family=binomial, data=vaso)
> summary(glmV)

Call:
glm(formula = Y ~ log(Volume) + log(Rate), family = binomial, 
    data = vaso)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.4527  -0.6110   0.1001   0.6181   2.2775  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)   
(Intercept)   -2.875      1.321  -2.177  0.02946 * 
log(Volume)    5.179      1.865   2.778  0.00547 **
log(Rate)      4.562      1.838   2.482  0.01306 * 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 54.040  on 38  degrees of freedom
Residual deviance: 29.227  on 36  degrees of freedom
AIC: 35.227

Number of Fisher Scoring iterations: 6

> ## -->  example(glmrob)  showing classical & robust GLM
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("vaso", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("wagnerGrowth")
> ### * wagnerGrowth
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: wagnerGrowth
> ### Title: Wagner's Hannover Employment Growth Data
> ### Aliases: wagnerGrowth
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(wagnerGrowth)
> ## maybe
> str(wagnerGrowth)
'data.frame':	63 obs. of  7 variables:
 $ Region: Factor w/ 21 levels "1","2","3","4",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ PA    : num  46.8 35.5 28.4 32.5 28.9 ...
 $ GPA   : num  -2.6 -1.42 -1.48 -4.51 -0.88 -1.39 -2.22 -5.11 -0.16 -3.86 ...
 $ HS    : num  1.68 1.67 1.71 1.37 2.14 3 2.94 3.57 3.27 2.74 ...
 $ GHS   : num  0.2 0.63 0.12 0.32 -0.08 0.45 0.27 -0.55 0.03 0.19 ...
 $ y     : num  0.97 2.14 6.13 7.36 3.63 ...
 $ Period: Factor w/ 3 levels "1","2","3": 1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> require(lattice)
Loading required package: lattice
> (xyplot(y ~ Period | Region, data = wagnerGrowth,
+          main = "wagnerGrowth: 21 regions @ Hannover"))
> 
> (dotplot(y ~ reorder(Region,y,median), data = wagnerGrowth,
+          main = "wagnerGrowth",
+          xlab = "Region [ordered by  median(y | Region) ]"))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("wagnerGrowth", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:lattice’

> nameEx("wgt.himedian")
> ### * wgt.himedian
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: wgt.himedian
> ### Title: Weighted Hi-Median
> ### Aliases: wgt.himedian
> ### Keywords: univar robust
> 
> ### ** Examples
> 
> x <- c(1:6, 20)
> median(x) ## 4
[1] 4
> stopifnot(all.equal(4, wgt.himedian(x)),
+           all.equal(6, wgt.himedian(x, c(rep(1,6), 5))))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("wgt.himedian", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("wood")
> ### * wood
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: wood
> ### Title: Modified Data on Wood Specific Gravity
> ### Aliases: wood
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(wood)
> plot(wood)
> summary( lm.wood <-        lm(y ~ ., data = wood))

Call:
lm(formula = y ~ ., data = wood)

Residuals:
      Min        1Q    Median        3Q       Max 
-0.030415 -0.012318 -0.003494  0.012760  0.047892 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)   
(Intercept)  0.42178    0.16912   2.494  0.02576 * 
x1           0.44069    0.11688   3.770  0.00207 **
x2          -1.47501    0.48692  -3.029  0.00901 **
x3          -0.26118    0.11199  -2.332  0.03513 * 
x4           0.02079    0.16109   0.129  0.89915   
x5           0.17082    0.20336   0.840  0.41505   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.02412 on 14 degrees of freedom
Multiple R-squared:  0.8084,	Adjusted R-squared:   0.74 
F-statistic: 11.81 on 5 and 14 DF,  p-value: 0.0001282

> summary(rlm.wood <- MASS::rlm(y ~ ., data = wood))

Call: rlm(formula = y ~ ., data = wood)
Residuals:
      Min        1Q    Median        3Q       Max 
-0.029872 -0.011744 -0.002467  0.012984  0.058431 

Coefficients:
            Value   Std. Error t value
(Intercept)  0.3986  0.1673     2.3823
x1           0.4124  0.1156     3.5661
x2          -1.6204  0.4817    -3.3638
x3          -0.2288  0.1108    -2.0652
x4           0.0202  0.1594     0.1268
x5           0.2152  0.2012     1.0695

Residual standard error: 0.0193 on 14 degrees of freedom
> summary(lts.wood <-    ltsReg(y ~ ., data = wood))

Call:
ltsReg.formula(formula = y ~ ., data = wood)

Residuals (from reweighted LS):
      Min        1Q    Median        3Q       Max 
-0.009281 -0.001771  0.000000  0.001146  0.013004 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
Intercept  0.37733    0.05402   6.986 3.78e-05 ***
x1         0.21738    0.04212   5.162 0.000424 ***
x2        -0.08501    0.19771  -0.430 0.676341    
x3        -0.56430    0.04349 -12.975 1.40e-07 ***
x4        -0.40033    0.06544  -6.118 0.000113 ***
x5         0.60745    0.07858   7.730 1.59e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.007451 on 10 degrees of freedom
Multiple R-Squared: 0.9583,	Adjusted R-squared: 0.9375 
F-statistic:    46 on 5 and 10 DF,  p-value: 1.397e-06 

> 
> wood.x <- as.matrix(wood)[,1:5]
> c_wood <- covMcd(wood.x)
> c_wood
Minimum Covariance Determinant (MCD) estimator approximation.
Method: Fast MCD(alpha=0.5 ==> h=13); nsamp = 500; (n,k)mini = (300,5)
Call:
covMcd(x = wood.x)
Log(Det.):  -36.27 

Robust Estimate of Location:
    x1      x2      x3      x4      x5  
0.5869  0.1222  0.5309  0.5382  0.8918  
Robust Estimate of Covariance:
            x1          x2          x3          x4          x5
x1   0.0150707   2.828e-03   0.0047406  -8.809e-04  -2.450e-03
x2   0.0028276   7.287e-04   0.0019080  -7.816e-05   3.554e-05
x3   0.0047406   1.908e-03   0.0099707  -1.310e-03   5.297e-04
x4  -0.0008809  -7.816e-05  -0.0013099   4.278e-03   2.748e-03
x5  -0.0024503   3.554e-05   0.0005297   2.748e-03   4.160e-03
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("wood", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  15.397 0.385 15.951 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
