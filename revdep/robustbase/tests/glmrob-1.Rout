
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(robustbase)
> 
> source(system.file("xtraR/ex-funs.R", package = "robustbase"))
> source(system.file("test-tools-1.R",  package = "Matrix", mustWork=TRUE))# assert.EQ
Loading required package: tools
> 
> 
> ###>> 1 ------------------- family = poisson ------------------------------------
> 
> ### very simple model [with outliers]
> set.seed(113)
> y <- rpois(17, lambda = 4) ## -> target:  beta_0 = log(E[Y]) = log(4) = 1.386294
> 
> y[1:2] <- 99:100 # outliers
> y
 [1]  99 100   7   3   5   3   2   5   3   5   1   3   2   3   4   6   3
> rm1 <- glmrob(y ~ 1, family = poisson, trace = TRUE,
+               acc = 1e-13) # default is just 1e-4
Initial theta: 
(Intercept) 
   2.704121 
 it | d{theta} |   rel.change
  1 |    -0.32 |     0.117708
  2 |    -0.37 |     0.154689
  3 |    -0.36 |     0.177974
  4 |     -0.2 |     0.122032
  5 |   -0.035 |    0.0243059
  6 |  -0.0028 |   0.00199645
  7 | -0.00019 |  0.000132804
  8 |  -1.2e-5 |   8.7184e-06
  9 |  -8.1e-7 |  5.71848e-07
 10 |  -5.3e-8 |  3.75058e-08
 11 |  -3.5e-9 |  2.45989e-09
 12 | -2.3e-10 |  1.61336e-10
 13 | -1.5e-11 |  1.05816e-11
 14 | -9.8e-13 |  6.94145e-13
 15 | -6.4e-14 |  4.54102e-14
> ## and check the robustness weights:
> assert.EQ(c(0.0287933850640724, 0.0284930623638766,
+ 		      0.950239140568007, 0.874115394740014),
+ 		    local({w <- rm1$w.r; w[ w != 1 ] }), tol = 1e-14)
> assert.EQ(coef(rm1), c("(Intercept)" = 1.41710946076738),tol = 1e-14)
> 
> cm1 <- glm   (y ~ 1, family = poisson, trace = TRUE)
Deviance = 1163.408 Iterations - 1
Deviance = 683.2127 Iterations - 2
Deviance = 613.1911 Iterations - 3
Deviance = 610.3937 Iterations - 4
Deviance = 610.3869 Iterations - 5
Deviance = 610.3869 Iterations - 6
> 
> rmMT <- glmrob(y ~ 1, family = poisson, trace = TRUE, method="MT")
Computing initial estimate with  500  sub samples:
..................................................  50
..................................................  100
..................................................  150
..................................................  200
..................................................  250
..................................................  300
..................................................  350
..................................................  400
..................................................  450
..................................................  500
Optim()izing  sumaConPesos()
final  value 3.622702 
converged
> (sMT <- summary(rmMT))

Call:  glmrob(formula = y ~ 1, family = poisson, method = "MT", trace.lev = TRUE) 


Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   1.2937     0.1205   10.73   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
Robustness weights w.r * w.x: 
 2 observations c(1,2) are outliers with |weight| = 0 ( < 0.0059); 
 The remaining 15 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.6868  0.9084  0.9399  0.9242  0.9915  0.9922 

Number of observations: 17 
Fitted by method 'MT'  (in 15 iterations)

(Dispersion parameter for poisson family taken to be 1)

No deviance values available 
Algorithmic parameters: 
     cw     acc 
2.1e+00 1.0e-06 
nsubm maxit 
  500   200 

> 
> if(FALSE) # for manual digging:
+ debug(robustbase:::glmrobMqle)
> 
> allresid <- function(obj, types = c("deviance", "pearson", "working", "response"))
+ {
+     sapply(types, residuals, object = obj)
+ }
> 
> okFit <- function(obj, check.attr=FALSE, ...) {
+   all.equal(obj$y, obj$fitted.values + residuals(obj, "response"),
+             check.attributes=check.attr, ...)
+ }
> 
> ## check validity of several methods simultaneously:
> y. <- model.response(model.frame(rm1))
> stopifnot(okFit(cm1), okFit(rm1), y. == y)
> 
> alr.c <- allresid(cm1)
> alr.r <- allresid(rm1)
> 
> ## MM --- just for now --
> plot(resid(cm1),                resid(rm1), asp=1); abline(0,1, col=2)
> plot(resid(cm1,type="pearson"), resid(rm1, type="pearson"), asp=1); abline(0,1, col=2)
> plot(resid(cm1,type="working"), resid(rm1, type="working"), asp=1); abline(0,1, col=2)
> 
> ## leave away the outliers --
> cm0 <- glm   (y ~ 1, family = poisson, trace = TRUE, subset = -(1:2))
Deviance = 10.73791 Iterations - 1
Deviance = 10.29225 Iterations - 2
Deviance = 10.29144 Iterations - 3
Deviance = 10.29144 Iterations - 4
> plot(resid(cm0),                resid(rm1)[-(1:2)], asp=1); abline(0,1, col=2)
> plot(resid(cm0,type="pearson"), resid(rm1, type="pearson")[-(1:2)], asp=1); abline(0,1, col=2)
> plot(resid(cm0,type="working"), resid(rm1, type="working")[-(1:2)], asp=1); abline(0,1, col=2)
> plot(resid(cm0,type="response"), resid(rm1, type="response")[-(1:2)], asp=1); abline(0,1, col=2)
> 
> 
> ## Use weights (slow convergence !)
> w2 <- c(rep(1,8), rep(10,9))
> rm2 <- glmrob(y ~ 1, family = poisson, trace = TRUE,
+               weights = w2, maxit = 500, acc = 1e-10) # default is just 1e-4
Initial theta: 
(Intercept) 
   1.676524 
 it | d{theta} |   rel.change
  1 |     0.65 |     0.387101
  2 |    -0.23 |    0.0992927
  3 |     -0.2 |    0.0953427
  4 |   -0.032 |    0.0169877
  5 |     0.03 |    0.0159738
  6 |   -0.028 |    0.0146181
  7 |    0.026 |    0.0137313
  8 |   -0.024 |    0.0126081
  9 |    0.022 |    0.0118372
 10 |   -0.021 |     0.010904
 11 |    0.019 |    0.0102371
 12 |   -0.018 |   0.00945966
 13 |    0.017 |   0.00888519
 14 |   -0.016 |   0.00823613
 15 |    0.014 |   0.00774296
 16 |   -0.014 |   0.00720008
 17 |    0.013 |   0.00677795
 18 |   -0.012 |   0.00632314
 19 |    0.011 |   0.00596273
 20 |   -0.011 |   0.00558115
 21 |   0.0099 |   0.00527409
 22 |  -0.0093 |   0.00495355
 23 |   0.0088 |   0.00469244
 24 |  -0.0083 |   0.00442287
 25 |   0.0079 |    0.0042012
 26 |  -0.0075 |   0.00397426
 27 |   0.0071 |   0.00378634
 28 |  -0.0068 |   0.00359512
 29 |   0.0064 |   0.00343603
 30 |  -0.0062 |   0.00327474
 31 |   0.0059 |   0.00314023
 32 |  -0.0056 |   0.00300408
 33 |   0.0054 |   0.00289048
 34 |  -0.0052 |   0.00277544
 35 |    0.005 |   0.00267962
 36 |  -0.0048 |   0.00257497
 37 |   0.0047 |   0.00248707
 38 |  -0.0045 |    0.0023904
 39 |   0.0043 |   0.00230839
 40 |  -0.0042 |   0.00221905
 41 |    0.004 |   0.00214257
 42 |  -0.0039 |   0.00205998
 43 |   0.0037 |   0.00198868
 44 |  -0.0036 |   0.00191231
 45 |   0.0035 |   0.00184586
 46 |  -0.0033 |   0.00177523
 47 |   0.0032 |   0.00171331
 48 |  -0.0031 |   0.00164796
 49 |    0.003 |   0.00159029
 50 |  -0.0029 |   0.00152982
 51 |   0.0028 |   0.00147611
 52 |  -0.0027 |   0.00142014
 53 |   0.0026 |   0.00137014
 54 |  -0.0025 |   0.00131833
 55 |   0.0024 |   0.00127179
 56 |  -0.0023 |   0.00122381
 57 |   0.0022 |    0.0011805
 58 |  -0.0021 |   0.00113606
 59 |   0.0021 |   0.00109576
 60 |   -0.002 |   0.00105461
 61 |   0.0019 |   0.00101712
 62 |  -0.0018 |   0.00097899
 63 |   0.0018 |   0.00094412
 64 |  -0.0017 |  0.000908793
 65 |   0.0016 |  0.000876364
 66 |  -0.0016 |  0.000843628
 67 |   0.0015 |  0.000813473
 68 |  -0.0015 |  0.000783134
 69 |   0.0014 |  0.000755097
 70 |  -0.0014 |  0.000726977
 71 |   0.0013 |  0.000700912
 72 |  -0.0013 |  0.000674846
 73 |   0.0012 |  0.000650617
 74 |  -0.0012 |  0.000626452
 75 |   0.0011 |  0.000603933
 76 |  -0.0011 |  0.000581528
 77 |   0.0011 |  0.000560599
 78 |   -0.001 |  0.000539824
 79 |  0.00098 |  0.000520375
 80 | -0.00094 |  0.000501111
 81 |  0.00091 |  0.000483039
 82 | -0.00087 |  0.000465173
 83 |  0.00084 |  0.000448382
 84 | -0.00081 |  0.000431813
 85 |  0.00078 |  0.000416212
 86 | -0.00075 |  0.000400844
 87 |  0.00073 |   0.00038635
 88 |  -0.0007 |  0.000372096
 89 |  0.00067 |  0.000358632
 90 | -0.00065 |   0.00034541
 91 |  0.00063 |  0.000332903
 92 |  -0.0006 |  0.000320637
 93 |  0.00058 |  0.000309019
 94 | -0.00056 |  0.000297641
 95 |  0.00054 |   0.00028685
 96 | -0.00052 |  0.000276293
 97 |   0.0005 |  0.000266271
 98 | -0.00048 |  0.000256477
 99 |  0.00046 |  0.000247169
100 | -0.00045 |  0.000238082
101 |  0.00043 |  0.000229437
102 | -0.00042 |  0.000221006
103 |   0.0004 |  0.000212977
104 | -0.00039 |  0.000205154
105 |  0.00037 |  0.000197699
106 | -0.00036 |   0.00019044
107 |  0.00034 |  0.000183516
108 | -0.00033 |  0.000176781
109 |  0.00032 |  0.000170351
110 | -0.00031 |  0.000164101
111 |   0.0003 |  0.000158131
112 | -0.00029 |  0.000152331
113 |  0.00028 |  0.000146787
114 | -0.00027 |  0.000141405
115 |  0.00026 |  0.000136257
116 | -0.00025 |  0.000131262
117 |  0.00024 |  0.000126483
118 | -0.00023 |  0.000121847
119 |  0.00022 |   0.00011741
120 | -0.00021 |  0.000113107
121 |   0.0002 |  0.000108987
122 |  -0.0002 |  0.000104995
123 |  0.00019 |  0.000101169
124 | -0.00018 |  9.74636e-05
125 |  0.00018 |  9.39119e-05
126 | -0.00017 |  9.04727e-05
127 |  0.00016 |  8.71752e-05
128 | -0.00016 |  8.39833e-05
129 |  0.00015 |  8.09218e-05
130 | -0.00015 |  7.79594e-05
131 |  0.00014 |   7.5117e-05
132 | -0.00014 |  7.23675e-05
133 |  0.00013 |  6.97286e-05
134 | -0.00013 |  6.71766e-05
135 |  0.00012 |  6.47267e-05
136 | -0.00012 |  6.23582e-05
137 |  0.00011 |  6.00837e-05
138 | -0.00011 |  5.78853e-05
139 |   0.0001 |  5.57737e-05
140 |  -0.0001 |  5.37332e-05
141 |   9.7e-5 |  5.17729e-05
142 |  -9.4e-5 |   4.9879e-05
143 |     9e-5 |  4.80591e-05
144 |  -8.7e-5 |  4.63012e-05
145 |   8.4e-5 |  4.46117e-05
146 |  -8.1e-5 |    4.298e-05
147 |   7.8e-5 |  4.14116e-05
148 |  -7.5e-5 |  3.98971e-05
149 |   7.2e-5 |  3.84411e-05
150 |    -7e-5 |  3.70353e-05
151 |   6.7e-5 |  3.56836e-05
152 |  -6.5e-5 |  3.43788e-05
153 |   6.2e-5 |  3.31239e-05
154 |    -6e-5 |  3.19128e-05
155 |   5.8e-5 |  3.07479e-05
156 |  -5.6e-5 |  2.96237e-05
157 |   5.4e-5 |  2.85423e-05
158 |  -5.2e-5 |  2.74988e-05
159 |     5e-5 |  2.64949e-05
160 |  -4.8e-5 |  2.55263e-05
161 |   4.6e-5 |  2.45944e-05
162 |  -4.4e-5 |  2.36953e-05
163 |   4.3e-5 |  2.28302e-05
164 |  -4.1e-5 |  2.19956e-05
165 |     4e-5 |  2.11925e-05
166 |  -3.8e-5 |  2.04179e-05
167 |   3.7e-5 |  1.96724e-05
168 |  -3.6e-5 |  1.89533e-05
169 |   3.4e-5 |  1.82612e-05
170 |  -3.3e-5 |  1.75938e-05
171 |   3.2e-5 |  1.69513e-05
172 |  -3.1e-5 |  1.63318e-05
173 |     3e-5 |  1.57354e-05
174 |  -2.8e-5 |  1.51603e-05
175 |   2.7e-5 |  1.46067e-05
176 |  -2.6e-5 |  1.40728e-05
177 |   2.5e-5 |  1.35589e-05
178 |  -2.5e-5 |  1.30634e-05
179 |   2.4e-5 |  1.25863e-05
180 |  -2.3e-5 |  1.21263e-05
181 |   2.2e-5 |  1.16835e-05
182 |  -2.1e-5 |  1.12565e-05
183 |     2e-5 |  1.08454e-05
184 |    -2e-5 |  1.04491e-05
185 |   1.9e-5 |  1.00674e-05
186 |  -1.8e-5 |  9.69956e-06
187 |   1.8e-5 |   9.3453e-06
188 |  -1.7e-5 |  9.00381e-06
189 |   1.6e-5 |  8.67495e-06
190 |  -1.6e-5 |  8.35796e-06
191 |   1.5e-5 |  8.05269e-06
192 |  -1.5e-5 |  7.75844e-06
193 |   1.4e-5 |  7.47506e-06
194 |  -1.4e-5 |  7.20192e-06
195 |   1.3e-5 |  6.93886e-06
196 |  -1.3e-5 |  6.68532e-06
197 |   1.2e-5 |  6.44113e-06
198 |  -1.2e-5 |  6.20578e-06
199 |   1.1e-5 |   5.9791e-06
200 |  -1.1e-5 |  5.76063e-06
201 |     1e-5 |  5.55021e-06
202 |    -1e-5 |  5.34742e-06
203 |   9.7e-6 |  5.15209e-06
204 |  -9.3e-6 |  4.96385e-06
205 |     9e-6 |  4.78253e-06
206 |  -8.7e-6 |  4.60779e-06
207 |   8.3e-6 |  4.43947e-06
208 |    -8e-6 |  4.27727e-06
209 |   7.7e-6 |  4.12102e-06
210 |  -7.5e-6 |  3.97045e-06
211 |   7.2e-6 |  3.82542e-06
212 |  -6.9e-6 |  3.68565e-06
213 |   6.7e-6 |  3.55102e-06
214 |  -6.4e-6 |  3.42128e-06
215 |   6.2e-6 |   3.2963e-06
216 |    -6e-6 |  3.17587e-06
217 |   5.7e-6 |  3.05985e-06
218 |  -5.5e-6 |  2.94806e-06
219 |   5.3e-6 |  2.84037e-06
220 |  -5.1e-6 |  2.73659e-06
221 |     5e-6 |  2.63662e-06
222 |  -4.8e-6 |  2.54029e-06
223 |   4.6e-6 |   2.4475e-06
224 |  -4.4e-6 |  2.35808e-06
225 |   4.3e-6 |  2.27193e-06
226 |  -4.1e-6 |  2.18893e-06
227 |     4e-6 |  2.10897e-06
228 |  -3.8e-6 |  2.03192e-06
229 |   3.7e-6 |  1.95769e-06
230 |  -3.5e-6 |  1.88617e-06
231 |   3.4e-6 |  1.81726e-06
232 |  -3.3e-6 |  1.75087e-06
233 |   3.2e-6 |  1.68691e-06
234 |  -3.1e-6 |  1.62528e-06
235 |   2.9e-6 |   1.5659e-06
236 |  -2.8e-6 |   1.5087e-06
237 |   2.7e-6 |  1.45358e-06
238 |  -2.6e-6 |  1.40048e-06
239 |   2.5e-6 |  1.34931e-06
240 |  -2.4e-6 |  1.30002e-06
241 |   2.4e-6 |  1.25253e-06
242 |  -2.3e-6 |  1.20677e-06
243 |   2.2e-6 |  1.16268e-06
244 |  -2.1e-6 |   1.1202e-06
245 |     2e-6 |  1.07928e-06
246 |    -2e-6 |  1.03985e-06
247 |   1.9e-6 |  1.00186e-06
248 |  -1.8e-6 |  9.65262e-07
249 |   1.7e-6 |  9.29999e-07
250 |  -1.7e-6 |  8.96023e-07
251 |   1.6e-6 |  8.63289e-07
252 |  -1.6e-6 |   8.3175e-07
253 |   1.5e-6 |  8.01365e-07
254 |  -1.4e-6 |  7.72088e-07
255 |   1.4e-6 |  7.43882e-07
256 |  -1.3e-6 |  7.16706e-07
257 |   1.3e-6 |  6.90523e-07
258 |  -1.2e-6 |  6.65296e-07
259 |   1.2e-6 |  6.40991e-07
260 |  -1.2e-6 |  6.17573e-07
261 |   1.1e-6 |  5.95012e-07
262 |  -1.1e-6 |  5.73274e-07
263 |     1e-6 |  5.52331e-07
264 |    -1e-6 |  5.32153e-07
265 |   9.6e-7 |  5.12712e-07
266 |  -9.3e-7 |  4.93981e-07
267 |   8.9e-7 |  4.75935e-07
268 |  -8.6e-7 |  4.58547e-07
269 |   8.3e-7 |  4.41796e-07
270 |    -8e-7 |  4.25655e-07
271 |   7.7e-7 |  4.10105e-07
272 |  -7.4e-7 |  3.95123e-07
273 |   7.1e-7 |  3.80688e-07
274 |  -6.9e-7 |   3.6678e-07
275 |   6.6e-7 |  3.53381e-07
276 |  -6.4e-7 |  3.40471e-07
277 |   6.2e-7 |  3.28033e-07
278 |  -5.9e-7 |  3.16049e-07
279 |   5.7e-7 |  3.04503e-07
280 |  -5.5e-7 |  2.93378e-07
281 |   5.3e-7 |   2.8266e-07
282 |  -5.1e-7 |  2.72334e-07
283 |   4.9e-7 |  2.62385e-07
284 |  -4.7e-7 |  2.52799e-07
285 |   4.6e-7 |  2.43564e-07
286 |  -4.4e-7 |  2.34666e-07
287 |   4.2e-7 |  2.26093e-07
288 |  -4.1e-7 |  2.17833e-07
289 |   3.9e-7 |  2.09875e-07
290 |  -3.8e-7 |  2.02208e-07
291 |   3.7e-7 |   1.9482e-07
292 |  -3.5e-7 |  1.87703e-07
293 |   3.4e-7 |  1.80846e-07
294 |  -3.3e-7 |  1.74239e-07
295 |   3.2e-7 |  1.67873e-07
296 |    -3e-7 |  1.61741e-07
297 |   2.9e-7 |  1.55832e-07
298 |  -2.8e-7 |  1.50139e-07
299 |   2.7e-7 |  1.44654e-07
300 |  -2.6e-7 |  1.39369e-07
301 |   2.5e-7 |  1.34278e-07
302 |  -2.4e-7 |  1.29372e-07
303 |   2.3e-7 |  1.24646e-07
304 |  -2.3e-7 |  1.20092e-07
305 |   2.2e-7 |  1.15705e-07
306 |  -2.1e-7 |  1.11478e-07
307 |     2e-7 |  1.07405e-07
308 |  -1.9e-7 |  1.03481e-07
309 |   1.9e-7 |   9.9701e-08
310 |  -1.8e-7 |  9.60586e-08
311 |   1.7e-7 |  9.25493e-08
312 |  -1.7e-7 |  8.91683e-08
313 |   1.6e-7 |  8.59107e-08
314 |  -1.6e-7 |  8.27721e-08
315 |   1.5e-7 |  7.97483e-08
316 |  -1.4e-7 |  7.68348e-08
317 |   1.4e-7 |  7.40278e-08
318 |  -1.3e-7 |  7.13234e-08
319 |   1.3e-7 |  6.87178e-08
320 |  -1.2e-7 |  6.62073e-08
321 |   1.2e-7 |  6.37886e-08
322 |  -1.2e-7 |  6.14582e-08
323 |   1.1e-7 |   5.9213e-08
324 |  -1.1e-7 |  5.70497e-08
325 |     1e-7 |  5.49656e-08
326 |  -9.9e-8 |  5.29575e-08
327 |   9.6e-8 |  5.10228e-08
328 |  -9.2e-8 |  4.91588e-08
329 |   8.9e-8 |  4.73629e-08
330 |  -8.6e-8 |  4.56326e-08
331 |   8.3e-8 |  4.39655e-08
332 |    -8e-8 |  4.23594e-08
333 |   7.7e-8 |  4.08119e-08
334 |  -7.4e-8 |  3.93209e-08
335 |   7.1e-8 |  3.78844e-08
336 |  -6.9e-8 |  3.65004e-08
337 |   6.6e-8 |  3.51669e-08
338 |  -6.4e-8 |  3.38822e-08
339 |   6.1e-8 |  3.26444e-08
340 |  -5.9e-8 |  3.14518e-08
341 |   5.7e-8 |  3.03027e-08
342 |  -5.5e-8 |  2.91957e-08
343 |   5.3e-8 |  2.81291e-08
344 |  -5.1e-8 |  2.71015e-08
345 |   4.9e-8 |  2.61114e-08
346 |  -4.7e-8 |  2.51575e-08
347 |   4.6e-8 |  2.42384e-08
348 |  -4.4e-8 |  2.33529e-08
349 |   4.2e-8 |  2.24997e-08
350 |  -4.1e-8 |  2.16778e-08
351 |   3.9e-8 |  2.08858e-08
352 |  -3.8e-8 |  2.01228e-08
353 |   3.6e-8 |  1.93877e-08
354 |  -3.5e-8 |  1.86794e-08
355 |   3.4e-8 |   1.7997e-08
356 |  -3.3e-8 |  1.73395e-08
357 |   3.1e-8 |   1.6706e-08
358 |    -3e-8 |  1.60957e-08
359 |   2.9e-8 |  1.55077e-08
360 |  -2.8e-8 |  1.49412e-08
361 |   2.7e-8 |  1.43953e-08
362 |  -2.6e-8 |  1.38694e-08
363 |   2.5e-8 |  1.33627e-08
364 |  -2.4e-8 |  1.28745e-08
365 |   2.3e-8 |  1.24042e-08
366 |  -2.2e-8 |   1.1951e-08
367 |   2.2e-8 |  1.15144e-08
368 |  -2.1e-8 |  1.10938e-08
369 |     2e-8 |  1.06885e-08
370 |  -1.9e-8 |   1.0298e-08
371 |   1.9e-8 |   9.9218e-09
372 |  -1.8e-8 |  9.55933e-09
373 |   1.7e-8 |   9.2101e-09
374 |  -1.7e-8 |  8.87363e-09
375 |   1.6e-8 |  8.54945e-09
376 |  -1.5e-8 |  8.23712e-09
377 |   1.5e-8 |  7.93619e-09
378 |  -1.4e-8 |  7.64626e-09
379 |   1.4e-8 |  7.36692e-09
380 |  -1.3e-8 |  7.09779e-09
381 |   1.3e-8 |  6.83849e-09
382 |  -1.2e-8 |  6.58866e-09
383 |   1.2e-8 |  6.34796e-09
384 |  -1.1e-8 |  6.11605e-09
385 |   1.1e-8 |  5.89261e-09
386 |  -1.1e-8 |  5.67734e-09
387 |     1e-8 |  5.46993e-09
388 |  -9.9e-9 |   5.2701e-09
389 |   9.5e-9 |  5.07757e-09
390 |  -9.2e-9 |  4.89207e-09
391 |   8.9e-9 |  4.71335e-09
392 |  -8.5e-9 |  4.54116e-09
393 |   8.2e-9 |  4.37526e-09
394 |  -7.9e-9 |  4.21541e-09
395 |   7.6e-9 |  4.06141e-09
396 |  -7.3e-9 |  3.91304e-09
397 |   7.1e-9 |  3.77009e-09
398 |  -6.8e-9 |  3.63235e-09
399 |   6.6e-9 |  3.49965e-09
400 |  -6.3e-9 |   3.3718e-09
401 |   6.1e-9 |  3.24862e-09
402 |  -5.9e-9 |  3.12994e-09
403 |   5.7e-9 |  3.01559e-09
404 |  -5.5e-9 |  2.90543e-09
405 |   5.3e-9 |  2.79928e-09
406 |  -5.1e-9 |  2.69702e-09
407 |   4.9e-9 |  2.59849e-09
408 |  -4.7e-9 |  2.50356e-09
409 |   4.5e-9 |   2.4121e-09
410 |  -4.4e-9 |  2.32397e-09
411 |   4.2e-9 |  2.23907e-09
412 |  -4.1e-9 |  2.15727e-09
413 |   3.9e-9 |  2.07846e-09
414 |  -3.8e-9 |  2.00253e-09
415 |   3.6e-9 |  1.92937e-09
416 |  -3.5e-9 |  1.85889e-09
417 |   3.4e-9 |  1.79098e-09
418 |  -3.2e-9 |  1.72555e-09
419 |   3.1e-9 |  1.66251e-09
420 |    -3e-9 |  1.60177e-09
421 |   2.9e-9 |  1.54326e-09
422 |  -2.8e-9 |  1.48688e-09
423 |   2.7e-9 |  1.43256e-09
424 |  -2.6e-9 |  1.38022e-09
425 |   2.5e-9 |   1.3298e-09
426 |  -2.4e-9 |  1.28122e-09
427 |   2.3e-9 |  1.23441e-09
428 |  -2.2e-9 |  1.18932e-09
429 |   2.2e-9 |  1.14587e-09
430 |  -2.1e-9 |    1.104e-09
431 |     2e-9 |  1.06367e-09
432 |  -1.9e-9 |  1.02481e-09
433 |   1.9e-9 |  9.87375e-10
434 |  -1.8e-9 |  9.51303e-10
435 |   1.7e-9 |  9.16549e-10
436 |  -1.7e-9 |  8.83065e-10
437 |   1.6e-9 |  8.50805e-10
438 |  -1.5e-9 |  8.19722e-10
439 |   1.5e-9 |  7.89776e-10
440 |  -1.4e-9 |  7.60923e-10
441 |   1.4e-9 |  7.33124e-10
442 |  -1.3e-9 |  7.06341e-10
443 |   1.3e-9 |  6.80536e-10
444 |  -1.2e-9 |  6.55675e-10
445 |   1.2e-9 |  6.31721e-10
446 |  -1.1e-9 |  6.08643e-10
447 |   1.1e-9 |  5.86407e-10
448 |  -1.1e-9 |  5.64984e-10
449 |     1e-9 |  5.44344e-10
450 | -9.8e-10 |  5.24458e-10
451 |  9.5e-10 |  5.05298e-10
452 | -9.1e-10 |  4.86838e-10
453 |  8.8e-10 |  4.69053e-10
454 | -8.5e-10 |  4.51917e-10
455 |  8.2e-10 |  4.35407e-10
456 | -7.9e-10 |    4.195e-10
457 |  7.6e-10 |  4.04175e-10
458 | -7.3e-10 |  3.89409e-10
459 |    7e-10 |  3.75183e-10
460 | -6.8e-10 |  3.61477e-10
461 |  6.5e-10 |  3.48271e-10
462 | -6.3e-10 |  3.35547e-10
463 |  6.1e-10 |  3.23289e-10
464 | -5.8e-10 |  3.11478e-10
465 |  5.6e-10 |  3.00099e-10
466 | -5.4e-10 |  2.89136e-10
467 |  5.2e-10 |  2.78573e-10
468 |   -5e-10 |  2.68396e-10
469 |  4.9e-10 |  2.58591e-10
470 | -4.7e-10 |  2.49144e-10
471 |  4.5e-10 |  2.40042e-10
472 | -4.3e-10 |  2.31273e-10
473 |  4.2e-10 |  2.22824e-10
474 |   -4e-10 |  2.14684e-10
475 |  3.9e-10 |  2.06841e-10
476 | -3.7e-10 |  1.99284e-10
477 |  3.6e-10 |  1.92004e-10
478 | -3.5e-10 |  1.84989e-10
479 |  3.3e-10 |  1.78231e-10
480 | -3.2e-10 |   1.7172e-10
481 |  3.1e-10 |  1.65447e-10
482 |   -3e-10 |  1.59402e-10
483 |  2.9e-10 |  1.53579e-10
484 | -2.8e-10 |  1.47968e-10
485 |  2.7e-10 |  1.42562e-10
486 | -2.6e-10 |  1.37354e-10
487 |  2.5e-10 |  1.32336e-10
488 | -2.4e-10 |  1.27501e-10
489 |  2.3e-10 |  1.22843e-10
490 | -2.2e-10 |  1.18355e-10
491 |  2.1e-10 |  1.14031e-10
492 | -2.1e-10 |  1.09865e-10
493 |    2e-10 |  1.05852e-10
494 | -1.9e-10 |  1.01985e-10
495 |  1.8e-10 |  9.82586e-11
> ## slow convergence
> stopifnot(okFit(rm2))
> 
> 
> ###>> 2 ------------------- family = binomial -----------------------------------
> 
> ## Using  *factor*  y ...
> x <- seq(0,5, length = 120)
> summary(px <- plogis(-5 + 2*x))
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.006693 0.075900 0.500000 0.500000 0.924100 0.993300 
> set.seed(7)
> (f <- factor(rbinom(length(x), 1, prob=px)))
  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0
 [38] 0 0 0 0 0 0 0 1 0 0 1 1 1 0 1 1 0 1 0 0 0 0 0 1 1 0 0 1 0 1 1 1 1 1 1 0 1
 [75] 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[112] 1 1 1 1 1 1 1 1 1
Levels: 0 1
> 
> summary(m.c0 <- glm   (f ~ x, family = binomial))

Call:
glm(formula = f ~ x, family = binomial)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.9866  -0.5378   0.1659   0.4669   2.3362  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -3.9428     0.7259  -5.431 5.59e-08 ***
x             1.6943     0.2869   5.906 3.50e-09 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 165.822  on 119  degrees of freedom
Residual deviance:  87.395  on 118  degrees of freedom
AIC: 91.395

Number of Fisher Scoring iterations: 5

> summary(m.r0 <- glmrob(f ~ x, family = binomial))

Call:  glmrob(formula = f ~ x, family = binomial) 


Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -3.8800     0.7779  -4.988 6.10e-07 ***
x             1.6341     0.3044   5.369 7.91e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
Robustness weights w.r * w.x: 
 110 weights are ~= 1. The remaining 10 ones are
    19     23     25     29     45     48     73     80     81     82 
0.3586 0.4113 0.4406 0.5054 0.8754 0.9704 0.7903 0.6215 0.6005 0.5802 

Number of observations: 120 
Fitted by method 'Mqle'  (in 4 iterations)

(Dispersion parameter for binomial family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.3450 
maxit 
   50 
test.acc 
  "coef" 

> 
> ## add outliers --- in y:
> f. <- f
> f.[i1 <- 2:3] <- 1
> f.[i0 <- 110+c(1,7)] <- 0
>         m.c1 <- glm   (f. ~ x, family = binomial)
> summary(m.r1 <- glmrob(f. ~ x, family = binomial)) ## hmm, not so robust?

Call:  glmrob(formula = f. ~ x, family = binomial) 


Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -3.1082     0.6269  -4.958 7.12e-07 ***
x             1.3162     0.2402   5.479 4.29e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
Robustness weights w.r * w.x: 
 107 weights are ~= 1. The remaining 13 ones are summarized as
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.2574  0.3039  0.5521  0.5563  0.6966  0.9598 

Number of observations: 120 
Fitted by method 'Mqle'  (in 5 iterations)

(Dispersion parameter for binomial family taken to be 1)

No deviance values available 
Algorithmic parameters: 
   acc    tcc 
0.0001 1.3450 
maxit 
   50 
test.acc 
  "coef" 

> stopifnot(m.r1$w.r[c(i0,i1)] < 1/3, # well, at least down weighted
+ 	  ## and coefficients change less :
+ 	  (coef(m.r1) - coef(m.c0)) / (coef(m.c1) - coef(m.c0)) < 1)
> assert.EQ(c("(Intercept)" = -3.10817337603974, x = 1.31618564057790),
+ 	  coef(m.r1), tol= 1e-14, giveRE=TRUE)
Mean relative difference: 6.022421e-16
> 
> y <- as.numeric(as.character(f.))
> m.r2  <- BYlogreg(x0=x, y=y, trace=TRUE, maxhalf= 10)
k= 1, s1=  0.34255783: => new s1=   0.31673535
k= 2, s1=  0.31673535: => new s1=   0.30965429
k= 3, s1=  0.30965429: => new s1=   0.31134409
Convergence Achieved
> m.r2A <- BYlogreg(x0=x, y=y, trace= 2  , maxhalf= 15)
k= 1, s1=  0.34255783: => new s1=   0.31673535, obj= 0.544734224: 
  jh= 1, hstep=          0.5 => new obj=  0.968449422
  jh= 2, hstep=         0.25 => new obj=  0.721112749
  jh= 3, hstep=        0.125 => new obj=  0.582862929
  jh= 4, hstep=       0.0625 => new obj=  0.552239517
  jh= 5, hstep=      0.03125 => new obj=  0.546125983
  jh= 6, hstep=     0.015625 => new obj=  0.544900448
  jh= 7, hstep=    0.0078125 => new obj=  0.544692433
k= 2, s1=  0.31673535: => new s1=   0.30965429, obj= 0.544674745: 
  jh= 1, hstep=          0.5 => new obj=  0.699044068
  jh= 2, hstep=         0.25 => new obj=  0.611232275
  jh= 3, hstep=        0.125 => new obj=  0.567137872
  jh= 4, hstep=       0.0625 => new obj=  0.551165685
  jh= 5, hstep=      0.03125 => new obj=  0.546354383
  jh= 6, hstep=     0.015625 => new obj=  0.545068151
  jh= 7, hstep=    0.0078125 => new obj=  0.544752043
  jh= 8, hstep=   0.00390625 => new obj=   0.54468258
  jh= 9, hstep=  0.001953125 => new obj=  0.544670853
k= 3, s1=  0.30965429: => new s1=   0.31134409, obj= 0.544669825: 
  jh= 1, hstep=          0.5 => new obj=  0.977985364
  jh= 2, hstep=         0.25 => new obj=  0.732177489
  jh= 3, hstep=        0.125 => new obj=  0.587549933
  jh= 4, hstep=       0.0625 => new obj=  0.553913233
  jh= 5, hstep=      0.03125 => new obj=    0.5467962
  jh= 6, hstep=     0.015625 => new obj=  0.545173095
  jh= 7, hstep=    0.0078125 => new obj=  0.544789191
  jh= 8, hstep=   0.00390625 => new obj=  0.544697478
  jh= 9, hstep=  0.001953125 => new obj=  0.544675771
  jh=10, hstep= 0.0009765625 => new obj=  0.544670839
  jh=11, hstep=0.00048828125 => new obj=  0.544669844
  jh=12, hstep=0.00024414062 => new obj=  0.544669713
k= 4, s1=  0.31134409: => new s1=   0.31112977, obj= 0.544669696: 
  jh= 1, hstep=          0.5 => new obj=  0.978373379
  jh= 2, hstep=         0.25 => new obj=  0.732641189
  jh= 3, hstep=        0.125 => new obj=   0.58775415
  jh= 4, hstep=       0.0625 => new obj=  0.553988479
  jh= 5, hstep=      0.03125 => new obj=  0.546828008
  jh= 6, hstep=     0.015625 => new obj=  0.545187648
  jh= 7, hstep=    0.0078125 => new obj=  0.544796093
  jh= 8, hstep=   0.00390625 => new obj=  0.544700782
  jh= 9, hstep=  0.001953125 => new obj=  0.544677343
  jh=10, hstep= 0.0009765625 => new obj=  0.544671557
  jh=11, hstep=0.00048828125 => new obj=  0.544670138
  jh=12, hstep=0.00024414062 => new obj=  0.544669795
  jh=13, hstep=0.00012207031 => new obj=  0.544669715
  jh=14, hstep=6.1035156e-05 => new obj=  0.544669698
  jh=15, hstep=3.0517578e-05 => new obj=  0.544669695
k= 5, s1=  0.31112977: => new s1=   0.31110309, obj= 0.544669695: 
  jh= 1, hstep=          0.5 => new obj=  0.699105497
  jh= 2, hstep=         0.25 => new obj=  0.611555159
  jh= 3, hstep=        0.125 => new obj=  0.567491276
  jh= 4, hstep=       0.0625 => new obj=  0.551421622
  jh= 5, hstep=      0.03125 => new obj=  0.546506517
  jh= 6, hstep=     0.015625 => new obj=  0.545149258
  jh= 7, hstep=    0.0078125 => new obj=  0.544792088
  jh= 8, hstep=   0.00390625 => new obj=  0.544700561
  jh= 9, hstep=  0.001953125 => new obj=   0.54467743
  jh=10, hstep= 0.0009765625 => new obj=  0.544671626
  jh=11, hstep=0.00048828125 => new obj=  0.544670175
  jh=12, hstep=0.00024414062 => new obj=  0.544669814
  jh=13, hstep=0.00012207031 => new obj=  0.544669724
  jh=14, hstep=6.1035156e-05 => new obj=  0.544669702
  jh=15, hstep=3.0517578e-05 => new obj=  0.544669697
Convergence Achieved
> ## different.. but not so much:
> iB <- 1:5
> assert.EQ(m.r2A[iB], m.r2[iB], tol = .003, giveRE=TRUE)
Component "objective": Mean relative difference: 2.378848e-07
Component "coefficients": Mean relative difference: 0.0006633953
Component "cov": Mean relative difference: 0.002200777
Component "sterror": Mean relative difference: 0.001061052
> 
> 
> assert.EQ(c("Intercept" = -2.9554950286, x = 1.2574679132),
+           ## 32-bit{ada-5}  -2.95549502890363   1.25746791332613
+ 	  m.r2$coef, tol=8e-10, giveRE=TRUE)# seen 5.316e-10   for --disable-long-double
Mean relative difference: 1.436098e-11
> assert.EQ( c(0.685919891749065, 0.256419206157062),
+           ## 32-bit{ada-5}:
+           ## 0.685919891858219, 0.256419206203016)
+ 	  m.r2$sterror, tol=4e-9)# seen 1.025e-9   for --disable-long-double
> 
> data(foodstamp)
> str(foodstamp)
'data.frame':	150 obs. of  4 variables:
 $ participation: int  0 0 0 0 0 0 0 0 0 0 ...
 $ tenancy      : int  1 1 1 1 0 1 1 1 0 1 ...
 $ suppl.income : int  0 0 1 0 0 0 0 0 0 0 ...
 $ income       : int  271 287 714 521 0 518 458 1266 350 168 ...
> ## Model with 'income' instead of log(income+1)  is "interesting"
> ## because BYlogreg() needs  maxhalf > 10 for convergence!
> m.fs0   <- glm   (participation ~ ., family=binomial, data=foodstamp)
> m.fs0QL <- glmrob(participation ~ ., family=binomial, data=foodstamp)
> y.fs <- foodstamp[,"participation"]
> X.fs0 <- model.matrix(m.fs0)
> head(X.fs0)
  (Intercept) tenancy suppl.income income
1           1       1            0    271
2           1       1            0    287
3           1       1            1    714
4           1       1            0    521
5           1       0            0      0
6           1       1            0    518
> ## (former default) maxhalf = 10  leads to too early convergence:
> m.fsWBY. <- BYlogreg(x0=X.fs0, y=y.fs,
+                      addIntercept=FALSE, trace=TRUE, maxhalf=10)
k= 1, s1=   0.4817573: => new s1=   0.51398644
Convergence Achieved
> m.fs.BY. <- BYlogreg(x0=X.fs0, y=y.fs, initwml=FALSE,
+                      addIntercept=FALSE, trace=TRUE, maxhalf=10)
k= 1, s1=   0.5119608: => new s1=   0.51098755
Convergence Achieved
> m.fsWBY <- BYlogreg(x0=X.fs0, y=y.fs,
+ 		    addIntercept=FALSE, trace=TRUE, maxhalf=18)
k= 1, s1=   0.4817573: => new s1=   0.51398644
k= 2, s1=  0.51398644: => new s1=   0.54053295
k= 3, s1=  0.54053295: => new s1=   0.54222535
k= 4, s1=  0.54222535: => new s1=   0.54307165
k= 5, s1=  0.54307165: => new s1=   0.54391936
Convergence Achieved
> m.fs.BY <- BYlogreg(x0=X.fs0, y=y.fs, initwml=FALSE,
+ 		    addIntercept=FALSE, trace=TRUE, maxhalf=18)
k= 1, s1=   0.5119608: => new s1=   0.51098755
k= 2, s1=  0.51098755: => new s1=   0.52513485
k= 3, s1=  0.52513485: => new s1=   0.53948806
k= 4, s1=  0.53948806: => new s1=   0.54129516
k= 5, s1=  0.54129516: => new s1=   0.54310324
Convergence Achieved
> 
> assert.EQ(m.fsWBY.[iB], m.fsWBY[iB], tol= 0.07)## almost 7% different
> assert.EQ(m.fs.BY.[iB], m.fs.BY[iB], tol= 0.08)
> 
> foodSt <- within(foodstamp, { logInc <- log(1 + income) ; rm(income) })
> 
> m.fsML <- glm   (participation ~ ., family=binomial, data=foodSt)
> m.fsQL <- glmrob(participation ~ ., family=binomial, data=foodSt)
> X.fs <- model.matrix(m.fsML)
> stopifnot(dim(X.fs) == c(150, 4)) # including intercept!
> try(## FIXME -- Mahalanobis fails with singular matrix, here:
+ m.fsWBY <- BYlogreg(x0=X.fs, y=y.fs,
+ 		    addIntercept=FALSE, trace=TRUE, maxhalf=18)
+ )
Error in .MCDsingularityMsg(ans$singularity, ans$n.obs) : 
  illegal 'singularity$kind'
> ## maxhalf=18 is too much --> no convergence (in 1000 steps)
> m.fs.BY <- BYlogreg(x0=X.fs, y=y.fs, initwml=FALSE,
+ 		    addIntercept=FALSE, trace=TRUE, maxhalf=18)
k= 1, s1=  0.43873492: => new s1=   0.45207408
k= 2, s1=  0.45207408: => new s1=   0.45506753
k= 3, s1=  0.45506753: => new s1=   0.45799437
k= 4, s1=  0.45799437: => new s1=   0.46031985
k= 5, s1=  0.46031985: => new s1=   0.45881914
k= 6, s1=  0.45881914: => new s1=   0.45751193
k= 7, s1=  0.45751193: => new s1=   0.45932755
k= 8, s1=  0.45932755: => new s1=   0.45785408
k= 9, s1=  0.45785408: => new s1=   0.45710538
k=10, s1=  0.45710538: => new s1=   0.45793622
k=11, s1=  0.45793622: => new s1=   0.45742459
k=12, s1=  0.45742459: => new s1=   0.45768295
k=13, s1=  0.45768295: => new s1=   0.45691252
k=14, s1=  0.45691252: => new s1=   0.45614994
k=15, s1=  0.45614994: => new s1=   0.45599689
k=16, s1=  0.45599689: => new s1=     0.456283
k=17, s1=    0.456283: => new s1=    0.4566652
k=18, s1=   0.4566652: => new s1=   0.45673288
k=19, s1=  0.45673288: => new s1=   0.45712816
k=20, s1=  0.45712816: => new s1=     0.457046
k=21, s1=    0.457046: => new s1=   0.45694208
k=22, s1=  0.45694208: => new s1=   0.45707258
k=23, s1=  0.45707258: => new s1=   0.45695633
k=24, s1=  0.45695633: => new s1=   0.45702514
k=25, s1=  0.45702514: => new s1=   0.45768613
k=26, s1=  0.45768613: => new s1=   0.45776578
k=27, s1=  0.45776578: => new s1=   0.45792896
k=28, s1=  0.45792896: => new s1=    0.4578462
k=29, s1=   0.4578462: => new s1=   0.45774933
k=30, s1=  0.45774933: => new s1=   0.45786239
k=31, s1=  0.45786239: => new s1=   0.45774015
k=32, s1=  0.45774015: => new s1=   0.45780439
k=33, s1=  0.45780439: => new s1=   0.45767269
k=34, s1=  0.45767269: => new s1=   0.45785219
k=35, s1=  0.45785219: => new s1=   0.45833126
k=36, s1=  0.45833126: => new s1=   0.45823954
k=37, s1=  0.45823954: => new s1=   0.45820664
k=38, s1=  0.45820664: => new s1=   0.45806666
k=39, s1=  0.45806666: => new s1=    0.4584527
k=40, s1=   0.4584527: => new s1=   0.45864586
k=41, s1=  0.45864586: => new s1=   0.45874219
k=42, s1=  0.45874219: => new s1=   0.45883716
k=43, s1=  0.45883716: => new s1=   0.45886651
k=44, s1=  0.45886651: => new s1=   0.45881751
k=45, s1=  0.45881751: => new s1=    0.4588611
k=46, s1=   0.4588611: => new s1=   0.45892162
k=47, s1=  0.45892162: => new s1=   0.45888187
k=48, s1=  0.45888187: => new s1=   0.45875476
k=49, s1=  0.45875476: => new s1=    0.4589479
k=50, s1=   0.4589479: => new s1=   0.45899512
k=51, s1=  0.45899512: => new s1=   0.45903834
k=52, s1=  0.45903834: => new s1=   0.45921815
k=53, s1=  0.45921815: => new s1=   0.45917182
k=54, s1=  0.45917182: => new s1=   0.45912912
k=55, s1=  0.45912912: => new s1=   0.45908411
k=56, s1=  0.45908411: => new s1=   0.45912852
k=57, s1=  0.45912852: => new s1=    0.4592189
k=58, s1=   0.4592189: => new s1=   0.45917417
k=59, s1=  0.45917417: => new s1=   0.45914386
k=60, s1=  0.45914386: => new s1=   0.45919105
k=61, s1=  0.45919105: => new s1=   0.45915371
k=62, s1=  0.45915371: => new s1=   0.45918838
k=63, s1=  0.45918838: => new s1=   0.45915658
k=64, s1=  0.45915658: => new s1=   0.45920345
k=65, s1=  0.45920345: => new s1=   0.45916608
k=66, s1=  0.45916608: => new s1=   0.45920159
k=67, s1=  0.45920159: => new s1=   0.45916907
k=68, s1=  0.45916907: => new s1=   0.45921607
k=69, s1=  0.45921607: => new s1=   0.45917853
k=70, s1=  0.45917853: => new s1=   0.45921434
k=71, s1=  0.45921434: => new s1=    0.4591815
k=72, s1=   0.4591815: => new s1=   0.45922894
k=73, s1=  0.45922894: => new s1=    0.4591911
k=74, s1=   0.4591911: => new s1=   0.45922657
k=75, s1=  0.45922657: => new s1=   0.45919373
k=76, s1=  0.45919373: => new s1=   0.45924192
k=77, s1=  0.45924192: => new s1=   0.45920372
k=78, s1=  0.45920372: => new s1=   0.45923852
k=79, s1=  0.45923852: => new s1=   0.45920591
k=80, s1=  0.45920591: => new s1=   0.45921452
k=81, s1=  0.45921452: => new s1=    0.4592067
k=82, s1=   0.4592067: => new s1=   0.45923661
k=83, s1=  0.45923661: => new s1=   0.45922822
k=84, s1=  0.45922822: => new s1=   0.45923686
k=85, s1=  0.45923686: => new s1=   0.45922741
k=86, s1=  0.45922741: => new s1=   0.45923623
k=87, s1=  0.45923623: => new s1=   0.45922704
k=88, s1=  0.45922704: => new s1=   0.45923617
k=89, s1=  0.45923617: => new s1=   0.45922725
k=90, s1=  0.45922725: => new s1=   0.45923664
k=91, s1=  0.45923664: => new s1=   0.45922793
k=92, s1=  0.45922793: => new s1=   0.45923752
k=93, s1=  0.45923752: => new s1=   0.45922897
k=94, s1=  0.45922897: => new s1=   0.45923872
k=95, s1=  0.45923872: => new s1=    0.4592303
k=96, s1=   0.4592303: => new s1=   0.45924016
k=97, s1=  0.45924016: => new s1=   0.45923183
k=98, s1=  0.45923183: => new s1=   0.45924179
k=99, s1=  0.45924179: => new s1=   0.45923353
k=100, s1=  0.45923353: => new s1=   0.45924356
k=101, s1=  0.45924356: => new s1=   0.45923536
k=102, s1=  0.45923536: => new s1=   0.45926417
k=103, s1=  0.45926417: => new s1=   0.45925425
k=104, s1=  0.45925425: => new s1=   0.45926248
k=105, s1=  0.45926248: => new s1=   0.45925272
k=106, s1=  0.45925272: => new s1=   0.45926137
k=107, s1=  0.45926137: => new s1=   0.45925199
k=108, s1=  0.45925199: => new s1=   0.45926102
k=109, s1=  0.45926102: => new s1=   0.45925193
k=110, s1=  0.45925193: => new s1=   0.45926126
k=111, s1=  0.45926126: => new s1=   0.45925241
k=112, s1=  0.45925241: => new s1=   0.45926195
k=113, s1=  0.45926195: => new s1=   0.45925328
k=114, s1=  0.45925328: => new s1=   0.45926299
k=115, s1=  0.45926299: => new s1=   0.45925447
k=116, s1=  0.45925447: => new s1=    0.4592643
k=117, s1=   0.4592643: => new s1=   0.45925588
k=118, s1=  0.45925588: => new s1=   0.45926582
k=119, s1=  0.45926582: => new s1=   0.45925749
k=120, s1=  0.45925749: => new s1=    0.4592675
k=121, s1=   0.4592675: => new s1=   0.45925923
k=122, s1=  0.45925923: => new s1=   0.45928802
k=123, s1=  0.45928802: => new s1=   0.45925917
k=124, s1=  0.45925917: => new s1=   0.45926855
k=125, s1=  0.45926855: => new s1=   0.45926065
k=126, s1=  0.45926065: => new s1=   0.45929074
k=127, s1=  0.45929074: => new s1=   0.45928217
k=128, s1=  0.45928217: => new s1=   0.45929096
k=129, s1=  0.45929096: => new s1=   0.45928148
k=130, s1=  0.45928148: => new s1=    0.4592904
k=131, s1=   0.4592904: => new s1=   0.45928113
k=132, s1=  0.45928113: => new s1=   0.45929033
k=133, s1=  0.45929033: => new s1=   0.45928131
k=134, s1=  0.45928131: => new s1=   0.45929075
k=135, s1=  0.45929075: => new s1=   0.45928193
k=136, s1=  0.45928193: => new s1=   0.45929157
k=137, s1=  0.45929157: => new s1=   0.45928291
k=138, s1=  0.45928291: => new s1=    0.4592927
k=139, s1=   0.4592927: => new s1=   0.45928416
k=140, s1=  0.45928416: => new s1=   0.45929405
k=141, s1=  0.45929405: => new s1=    0.4592856
k=142, s1=   0.4592856: => new s1=    0.4592956
k=143, s1=   0.4592956: => new s1=   0.45928722
k=144, s1=  0.45928722: => new s1=   0.45929727
k=145, s1=  0.45929727: => new s1=   0.45928896
k=146, s1=  0.45928896: => new s1=   0.45931787
k=147, s1=  0.45931787: => new s1=   0.45928863
k=148, s1=  0.45928863: => new s1=   0.45929829
k=149, s1=  0.45929829: => new s1=   0.45929034
k=150, s1=  0.45929034: => new s1=   0.45932052
k=151, s1=  0.45932052: => new s1=   0.45931178
k=152, s1=  0.45931178: => new s1=   0.45932063
k=153, s1=  0.45932063: => new s1=   0.45931113
k=154, s1=  0.45931113: => new s1=    0.4593201
k=155, s1=   0.4593201: => new s1=   0.45931078
k=156, s1=  0.45931078: => new s1=   0.45932001
k=157, s1=  0.45932001: => new s1=   0.45931095
k=158, s1=  0.45931095: => new s1=   0.45932042
k=159, s1=  0.45932042: => new s1=   0.45931154
k=160, s1=  0.45931154: => new s1=    0.4593212
k=161, s1=   0.4593212: => new s1=   0.45931247
k=162, s1=  0.45931247: => new s1=   0.45932227
k=163, s1=  0.45932227: => new s1=   0.45931367
k=164, s1=  0.45931367: => new s1=   0.45932358
k=165, s1=  0.45932358: => new s1=   0.45931507
k=166, s1=  0.45931507: => new s1=   0.45932507
k=167, s1=  0.45932507: => new s1=   0.45931664
k=168, s1=  0.45931664: => new s1=    0.4593267
k=169, s1=   0.4593267: => new s1=   0.45931832
k=170, s1=  0.45931832: => new s1=   0.45934728
k=171, s1=  0.45934728: => new s1=   0.45931754
k=172, s1=  0.45931754: => new s1=   0.45932747
k=173, s1=  0.45932747: => new s1=    0.4593195
k=174, s1=   0.4593195: => new s1=   0.45934976
k=175, s1=  0.45934976: => new s1=   0.45934086
k=176, s1=  0.45934086: => new s1=   0.45934975
k=177, s1=  0.45934975: => new s1=   0.45934022
k=178, s1=  0.45934022: => new s1=   0.45934923
k=179, s1=  0.45934923: => new s1=   0.45933987
k=180, s1=  0.45933987: => new s1=   0.45934914
k=181, s1=  0.45934914: => new s1=   0.45934002
k=182, s1=  0.45934002: => new s1=   0.45934952
k=183, s1=  0.45934952: => new s1=   0.45934059
k=184, s1=  0.45934059: => new s1=   0.45935026
k=185, s1=  0.45935026: => new s1=   0.45934148
k=186, s1=  0.45934148: => new s1=    0.4593513
k=187, s1=   0.4593513: => new s1=   0.45934264
k=188, s1=  0.45934264: => new s1=   0.45935257
k=189, s1=  0.45935257: => new s1=   0.45934399
k=190, s1=  0.45934399: => new s1=   0.45935401
k=191, s1=  0.45935401: => new s1=   0.45934551
k=192, s1=  0.45934551: => new s1=   0.45937433
k=193, s1=  0.45937433: => new s1=    0.4593438
k=194, s1=   0.4593438: => new s1=   0.45937295
k=195, s1=  0.45937295: => new s1=    0.4593645
k=196, s1=   0.4593645: => new s1=   0.45936632
k=197, s1=  0.45936632: => new s1=   0.45935993
k=198, s1=  0.45935993: => new s1=   0.45936303
k=199, s1=  0.45936303: => new s1=   0.45932759
k=200, s1=  0.45932759: => new s1=   0.45937217
k=201, s1=  0.45937217: => new s1=   0.45928176
k=202, s1=  0.45928176: => new s1=   0.45947492
k=203, s1=  0.45947492: => new s1=   0.45957152
k=204, s1=  0.45957152: => new s1=   0.45966784
k=205, s1=  0.45966784: => new s1=   0.45967492
k=206, s1=  0.45967492: => new s1=   0.45967406
k=207, s1=  0.45967406: => new s1=   0.45968046
k=208, s1=  0.45968046: => new s1=   0.45967895
k=209, s1=  0.45967895: => new s1=   0.45968486
k=210, s1=  0.45968486: => new s1=   0.45968289
k=211, s1=  0.45968289: => new s1=   0.45968845
k=212, s1=  0.45968845: => new s1=   0.45968616
k=213, s1=  0.45968616: => new s1=   0.45969148
k=214, s1=  0.45969148: => new s1=   0.45968896
k=215, s1=  0.45968896: => new s1=   0.45969409
k=216, s1=  0.45969409: => new s1=   0.45969142
k=217, s1=  0.45969142: => new s1=   0.45969642
k=218, s1=  0.45969642: => new s1=   0.45969364
k=219, s1=  0.45969364: => new s1=   0.45969855
k=220, s1=  0.45969855: => new s1=   0.45969569
k=221, s1=  0.45969569: => new s1=   0.45970054
k=222, s1=  0.45970054: => new s1=   0.45969761
k=223, s1=  0.45969761: => new s1=   0.45970241
k=224, s1=  0.45970241: => new s1=   0.45969943
k=225, s1=  0.45969943: => new s1=   0.45970421
k=226, s1=  0.45970421: => new s1=    0.4597012
k=227, s1=   0.4597012: => new s1=   0.45970594
k=228, s1=  0.45970594: => new s1=    0.4597029
k=229, s1=   0.4597029: => new s1=   0.45970765
k=230, s1=  0.45970765: => new s1=    0.4597046
k=231, s1=   0.4597046: => new s1=   0.45970932
k=232, s1=  0.45970932: => new s1=   0.45970625
k=233, s1=  0.45970625: => new s1=   0.45971097
k=234, s1=  0.45971097: => new s1=    0.4597079
k=235, s1=   0.4597079: => new s1=   0.45971261
k=236, s1=  0.45971261: => new s1=   0.45970952
k=237, s1=  0.45970952: => new s1=   0.45971424
k=238, s1=  0.45971424: => new s1=   0.45971114
k=239, s1=  0.45971114: => new s1=   0.45971585
k=240, s1=  0.45971585: => new s1=   0.45971274
k=241, s1=  0.45971274: => new s1=   0.45971746
k=242, s1=  0.45971746: => new s1=   0.45971434
k=243, s1=  0.45971434: => new s1=   0.45971906
k=244, s1=  0.45971906: => new s1=   0.45971594
k=245, s1=  0.45971594: => new s1=   0.45972066
k=246, s1=  0.45972066: => new s1=   0.45971753
k=247, s1=  0.45971753: => new s1=   0.45972225
k=248, s1=  0.45972225: => new s1=   0.45971911
k=249, s1=  0.45971911: => new s1=   0.45972383
k=250, s1=  0.45972383: => new s1=    0.4597207
k=251, s1=   0.4597207: => new s1=   0.45972542
k=252, s1=  0.45972542: => new s1=   0.45972228
k=253, s1=  0.45972228: => new s1=     0.459727
k=254, s1=    0.459727: => new s1=   0.45972385
k=255, s1=  0.45972385: => new s1=   0.45972858
k=256, s1=  0.45972858: => new s1=   0.45972542
k=257, s1=  0.45972542: => new s1=   0.45973015
k=258, s1=  0.45973015: => new s1=   0.45972699
k=259, s1=  0.45972699: => new s1=   0.45973172
k=260, s1=  0.45973172: => new s1=   0.45972855
k=261, s1=  0.45972855: => new s1=    0.4597333
k=262, s1=   0.4597333: => new s1=   0.45973012
k=263, s1=  0.45973012: => new s1=   0.45973487
k=264, s1=  0.45973487: => new s1=   0.45973169
k=265, s1=  0.45973169: => new s1=   0.45973644
k=266, s1=  0.45973644: => new s1=   0.45973326
k=267, s1=  0.45973326: => new s1=     0.459738
k=268, s1=    0.459738: => new s1=   0.45973482
k=269, s1=  0.45973482: => new s1=   0.45973958
k=270, s1=  0.45973958: => new s1=   0.45973639
k=271, s1=  0.45973639: => new s1=   0.45974113
k=272, s1=  0.45974113: => new s1=   0.45973794
k=273, s1=  0.45973794: => new s1=   0.45974269
k=274, s1=  0.45974269: => new s1=   0.45973949
k=275, s1=  0.45973949: => new s1=   0.45974424
k=276, s1=  0.45974424: => new s1=   0.45974104
k=277, s1=  0.45974104: => new s1=    0.4597458
k=278, s1=   0.4597458: => new s1=   0.45974259
k=279, s1=  0.45974259: => new s1=   0.45974735
k=280, s1=  0.45974735: => new s1=   0.45974413
k=281, s1=  0.45974413: => new s1=   0.45974889
k=282, s1=  0.45974889: => new s1=   0.45974568
k=283, s1=  0.45974568: => new s1=   0.45975045
k=284, s1=  0.45975045: => new s1=   0.45974723
k=285, s1=  0.45974723: => new s1=     0.459752
k=286, s1=    0.459752: => new s1=   0.45974877
k=287, s1=  0.45974877: => new s1=   0.45975355
k=288, s1=  0.45975355: => new s1=   0.45975031
k=289, s1=  0.45975031: => new s1=   0.45975509
k=290, s1=  0.45975509: => new s1=   0.45975185
k=291, s1=  0.45975185: => new s1=   0.45975662
k=292, s1=  0.45975662: => new s1=   0.45975338
k=293, s1=  0.45975338: => new s1=   0.45975817
k=294, s1=  0.45975817: => new s1=   0.45975492
k=295, s1=  0.45975492: => new s1=   0.45975969
k=296, s1=  0.45975969: => new s1=   0.45975644
k=297, s1=  0.45975644: => new s1=   0.45976122
k=298, s1=  0.45976122: => new s1=   0.45975797
k=299, s1=  0.45975797: => new s1=   0.45976276
k=300, s1=  0.45976276: => new s1=    0.4597595
k=301, s1=   0.4597595: => new s1=   0.45976428
k=302, s1=  0.45976428: => new s1=   0.45976102
k=303, s1=  0.45976102: => new s1=   0.45976581
k=304, s1=  0.45976581: => new s1=   0.45976255
k=305, s1=  0.45976255: => new s1=   0.45976734
k=306, s1=  0.45976734: => new s1=   0.45976407
k=307, s1=  0.45976407: => new s1=   0.45976886
k=308, s1=  0.45976886: => new s1=   0.45976559
k=309, s1=  0.45976559: => new s1=   0.45977038
k=310, s1=  0.45977038: => new s1=    0.4597671
k=311, s1=   0.4597671: => new s1=    0.4597719
k=312, s1=   0.4597719: => new s1=    0.4597686
k=313, s1=   0.4597686: => new s1=    0.4597734
k=314, s1=   0.4597734: => new s1=   0.45977011
k=315, s1=  0.45977011: => new s1=   0.45977491
k=316, s1=  0.45977491: => new s1=   0.45977162
k=317, s1=  0.45977162: => new s1=   0.45977643
k=318, s1=  0.45977643: => new s1=   0.45977313
k=319, s1=  0.45977313: => new s1=   0.45977794
k=320, s1=  0.45977794: => new s1=   0.45977463
k=321, s1=  0.45977463: => new s1=   0.45977944
k=322, s1=  0.45977944: => new s1=   0.45977614
k=323, s1=  0.45977614: => new s1=   0.45978095
k=324, s1=  0.45978095: => new s1=   0.45977763
k=325, s1=  0.45977763: => new s1=   0.45978245
k=326, s1=  0.45978245: => new s1=   0.45977915
k=327, s1=  0.45977915: => new s1=   0.45978396
k=328, s1=  0.45978396: => new s1=   0.45978064
k=329, s1=  0.45978064: => new s1=   0.45978545
k=330, s1=  0.45978545: => new s1=   0.45978213
k=331, s1=  0.45978213: => new s1=   0.45978695
k=332, s1=  0.45978695: => new s1=   0.45978362
k=333, s1=  0.45978362: => new s1=   0.45978845
k=334, s1=  0.45978845: => new s1=   0.45978511
k=335, s1=  0.45978511: => new s1=   0.45978994
k=336, s1=  0.45978994: => new s1=    0.4597866
k=337, s1=   0.4597866: => new s1=   0.45979143
k=338, s1=  0.45979143: => new s1=   0.45978809
k=339, s1=  0.45978809: => new s1=   0.45979292
k=340, s1=  0.45979292: => new s1=   0.45978957
k=341, s1=  0.45978957: => new s1=   0.45979441
k=342, s1=  0.45979441: => new s1=   0.45979105
k=343, s1=  0.45979105: => new s1=   0.45979589
k=344, s1=  0.45979589: => new s1=   0.45979253
k=345, s1=  0.45979253: => new s1=   0.45979737
k=346, s1=  0.45979737: => new s1=   0.45979401
k=347, s1=  0.45979401: => new s1=   0.45979885
k=348, s1=  0.45979885: => new s1=   0.45979548
k=349, s1=  0.45979548: => new s1=   0.45980032
k=350, s1=  0.45980032: => new s1=   0.45979695
k=351, s1=  0.45979695: => new s1=    0.4598018
k=352, s1=   0.4598018: => new s1=   0.45979843
k=353, s1=  0.45979843: => new s1=   0.45980327
k=354, s1=  0.45980327: => new s1=    0.4597999
k=355, s1=   0.4597999: => new s1=   0.45980475
k=356, s1=  0.45980475: => new s1=   0.45980136
k=357, s1=  0.45980136: => new s1=   0.45980621
k=358, s1=  0.45980621: => new s1=   0.45980283
k=359, s1=  0.45980283: => new s1=   0.45980769
k=360, s1=  0.45980769: => new s1=    0.4598043
k=361, s1=   0.4598043: => new s1=   0.45980915
k=362, s1=  0.45980915: => new s1=   0.45980576
k=363, s1=  0.45980576: => new s1=   0.45981062
k=364, s1=  0.45981062: => new s1=   0.45980722
k=365, s1=  0.45980722: => new s1=   0.45981208
k=366, s1=  0.45981208: => new s1=   0.45980867
k=367, s1=  0.45980867: => new s1=   0.45981353
k=368, s1=  0.45981353: => new s1=   0.45981013
k=369, s1=  0.45981013: => new s1=   0.45981498
k=370, s1=  0.45981498: => new s1=   0.45981158
k=371, s1=  0.45981158: => new s1=   0.45981644
k=372, s1=  0.45981644: => new s1=   0.45981303
k=373, s1=  0.45981303: => new s1=    0.4598179
k=374, s1=   0.4598179: => new s1=   0.45981448
k=375, s1=  0.45981448: => new s1=   0.45981935
k=376, s1=  0.45981935: => new s1=   0.45981593
k=377, s1=  0.45981593: => new s1=    0.4598208
k=378, s1=   0.4598208: => new s1=   0.45981738
k=379, s1=  0.45981738: => new s1=   0.45982224
k=380, s1=  0.45982224: => new s1=   0.45981881
k=381, s1=  0.45981881: => new s1=   0.45982369
k=382, s1=  0.45982369: => new s1=   0.45982025
k=383, s1=  0.45982025: => new s1=   0.45982512
k=384, s1=  0.45982512: => new s1=   0.45982169
k=385, s1=  0.45982169: => new s1=   0.45982656
k=386, s1=  0.45982656: => new s1=   0.45982312
k=387, s1=  0.45982312: => new s1=     0.459828
k=388, s1=    0.459828: => new s1=   0.45982455
k=389, s1=  0.45982455: => new s1=   0.45982943
k=390, s1=  0.45982943: => new s1=   0.45982598
k=391, s1=  0.45982598: => new s1=   0.45983086
k=392, s1=  0.45983086: => new s1=   0.45982741
k=393, s1=  0.45982741: => new s1=   0.45983229
k=394, s1=  0.45983229: => new s1=   0.45982883
k=395, s1=  0.45982883: => new s1=   0.45983372
k=396, s1=  0.45983372: => new s1=   0.45983026
k=397, s1=  0.45983026: => new s1=   0.45983515
k=398, s1=  0.45983515: => new s1=   0.45983168
k=399, s1=  0.45983168: => new s1=   0.45983658
k=400, s1=  0.45983658: => new s1=   0.45983311
k=401, s1=  0.45983311: => new s1=   0.45983801
k=402, s1=  0.45983801: => new s1=   0.45983453
k=403, s1=  0.45983453: => new s1=   0.45983943
k=404, s1=  0.45983943: => new s1=   0.45983595
k=405, s1=  0.45983595: => new s1=   0.45984085
k=406, s1=  0.45984085: => new s1=   0.45983737
k=407, s1=  0.45983737: => new s1=   0.45984227
k=408, s1=  0.45984227: => new s1=   0.45983878
k=409, s1=  0.45983878: => new s1=   0.45984368
k=410, s1=  0.45984368: => new s1=    0.4598402
k=411, s1=   0.4598402: => new s1=    0.4598451
k=412, s1=   0.4598451: => new s1=    0.4598416
k=413, s1=   0.4598416: => new s1=   0.45984651
k=414, s1=  0.45984651: => new s1=   0.45984301
k=415, s1=  0.45984301: => new s1=   0.45984792
k=416, s1=  0.45984792: => new s1=   0.45984442
k=417, s1=  0.45984442: => new s1=   0.45984933
k=418, s1=  0.45984933: => new s1=   0.45984583
k=419, s1=  0.45984583: => new s1=   0.45985074
k=420, s1=  0.45985074: => new s1=   0.45984724
k=421, s1=  0.45984724: => new s1=   0.45985215
k=422, s1=  0.45985215: => new s1=   0.45984864
k=423, s1=  0.45984864: => new s1=   0.45985355
k=424, s1=  0.45985355: => new s1=   0.45985003
k=425, s1=  0.45985003: => new s1=   0.45985495
k=426, s1=  0.45985495: => new s1=   0.45985143
k=427, s1=  0.45985143: => new s1=   0.45985634
k=428, s1=  0.45985634: => new s1=   0.45985282
k=429, s1=  0.45985282: => new s1=   0.45985774
k=430, s1=  0.45985774: => new s1=    0.4598542
k=431, s1=   0.4598542: => new s1=   0.45985912
k=432, s1=  0.45985912: => new s1=   0.45985559
k=433, s1=  0.45985559: => new s1=   0.45986051
k=434, s1=  0.45986051: => new s1=   0.45985698
k=435, s1=  0.45985698: => new s1=    0.4598619
k=436, s1=   0.4598619: => new s1=   0.45985836
k=437, s1=  0.45985836: => new s1=   0.45986329
k=438, s1=  0.45986329: => new s1=   0.45985975
k=439, s1=  0.45985975: => new s1=   0.45986467
k=440, s1=  0.45986467: => new s1=   0.45986113
k=441, s1=  0.45986113: => new s1=   0.45986606
k=442, s1=  0.45986606: => new s1=   0.45986251
k=443, s1=  0.45986251: => new s1=   0.45986744
k=444, s1=  0.45986744: => new s1=   0.45986389
k=445, s1=  0.45986389: => new s1=   0.45986881
k=446, s1=  0.45986881: => new s1=   0.45986526
k=447, s1=  0.45986526: => new s1=   0.45987019
k=448, s1=  0.45987019: => new s1=   0.45986664
k=449, s1=  0.45986664: => new s1=   0.45987157
k=450, s1=  0.45987157: => new s1=   0.45986801
k=451, s1=  0.45986801: => new s1=   0.45987295
k=452, s1=  0.45987295: => new s1=   0.45986939
k=453, s1=  0.45986939: => new s1=   0.45987433
k=454, s1=  0.45987433: => new s1=   0.45987076
k=455, s1=  0.45987076: => new s1=   0.45987569
k=456, s1=  0.45987569: => new s1=   0.45987212
k=457, s1=  0.45987212: => new s1=   0.45987706
k=458, s1=  0.45987706: => new s1=   0.45987349
k=459, s1=  0.45987349: => new s1=   0.45987843
k=460, s1=  0.45987843: => new s1=   0.45987484
k=461, s1=  0.45987484: => new s1=   0.45987979
k=462, s1=  0.45987979: => new s1=   0.45987621
k=463, s1=  0.45987621: => new s1=   0.45988115
k=464, s1=  0.45988115: => new s1=   0.45987756
k=465, s1=  0.45987756: => new s1=   0.45988251
k=466, s1=  0.45988251: => new s1=   0.45987892
k=467, s1=  0.45987892: => new s1=   0.45988386
k=468, s1=  0.45988386: => new s1=   0.45988027
k=469, s1=  0.45988027: => new s1=   0.45988522
k=470, s1=  0.45988522: => new s1=   0.45988162
k=471, s1=  0.45988162: => new s1=   0.45988657
k=472, s1=  0.45988657: => new s1=   0.45988296
k=473, s1=  0.45988296: => new s1=   0.45988792
k=474, s1=  0.45988792: => new s1=   0.45988431
k=475, s1=  0.45988431: => new s1=   0.45988927
k=476, s1=  0.45988927: => new s1=   0.45988566
k=477, s1=  0.45988566: => new s1=   0.45989062
k=478, s1=  0.45989062: => new s1=   0.45988701
k=479, s1=  0.45988701: => new s1=   0.45989197
k=480, s1=  0.45989197: => new s1=   0.45988836
k=481, s1=  0.45988836: => new s1=   0.45989331
k=482, s1=  0.45989331: => new s1=    0.4598897
k=483, s1=   0.4598897: => new s1=   0.45989466
k=484, s1=  0.45989466: => new s1=   0.45989104
k=485, s1=  0.45989104: => new s1=     0.459896
k=486, s1=    0.459896: => new s1=   0.45989237
k=487, s1=  0.45989237: => new s1=   0.45989734
k=488, s1=  0.45989734: => new s1=   0.45989371
k=489, s1=  0.45989371: => new s1=   0.45989867
k=490, s1=  0.45989867: => new s1=   0.45989504
k=491, s1=  0.45989504: => new s1=   0.45990001
k=492, s1=  0.45990001: => new s1=   0.45989637
k=493, s1=  0.45989637: => new s1=   0.45990134
k=494, s1=  0.45990134: => new s1=   0.45989771
k=495, s1=  0.45989771: => new s1=   0.45990268
k=496, s1=  0.45990268: => new s1=   0.45989903
k=497, s1=  0.45989903: => new s1=     0.459904
k=498, s1=    0.459904: => new s1=   0.45990035
k=499, s1=  0.45990035: => new s1=   0.45990533
k=500, s1=  0.45990533: => new s1=   0.45990168
k=501, s1=  0.45990168: => new s1=   0.45990666
k=502, s1=  0.45990666: => new s1=     0.459903
k=503, s1=    0.459903: => new s1=   0.45990797
k=504, s1=  0.45990797: => new s1=   0.45990432
k=505, s1=  0.45990432: => new s1=   0.45990929
k=506, s1=  0.45990929: => new s1=   0.45990564
k=507, s1=  0.45990564: => new s1=   0.45991061
k=508, s1=  0.45991061: => new s1=   0.45990695
k=509, s1=  0.45990695: => new s1=   0.45991193
k=510, s1=  0.45991193: => new s1=   0.45990827
k=511, s1=  0.45990827: => new s1=   0.45991325
k=512, s1=  0.45991325: => new s1=   0.45990958
k=513, s1=  0.45990958: => new s1=   0.45991457
k=514, s1=  0.45991457: => new s1=    0.4599109
k=515, s1=   0.4599109: => new s1=   0.45991588
k=516, s1=  0.45991588: => new s1=    0.4599122
k=517, s1=   0.4599122: => new s1=   0.45991718
k=518, s1=  0.45991718: => new s1=   0.45991351
k=519, s1=  0.45991351: => new s1=   0.45991849
k=520, s1=  0.45991849: => new s1=   0.45991481
k=521, s1=  0.45991481: => new s1=    0.4599198
k=522, s1=   0.4599198: => new s1=   0.45991611
k=523, s1=  0.45991611: => new s1=    0.4599211
k=524, s1=   0.4599211: => new s1=   0.45991741
k=525, s1=  0.45991741: => new s1=   0.45992241
k=526, s1=  0.45992241: => new s1=   0.45991871
k=527, s1=  0.45991871: => new s1=    0.4599237
k=528, s1=   0.4599237: => new s1=   0.45992001
k=529, s1=  0.45992001: => new s1=     0.459925
k=530, s1=    0.459925: => new s1=    0.4599213
k=531, s1=   0.4599213: => new s1=    0.4599263
k=532, s1=   0.4599263: => new s1=    0.4599226
k=533, s1=   0.4599226: => new s1=    0.4599276
k=534, s1=   0.4599276: => new s1=   0.45992389
k=535, s1=  0.45992389: => new s1=   0.45992889
k=536, s1=  0.45992889: => new s1=   0.45992518
k=537, s1=  0.45992518: => new s1=   0.45993018
k=538, s1=  0.45993018: => new s1=   0.45992647
k=539, s1=  0.45992647: => new s1=   0.45993147
k=540, s1=  0.45993147: => new s1=   0.45992776
k=541, s1=  0.45992776: => new s1=   0.45993276
k=542, s1=  0.45993276: => new s1=   0.45992904
k=543, s1=  0.45992904: => new s1=   0.45993404
k=544, s1=  0.45993404: => new s1=   0.45993032
k=545, s1=  0.45993032: => new s1=   0.45993533
k=546, s1=  0.45993533: => new s1=    0.4599316
k=547, s1=   0.4599316: => new s1=   0.45993661
k=548, s1=  0.45993661: => new s1=   0.45993287
k=549, s1=  0.45993287: => new s1=   0.45993788
k=550, s1=  0.45993788: => new s1=   0.45993416
k=551, s1=  0.45993416: => new s1=   0.45993916
k=552, s1=  0.45993916: => new s1=   0.45993543
k=553, s1=  0.45993543: => new s1=   0.45994044
k=554, s1=  0.45994044: => new s1=    0.4599367
k=555, s1=   0.4599367: => new s1=   0.45994172
k=556, s1=  0.45994172: => new s1=   0.45993798
k=557, s1=  0.45993798: => new s1=   0.45994299
k=558, s1=  0.45994299: => new s1=   0.45993925
k=559, s1=  0.45993925: => new s1=   0.45994427
k=560, s1=  0.45994427: => new s1=   0.45994052
k=561, s1=  0.45994052: => new s1=   0.45994554
k=562, s1=  0.45994554: => new s1=   0.45994179
k=563, s1=  0.45994179: => new s1=   0.45994681
k=564, s1=  0.45994681: => new s1=   0.45994305
k=565, s1=  0.45994305: => new s1=   0.45994807
k=566, s1=  0.45994807: => new s1=   0.45994431
k=567, s1=  0.45994431: => new s1=   0.45994933
k=568, s1=  0.45994933: => new s1=   0.45994557
k=569, s1=  0.45994557: => new s1=   0.45995059
k=570, s1=  0.45995059: => new s1=   0.45994684
k=571, s1=  0.45994684: => new s1=   0.45995186
k=572, s1=  0.45995186: => new s1=    0.4599481
k=573, s1=   0.4599481: => new s1=   0.45995312
k=574, s1=  0.45995312: => new s1=   0.45994935
k=575, s1=  0.45994935: => new s1=   0.45995437
k=576, s1=  0.45995437: => new s1=    0.4599506
k=577, s1=   0.4599506: => new s1=   0.45995563
k=578, s1=  0.45995563: => new s1=   0.45995186
k=579, s1=  0.45995186: => new s1=   0.45995688
k=580, s1=  0.45995688: => new s1=    0.4599531
k=581, s1=   0.4599531: => new s1=   0.45995813
k=582, s1=  0.45995813: => new s1=   0.45995435
k=583, s1=  0.45995435: => new s1=   0.45995938
k=584, s1=  0.45995938: => new s1=   0.45995559
k=585, s1=  0.45995559: => new s1=   0.45996062
k=586, s1=  0.45996062: => new s1=   0.45995683
k=587, s1=  0.45995683: => new s1=   0.45996186
k=588, s1=  0.45996186: => new s1=   0.45995808
k=589, s1=  0.45995808: => new s1=   0.45996312
k=590, s1=  0.45996312: => new s1=   0.45995932
k=591, s1=  0.45995932: => new s1=   0.45996435
k=592, s1=  0.45996435: => new s1=   0.45996056
k=593, s1=  0.45996056: => new s1=    0.4599656
k=594, s1=   0.4599656: => new s1=    0.4599618
k=595, s1=   0.4599618: => new s1=   0.45996683
k=596, s1=  0.45996683: => new s1=   0.45996303
k=597, s1=  0.45996303: => new s1=   0.45996806
k=598, s1=  0.45996806: => new s1=   0.45996426
k=599, s1=  0.45996426: => new s1=   0.45996929
k=600, s1=  0.45996929: => new s1=   0.45996549
k=601, s1=  0.45996549: => new s1=   0.45997053
k=602, s1=  0.45997053: => new s1=   0.45996672
k=603, s1=  0.45996672: => new s1=   0.45997176
k=604, s1=  0.45997176: => new s1=   0.45996795
k=605, s1=  0.45996795: => new s1=     0.459973
k=606, s1=    0.459973: => new s1=   0.45996918
k=607, s1=  0.45996918: => new s1=   0.45997423
k=608, s1=  0.45997423: => new s1=   0.45997041
k=609, s1=  0.45997041: => new s1=   0.45997546
k=610, s1=  0.45997546: => new s1=   0.45997164
k=611, s1=  0.45997164: => new s1=   0.45997668
k=612, s1=  0.45997668: => new s1=   0.45997286
k=613, s1=  0.45997286: => new s1=   0.45997791
k=614, s1=  0.45997791: => new s1=   0.45997408
k=615, s1=  0.45997408: => new s1=   0.45997913
k=616, s1=  0.45997913: => new s1=    0.4599753
k=617, s1=   0.4599753: => new s1=   0.45998034
k=618, s1=  0.45998034: => new s1=   0.45997651
k=619, s1=  0.45997651: => new s1=   0.45998156
k=620, s1=  0.45998156: => new s1=   0.45997773
k=621, s1=  0.45997773: => new s1=   0.45998279
k=622, s1=  0.45998279: => new s1=   0.45997895
k=623, s1=  0.45997895: => new s1=     0.459984
k=624, s1=    0.459984: => new s1=   0.45998016
k=625, s1=  0.45998016: => new s1=   0.45998521
k=626, s1=  0.45998521: => new s1=   0.45998137
k=627, s1=  0.45998137: => new s1=   0.45998642
k=628, s1=  0.45998642: => new s1=   0.45998258
k=629, s1=  0.45998258: => new s1=   0.45998763
k=630, s1=  0.45998763: => new s1=   0.45998378
k=631, s1=  0.45998378: => new s1=   0.45998884
k=632, s1=  0.45998884: => new s1=   0.45998498
k=633, s1=  0.45998498: => new s1=   0.45999004
k=634, s1=  0.45999004: => new s1=   0.45998618
k=635, s1=  0.45998618: => new s1=   0.45999124
k=636, s1=  0.45999124: => new s1=   0.45998738
k=637, s1=  0.45998738: => new s1=   0.45999244
k=638, s1=  0.45999244: => new s1=   0.45998858
k=639, s1=  0.45998858: => new s1=   0.45999364
k=640, s1=  0.45999364: => new s1=   0.45998978
k=641, s1=  0.45998978: => new s1=   0.45999484
k=642, s1=  0.45999484: => new s1=   0.45999097
k=643, s1=  0.45999097: => new s1=   0.45999603
k=644, s1=  0.45999603: => new s1=   0.45999217
k=645, s1=  0.45999217: => new s1=   0.45999723
k=646, s1=  0.45999723: => new s1=   0.45999336
k=647, s1=  0.45999336: => new s1=   0.45999842
k=648, s1=  0.45999842: => new s1=   0.45999455
k=649, s1=  0.45999455: => new s1=   0.45999962
k=650, s1=  0.45999962: => new s1=   0.45999574
k=651, s1=  0.45999574: => new s1=   0.46000081
k=652, s1=  0.46000081: => new s1=   0.45999693
k=653, s1=  0.45999693: => new s1=   0.46000199
k=654, s1=  0.46000199: => new s1=   0.45999811
k=655, s1=  0.45999811: => new s1=   0.46000318
k=656, s1=  0.46000318: => new s1=    0.4599993
k=657, s1=   0.4599993: => new s1=   0.46000437
k=658, s1=  0.46000437: => new s1=   0.46000048
k=659, s1=  0.46000048: => new s1=   0.46000555
k=660, s1=  0.46000555: => new s1=   0.46000166
k=661, s1=  0.46000166: => new s1=   0.46000673
k=662, s1=  0.46000673: => new s1=   0.46000284
k=663, s1=  0.46000284: => new s1=   0.46000791
k=664, s1=  0.46000791: => new s1=   0.46000401
k=665, s1=  0.46000401: => new s1=   0.46000909
k=666, s1=  0.46000909: => new s1=   0.46000519
k=667, s1=  0.46000519: => new s1=   0.46001026
k=668, s1=  0.46001026: => new s1=   0.46000636
k=669, s1=  0.46000636: => new s1=   0.46001143
k=670, s1=  0.46001143: => new s1=   0.46000753
k=671, s1=  0.46000753: => new s1=    0.4600126
k=672, s1=   0.4600126: => new s1=    0.4600087
k=673, s1=   0.4600087: => new s1=   0.46001377
k=674, s1=  0.46001377: => new s1=   0.46000987
k=675, s1=  0.46000987: => new s1=   0.46001494
k=676, s1=  0.46001494: => new s1=   0.46001103
k=677, s1=  0.46001103: => new s1=   0.46001611
k=678, s1=  0.46001611: => new s1=    0.4600122
k=679, s1=   0.4600122: => new s1=   0.46001728
k=680, s1=  0.46001728: => new s1=   0.46001336
k=681, s1=  0.46001336: => new s1=   0.46001844
k=682, s1=  0.46001844: => new s1=   0.46001453
k=683, s1=  0.46001453: => new s1=   0.46001961
k=684, s1=  0.46001961: => new s1=   0.46001568
k=685, s1=  0.46001568: => new s1=   0.46002077
k=686, s1=  0.46002077: => new s1=   0.46001684
k=687, s1=  0.46001684: => new s1=   0.46002192
k=688, s1=  0.46002192: => new s1=     0.460018
k=689, s1=    0.460018: => new s1=   0.46002309
k=690, s1=  0.46002309: => new s1=   0.46001915
k=691, s1=  0.46001915: => new s1=   0.46002424
k=692, s1=  0.46002424: => new s1=   0.46002031
k=693, s1=  0.46002031: => new s1=    0.4600254
k=694, s1=   0.4600254: => new s1=   0.46002146
k=695, s1=  0.46002146: => new s1=   0.46002655
k=696, s1=  0.46002655: => new s1=   0.46002262
k=697, s1=  0.46002262: => new s1=   0.46002771
k=698, s1=  0.46002771: => new s1=   0.46002376
k=699, s1=  0.46002376: => new s1=   0.46002885
k=700, s1=  0.46002885: => new s1=   0.46002491
k=701, s1=  0.46002491: => new s1=      0.46003
k=702, s1=     0.46003: => new s1=   0.46002605
k=703, s1=  0.46002605: => new s1=   0.46003115
k=704, s1=  0.46003115: => new s1=    0.4600272
k=705, s1=   0.4600272: => new s1=    0.4600323
k=706, s1=   0.4600323: => new s1=   0.46002835
k=707, s1=  0.46002835: => new s1=   0.46003344
k=708, s1=  0.46003344: => new s1=   0.46002948
k=709, s1=  0.46002948: => new s1=   0.46003457
k=710, s1=  0.46003457: => new s1=   0.46003061
k=711, s1=  0.46003061: => new s1=   0.46003571
k=712, s1=  0.46003571: => new s1=   0.46003174
k=713, s1=  0.46003174: => new s1=   0.46003684
k=714, s1=  0.46003684: => new s1=   0.46003288
k=715, s1=  0.46003288: => new s1=   0.46003798
k=716, s1=  0.46003798: => new s1=   0.46003402
k=717, s1=  0.46003402: => new s1=   0.46003911
k=718, s1=  0.46003911: => new s1=   0.46003515
k=719, s1=  0.46003515: => new s1=   0.46004024
k=720, s1=  0.46004024: => new s1=   0.46003627
k=721, s1=  0.46003627: => new s1=   0.46004137
k=722, s1=  0.46004137: => new s1=   0.46003741
k=723, s1=  0.46003741: => new s1=   0.46004251
k=724, s1=  0.46004251: => new s1=   0.46003853
k=725, s1=  0.46003853: => new s1=   0.46004363
k=726, s1=  0.46004363: => new s1=   0.46003966
k=727, s1=  0.46003966: => new s1=   0.46004476
k=728, s1=  0.46004476: => new s1=   0.46004078
k=729, s1=  0.46004078: => new s1=   0.46004588
k=730, s1=  0.46004588: => new s1=   0.46004191
k=731, s1=  0.46004191: => new s1=   0.46004701
k=732, s1=  0.46004701: => new s1=   0.46004303
k=733, s1=  0.46004303: => new s1=   0.46004814
k=734, s1=  0.46004814: => new s1=   0.46004415
k=735, s1=  0.46004415: => new s1=   0.46004925
k=736, s1=  0.46004925: => new s1=   0.46004527
k=737, s1=  0.46004527: => new s1=   0.46005038
k=738, s1=  0.46005038: => new s1=   0.46004638
k=739, s1=  0.46004638: => new s1=   0.46005149
k=740, s1=  0.46005149: => new s1=    0.4600475
k=741, s1=   0.4600475: => new s1=   0.46005261
k=742, s1=  0.46005261: => new s1=   0.46004861
k=743, s1=  0.46004861: => new s1=   0.46005372
k=744, s1=  0.46005372: => new s1=   0.46004971
k=745, s1=  0.46004971: => new s1=   0.46005483
k=746, s1=  0.46005483: => new s1=   0.46005082
k=747, s1=  0.46005082: => new s1=   0.46005594
k=748, s1=  0.46005594: => new s1=   0.46005193
k=749, s1=  0.46005193: => new s1=   0.46005704
k=750, s1=  0.46005704: => new s1=   0.46005303
k=751, s1=  0.46005303: => new s1=   0.46005814
k=752, s1=  0.46005814: => new s1=   0.46005413
k=753, s1=  0.46005413: => new s1=   0.46005925
k=754, s1=  0.46005925: => new s1=   0.46005524
k=755, s1=  0.46005524: => new s1=   0.46006036
k=756, s1=  0.46006036: => new s1=   0.46005635
k=757, s1=  0.46005635: => new s1=   0.46006146
k=758, s1=  0.46006146: => new s1=   0.46005745
k=759, s1=  0.46005745: => new s1=   0.46006257
k=760, s1=  0.46006257: => new s1=   0.46005854
k=761, s1=  0.46005854: => new s1=   0.46006366
k=762, s1=  0.46006366: => new s1=   0.46005965
k=763, s1=  0.46005965: => new s1=   0.46006476
k=764, s1=  0.46006476: => new s1=   0.46006073
k=765, s1=  0.46006073: => new s1=   0.46006585
k=766, s1=  0.46006585: => new s1=   0.46006183
k=767, s1=  0.46006183: => new s1=   0.46006696
k=768, s1=  0.46006696: => new s1=   0.46006293
k=769, s1=  0.46006293: => new s1=   0.46006805
k=770, s1=  0.46006805: => new s1=   0.46006402
k=771, s1=  0.46006402: => new s1=   0.46006915
k=772, s1=  0.46006915: => new s1=   0.46006511
k=773, s1=  0.46006511: => new s1=   0.46007023
k=774, s1=  0.46007023: => new s1=    0.4600662
k=775, s1=   0.4600662: => new s1=   0.46007132
k=776, s1=  0.46007132: => new s1=   0.46006728
k=777, s1=  0.46006728: => new s1=   0.46007241
k=778, s1=  0.46007241: => new s1=   0.46006837
k=779, s1=  0.46006837: => new s1=    0.4600735
k=780, s1=   0.4600735: => new s1=   0.46006945
k=781, s1=  0.46006945: => new s1=   0.46007458
k=782, s1=  0.46007458: => new s1=   0.46007053
k=783, s1=  0.46007053: => new s1=   0.46007566
k=784, s1=  0.46007566: => new s1=   0.46007162
k=785, s1=  0.46007162: => new s1=   0.46007674
k=786, s1=  0.46007674: => new s1=   0.46007269
k=787, s1=  0.46007269: => new s1=   0.46007782
k=788, s1=  0.46007782: => new s1=   0.46007377
k=789, s1=  0.46007377: => new s1=    0.4600789
k=790, s1=   0.4600789: => new s1=   0.46007485
k=791, s1=  0.46007485: => new s1=   0.46007998
k=792, s1=  0.46007998: => new s1=   0.46007592
k=793, s1=  0.46007592: => new s1=   0.46008105
k=794, s1=  0.46008105: => new s1=   0.46007699
k=795, s1=  0.46007699: => new s1=   0.46008212
k=796, s1=  0.46008212: => new s1=   0.46007806
k=797, s1=  0.46007806: => new s1=   0.46008319
k=798, s1=  0.46008319: => new s1=   0.46007913
k=799, s1=  0.46007913: => new s1=   0.46008426
k=800, s1=  0.46008426: => new s1=   0.46008019
k=801, s1=  0.46008019: => new s1=   0.46008532
k=802, s1=  0.46008532: => new s1=   0.46008126
k=803, s1=  0.46008126: => new s1=   0.46008639
k=804, s1=  0.46008639: => new s1=   0.46008233
k=805, s1=  0.46008233: => new s1=   0.46008746
k=806, s1=  0.46008746: => new s1=   0.46008339
k=807, s1=  0.46008339: => new s1=   0.46008852
k=808, s1=  0.46008852: => new s1=   0.46008446
k=809, s1=  0.46008446: => new s1=   0.46008959
k=810, s1=  0.46008959: => new s1=   0.46008552
k=811, s1=  0.46008552: => new s1=   0.46009066
k=812, s1=  0.46009066: => new s1=   0.46008658
k=813, s1=  0.46008658: => new s1=   0.46009171
k=814, s1=  0.46009171: => new s1=   0.46008764
k=815, s1=  0.46008764: => new s1=   0.46009277
k=816, s1=  0.46009277: => new s1=   0.46008869
k=817, s1=  0.46008869: => new s1=   0.46009382
k=818, s1=  0.46009382: => new s1=   0.46008975
k=819, s1=  0.46008975: => new s1=   0.46009488
k=820, s1=  0.46009488: => new s1=    0.4600908
k=821, s1=   0.4600908: => new s1=   0.46009593
k=822, s1=  0.46009593: => new s1=   0.46009185
k=823, s1=  0.46009185: => new s1=   0.46009699
k=824, s1=  0.46009699: => new s1=    0.4600929
k=825, s1=   0.4600929: => new s1=   0.46009803
k=826, s1=  0.46009803: => new s1=   0.46009394
k=827, s1=  0.46009394: => new s1=   0.46009908
k=828, s1=  0.46009908: => new s1=   0.46009499
k=829, s1=  0.46009499: => new s1=   0.46010013
k=830, s1=  0.46010013: => new s1=   0.46009603
k=831, s1=  0.46009603: => new s1=   0.46010118
k=832, s1=  0.46010118: => new s1=   0.46009708
k=833, s1=  0.46009708: => new s1=   0.46010222
k=834, s1=  0.46010222: => new s1=   0.46009811
k=835, s1=  0.46009811: => new s1=   0.46010326
k=836, s1=  0.46010326: => new s1=   0.46009916
k=837, s1=  0.46009916: => new s1=    0.4601043
k=838, s1=   0.4601043: => new s1=    0.4601002
k=839, s1=   0.4601002: => new s1=   0.46010535
k=840, s1=  0.46010535: => new s1=   0.46010124
k=841, s1=  0.46010124: => new s1=   0.46010638
k=842, s1=  0.46010638: => new s1=   0.46010228
k=843, s1=  0.46010228: => new s1=   0.46010742
k=844, s1=  0.46010742: => new s1=   0.46010331
k=845, s1=  0.46010331: => new s1=   0.46010845
k=846, s1=  0.46010845: => new s1=   0.46010433
k=847, s1=  0.46010433: => new s1=   0.46010948
k=848, s1=  0.46010948: => new s1=   0.46010536
k=849, s1=  0.46010536: => new s1=   0.46011051
k=850, s1=  0.46011051: => new s1=   0.46010639
k=851, s1=  0.46010639: => new s1=   0.46011154
k=852, s1=  0.46011154: => new s1=   0.46010742
k=853, s1=  0.46010742: => new s1=   0.46011257
k=854, s1=  0.46011257: => new s1=   0.46010845
k=855, s1=  0.46010845: => new s1=    0.4601136
k=856, s1=   0.4601136: => new s1=   0.46010948
k=857, s1=  0.46010948: => new s1=   0.46011462
k=858, s1=  0.46011462: => new s1=    0.4601105
k=859, s1=   0.4601105: => new s1=   0.46011564
k=860, s1=  0.46011564: => new s1=   0.46011152
k=861, s1=  0.46011152: => new s1=   0.46011667
k=862, s1=  0.46011667: => new s1=   0.46011254
k=863, s1=  0.46011254: => new s1=   0.46011769
k=864, s1=  0.46011769: => new s1=   0.46011355
k=865, s1=  0.46011355: => new s1=    0.4601187
k=866, s1=   0.4601187: => new s1=   0.46011456
k=867, s1=  0.46011456: => new s1=   0.46011972
k=868, s1=  0.46011972: => new s1=   0.46011559
k=869, s1=  0.46011559: => new s1=   0.46012074
k=870, s1=  0.46012074: => new s1=   0.46011661
k=871, s1=  0.46011661: => new s1=   0.46012176
k=872, s1=  0.46012176: => new s1=   0.46011763
k=873, s1=  0.46011763: => new s1=   0.46012277
k=874, s1=  0.46012277: => new s1=   0.46011863
k=875, s1=  0.46011863: => new s1=   0.46012379
k=876, s1=  0.46012379: => new s1=   0.46011965
k=877, s1=  0.46011965: => new s1=    0.4601248
k=878, s1=   0.4601248: => new s1=   0.46012066
k=879, s1=  0.46012066: => new s1=   0.46012581
k=880, s1=  0.46012581: => new s1=   0.46012166
k=881, s1=  0.46012166: => new s1=   0.46012682
k=882, s1=  0.46012682: => new s1=   0.46012268
k=883, s1=  0.46012268: => new s1=   0.46012783
k=884, s1=  0.46012783: => new s1=   0.46012368
k=885, s1=  0.46012368: => new s1=   0.46012884
k=886, s1=  0.46012884: => new s1=   0.46012468
k=887, s1=  0.46012468: => new s1=   0.46012984
k=888, s1=  0.46012984: => new s1=   0.46012568
k=889, s1=  0.46012568: => new s1=   0.46013084
k=890, s1=  0.46013084: => new s1=   0.46012668
k=891, s1=  0.46012668: => new s1=   0.46013184
k=892, s1=  0.46013184: => new s1=   0.46012768
k=893, s1=  0.46012768: => new s1=   0.46013285
k=894, s1=  0.46013285: => new s1=   0.46012868
k=895, s1=  0.46012868: => new s1=   0.46013385
k=896, s1=  0.46013385: => new s1=   0.46012968
k=897, s1=  0.46012968: => new s1=   0.46013484
k=898, s1=  0.46013484: => new s1=   0.46013067
k=899, s1=  0.46013067: => new s1=   0.46013584
k=900, s1=  0.46013584: => new s1=   0.46013167
k=901, s1=  0.46013167: => new s1=   0.46013683
k=902, s1=  0.46013683: => new s1=   0.46013265
k=903, s1=  0.46013265: => new s1=   0.46013782
k=904, s1=  0.46013782: => new s1=   0.46013365
k=905, s1=  0.46013365: => new s1=   0.46013881
k=906, s1=  0.46013881: => new s1=   0.46013464
k=907, s1=  0.46013464: => new s1=    0.4601398
k=908, s1=   0.4601398: => new s1=   0.46013563
k=909, s1=  0.46013563: => new s1=   0.46014079
k=910, s1=  0.46014079: => new s1=   0.46013661
k=911, s1=  0.46013661: => new s1=   0.46014177
k=912, s1=  0.46014177: => new s1=   0.46013759
k=913, s1=  0.46013759: => new s1=   0.46014276
k=914, s1=  0.46014276: => new s1=   0.46013858
k=915, s1=  0.46013858: => new s1=   0.46014374
k=916, s1=  0.46014374: => new s1=   0.46013956
k=917, s1=  0.46013956: => new s1=   0.46014472
k=918, s1=  0.46014472: => new s1=   0.46014054
k=919, s1=  0.46014054: => new s1=   0.46014571
k=920, s1=  0.46014571: => new s1=   0.46014152
k=921, s1=  0.46014152: => new s1=   0.46014668
k=922, s1=  0.46014668: => new s1=    0.4601425
k=923, s1=   0.4601425: => new s1=   0.46014767
k=924, s1=  0.46014767: => new s1=   0.46014348
k=925, s1=  0.46014348: => new s1=   0.46014864
k=926, s1=  0.46014864: => new s1=   0.46014445
k=927, s1=  0.46014445: => new s1=   0.46014962
k=928, s1=  0.46014962: => new s1=   0.46014542
k=929, s1=  0.46014542: => new s1=    0.4601506
k=930, s1=   0.4601506: => new s1=    0.4601464
k=931, s1=   0.4601464: => new s1=   0.46015157
k=932, s1=  0.46015157: => new s1=   0.46014737
k=933, s1=  0.46014737: => new s1=   0.46015254
k=934, s1=  0.46015254: => new s1=   0.46014834
k=935, s1=  0.46014834: => new s1=   0.46015351
k=936, s1=  0.46015351: => new s1=    0.4601493
k=937, s1=   0.4601493: => new s1=   0.46015447
k=938, s1=  0.46015447: => new s1=   0.46015028
k=939, s1=  0.46015028: => new s1=   0.46015545
k=940, s1=  0.46015545: => new s1=   0.46015124
k=941, s1=  0.46015124: => new s1=   0.46015641
k=942, s1=  0.46015641: => new s1=    0.4601522
k=943, s1=   0.4601522: => new s1=   0.46015738
k=944, s1=  0.46015738: => new s1=   0.46015317
k=945, s1=  0.46015317: => new s1=   0.46015834
k=946, s1=  0.46015834: => new s1=   0.46015413
k=947, s1=  0.46015413: => new s1=    0.4601593
k=948, s1=   0.4601593: => new s1=   0.46015508
k=949, s1=  0.46015508: => new s1=   0.46016025
k=950, s1=  0.46016025: => new s1=   0.46015603
k=951, s1=  0.46015603: => new s1=   0.46016121
k=952, s1=  0.46016121: => new s1=     0.460157
k=953, s1=    0.460157: => new s1=   0.46016217
k=954, s1=  0.46016217: => new s1=   0.46015796
k=955, s1=  0.46015796: => new s1=   0.46016313
k=956, s1=  0.46016313: => new s1=    0.4601627
k=957, s1=   0.4601627: => new s1=   0.46016901
k=958, s1=  0.46016901: => new s1=   0.46016517
k=959, s1=  0.46016517: => new s1=   0.46016647
k=960, s1=  0.46016647: => new s1=   0.46016049
k=961, s1=  0.46016049: => new s1=   0.46016479
k=962, s1=  0.46016479: => new s1=   0.46016422
k=963, s1=  0.46016422: => new s1=   0.46016682
k=964, s1=  0.46016682: => new s1=   0.46016363
k=965, s1=  0.46016363: => new s1=   0.46016941
k=966, s1=  0.46016941: => new s1=    0.4601655
k=967, s1=   0.4601655: => new s1=   0.46017089
k=968, s1=  0.46017089: => new s1=   0.46017061
k=969, s1=  0.46017061: => new s1=   0.46017768
k=970, s1=  0.46017768: => new s1=   0.46017425
k=971, s1=  0.46017425: => new s1=   0.46017573
k=972, s1=  0.46017573: => new s1=   0.46017251
k=973, s1=  0.46017251: => new s1=   0.46017423
k=974, s1=  0.46017423: => new s1=    0.4601693
k=975, s1=   0.4601693: => new s1=   0.46017424
k=976, s1=  0.46017424: => new s1=   0.46017392
k=977, s1=  0.46017392: => new s1=   0.46017661
k=978, s1=  0.46017661: => new s1=   0.46017344
k=979, s1=  0.46017344: => new s1=   0.46017926
k=980, s1=  0.46017926: => new s1=   0.46017921
k=981, s1=  0.46017921: => new s1=   0.46018605
k=982, s1=  0.46018605: => new s1=    0.4601825
k=983, s1=   0.4601825: => new s1=     0.460184
k=984, s1=    0.460184: => new s1=   0.46018133
k=985, s1=  0.46018133: => new s1=   0.46018335
k=986, s1=  0.46018335: => new s1=   0.46018087
k=987, s1=  0.46018087: => new s1=   0.46018308
k=988, s1=  0.46018308: => new s1=    0.4601781
k=989, s1=   0.4601781: => new s1=   0.46018307
k=990, s1=  0.46018307: => new s1=   0.46018286
k=991, s1=  0.46018286: => new s1=   0.46018587
k=992, s1=  0.46018587: => new s1=   0.46018286
k=993, s1=  0.46018286: => new s1=   0.46018882
k=994, s1=  0.46018882: => new s1=   0.46018887
k=995, s1=  0.46018887: => new s1=   0.46019277
k=996, s1=  0.46019277: => new s1=   0.46019177
k=997, s1=  0.46019177: => new s1=   0.46019662
k=998, s1=  0.46019662: => new s1=   0.46019593
k=999, s1=  0.46019593: => new s1=   0.46020119
Warning message:
In BYlogreg(x0 = X.fs, y = y.fs, initwml = FALSE, addIntercept = FALSE,  :
  No convergence in 1000 steps.
> signif(
+     rbind(ML = coef(m.fsML),   QL =coef(m.fsQL),
+           WBY0=coef(m.fsWBY.), BY0=coef(m.fs.BY.),
+           WBY =coef(m.fsWBY ), BY =coef(m.fs.BY)
+           )
+     , 4)
     (Intercept) tenancy suppl.income    logInc
ML        0.9264  -1.850       0.8961 -0.332800
QL        0.5894  -1.790       0.8167 -0.266900
WBY0     -0.1409  -1.778       0.7774 -0.001926
BY0      -0.3407  -1.764       0.7767 -0.001492
WBY      -0.1331  -1.680       0.7346 -0.002073
BY            NA      NA           NA        NA
> 
> 
> if(FALSE) {
+ ## *scaling* of X (  ?? <==> ??   'sigma1' ) ------------------
+ 
+ ## no "W" (Mahalanobis fail because of *singular* X):
+ m.fs.BY100 <- BYlogreg(x0=100*X.fs, initwml=FALSE,
+                        y=y.fs,
+                        addIntercept=FALSE, trace=TRUE, maxhalf=18)
+ ## ==> no convergence
+ 
+ X1c <- cbind(1, 100*X.fs[,-1])
+ m.fsWBY1c <- BYlogreg(x0=X1c, y=y.fs,
+                       addIntercept=FALSE, trace=TRUE, maxhalf=18)
+ ## ==> illegal singularity$kind
+ 
+ }## not yet
> 
> ###-------- Gamma ------------
> 
> ## Realistic "data" {from help(glmrob)}:
> mu <- c(122.131, 53.0979, 39.9039, 33.9232, 28.007,
+         24.923, 21.5747, 19.6971, 18.4516)
> ns.resid <- c(-0.0338228, 0.0923228, 0.0525284, 0.0317426, -0.035954,
+               0.00308925, -0.026637, -0.0353932, -0.0244761)
> Vmu <- c(14915.9, 2819.38, 1592.32, 1150.78, 784.39,
+          621.156, 465.467, 387.978, 340.462)
> Hp2  <- robustbase:::Huberprop2
> ## Hp2. <- robustbase:::Huberprop2.
> 
> ## was: phis <- 2^(-70:-1)  -- but that was *not* reliable (on 32-bit e.g.)
> phis <- 2^(-42:-1)
> H1 <- sapply(phis, function(phi)
+     Hp2(phi, ns.resid=ns.resid, mu=mu, Vmu=Vmu, tcc = 1.345))
> ## H2 <- sapply(phis, function(phi)
> ##     Hp2.(phi, ns.resid=ns.resid, mu=mu, Vmu=Vmu, tcc = 1.345))
> dput(signif(H1))
c(9.91741, 9.88674, 9.89438, 9.88674, 9.88961, 9.88961, 9.88961, 
9.88984, 9.88973, 9.88964, 9.8897, 9.88975, 9.88976, 9.88975, 
9.88974, 9.88974, 9.88974, 9.88974, 9.88974, 9.88974, 9.88974, 
9.88974, 9.88975, 9.88975, 9.88975, 9.33161, 8.70618, 8.39347, 
8.23714, 8.15902, 8.12006, 7.16275, 3.38703, -0.0879886, -2.3322, 
-4.16929, -5.26821, -5.80526, -6.04822, -6.11538, -6.02613, -5.66718
)
> H2 <- c(9.91741,
+         9.88674, 9.89438, 9.88674, 9.88961, 9.88961, 9.88961, 9.88984,
+         9.88973, 9.88964, 9.8897, 9.88975, 9.88976, 9.88975, 9.88974,
+         9.88974, 9.88974, 9.88974, 9.88974, 9.88974, 9.88974, 9.88974,
+         9.88975, 9.88975, 9.88975, 9.33161, 8.70618, 8.39347, 8.23714,
+         8.15902, 8.12006, 7.16275, 3.38703, -0.0879886, -2.3322, -4.16929,
+         -5.26821, -5.80526, -6.04822, -6.11538, -6.02613, -5.66718)
>           all.equal(H1,H2, tolerance = 0) # -> see 8.869e-7
[1] "Mean relative difference: 3.774807e-07"
> stopifnot(all.equal(H1,H2, tolerance = 1e-5))
> 
> if(dev.interactive(TRUE)) # shows that phi < 1e-12 is doubtful
+   matplot(phis, cbind(H1,H2), log="x", ylim = rrange(H1), type="o")
> 
> 
> proc.time()
   user  system elapsed 
  9.769   0.305  10.183 
