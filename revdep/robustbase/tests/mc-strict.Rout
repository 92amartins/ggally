
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #### Testing  medcouple	 and related functions
> 
> ### here, we do "strict tests" -- hence no *.Rout.save
> ### hence, can also produce non-reproducible output such as timing
> 
> library(robustbase)
> source(system.file("xtraR/mcnaive.R", package = "robustbase"))# mcNaive()
> source(system.file("test-tools-1.R",  package="Matrix", mustWork=TRUE))
Loading required package: tools
> assertEQm12 <- function(x,y, giveRE=TRUE, ...)
+     assert.EQ(x,y, tol = 1e-12, giveRE=giveRE, ...)
> ## ^^ shows *any* difference ("tol = 0") unless there is no difference at all
> ##
> c.time <- function(...) cat('Time elapsed: ', ..., '\n')
> S.time <- function(expr) c.time(system.time(expr))
> DO <- function(...) S.time(stopifnot(...))
> 
> n.set <- c(1:99, 1e5L+ 0:1) # large n gave integer overflow in earlier versions
> DO(0 == sapply(n.set, function(n) mc(seq_len(n))))
Time elapsed:  0.036 0.002 0.038 0 0 
> DO(0 == sapply(n.set, function(n) mc(seq_len(n), doRefl=FALSE)))
Time elapsed:  0.029 0 0.029 0 0 
> 
> DO(0 == sapply(1:100, function(n) mcNaive(seq_len(n), "simple")))
Time elapsed:  0.034 0.001 0.036 0 0 
> DO(0 == sapply(1:100, function(n) mcNaive(seq_len(n), "h.use" )))
Time elapsed:  0.033 0.003 0.036 0 0 
> 
> 
> x1 <- c(1, 2, 7, 9, 10)
> mcNaive(x1) # = -1/3
[1] -0.3333333
> assertEQm12(-1/3, mcNaive(x1))
> assertEQm12(-1/3, mcNaive(x1, "h.use"))
> assertEQm12(-1/3, mc(x1))
> 
> x2 <- c(-1, 0, 0, 0, 1, 2)
> mcNaive(x2, meth="simple") # = 0 - which is wrong
[1] 0
> mcNaive(x2, meth="h.use")  # = 1/6 = 0.16666
[1] 0.1666667
> assertEQm12(1/6, mc(x2))
> assertEQm12(1/6, mcNaive(x2, "h.use"))
> 
> x4 <- c(1:5,7,10,15,25, 1e15) ## - bombed in orignal algo
> mcNaive(x4,"h.use") # 0.5833333
[1] 0.5833333
> assertEQm12( 7/12, mcNaive(x4, "h.use"))
> assertEQm12( 7/12, mc( x4, doRefl= FALSE))
> assertEQm12(-7/12, mc(-x4, doRefl= FALSE))
> 
> 
> set.seed(17)
> for(n in 3:50) {
+     cat(" ")
+     for(k in 1:5) {
+ 	x <- rlnorm(n)
+ 	mc1 <- mc(x)
+ 	mc2 <- mcNaive(x, method = "simple")
+ 	mc3 <- mcNaive(x, method = "h.use" )
+ 	stopifnot(all.equal(mc1, mc3, tolerance = 1e-10),# 1e-12 not quite ok
+ 		  mc2 == mc3)
+ 	cat(".")
+     }
+ };  cat("\n")
 ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... ..... .....
> 
> ###----  Strict tests of adjOutlyingness():
> ###                      ================= changed after long-standing bug fix in Oct.2014
> 
> set.seed(1);  S.time(a1.1 <- adjOutlyingness(longley))
Time elapsed:  0.092 0.001 0.093 0 0 
> set.seed(11); S.time(a1.2 <- adjOutlyingness(longley))
Time elapsed:  0.092 0.001 0.094 0 0 
> ##
> set.seed(2); S.time(a2 <- adjOutlyingness(hbk))
Time elapsed:  0.107 0.003 0.111 0 0 
> set.seed(3); S.time(a3 <- adjOutlyingness(hbk[, 1:3]))# the 'X' space
Time elapsed:  0.111 0.002 0.114 0 0 
> set.seed(4); S.time(a4 <- adjOutlyingness(milk)) # obs.63 = obs.64
Time elapsed:  0.115 0.003 0.118 0 0 
> set.seed(5); S.time(a5 <- adjOutlyingness(wood))
Time elapsed:  0.084 0 0.083 0 0 
> set.seed(6); S.time(a6 <- adjOutlyingness(wood[, 1:5]))# the 'X' space
Time elapsed:  0.093 0.001 0.095 0 0 
> 
> ## 32-bit <-> 64-bit different results {tested on Linux only}
> is32 <- .Machine$sizeof.pointer == 4 ## <- should work for Linux/MacOS/Windows
> isMac <- Sys.info()["sysname"] == "Darwin"
> isSun <- Sys.info()["sysname"] == "SunOS"
> Rnk <- function(u) rank(unname(u), ties.method = "first")
> ## to use for testing below:
> cat("\nRnk(a3 $ adjout): "); dput(Rnk(a3$adjout), control= {})

Rnk(a3 $ adjout): c(62, 64, 68, 71, 70, 65, 66, 63, 69, 67, 73, 75, 72, 74, 25, 
52, 44, 3, 11, 33, 6, 21, 29, 28, 59, 9, 12, 13, 37, 27, 43, 
35, 22, 55, 14, 2, 26, 46, 54, 15, 23, 41, 40, 32, 60, 30, 61, 
19, 16, 8, 39, 53, 51, 48, 20, 47, 50, 42, 7, 38, 17, 57, 45, 
18, 24, 34, 4, 58, 56, 5, 1, 10, 31, 36, 49)
> cat("\nRnk(a4 $ adjout): "); dput(Rnk(a4$adjout), control= {})

Rnk(a4 $ adjout): c(65, 66, 61, 56, 47, 51, 19, 37, 74, 67, 79, 86, 83, 84, 85, 
82, 81, 73, 80, 55, 27, 3, 70, 68, 78, 76, 77, 53, 48, 8, 29, 
33, 6, 32, 28, 31, 36, 40, 22, 58, 64, 52, 39, 63, 44, 30, 57, 
46, 43, 45, 25, 54, 12, 1, 9, 2, 71, 14, 75, 23, 4, 10, 34, 35, 
17, 24, 15, 20, 38, 72, 42, 13, 50, 60, 62, 26, 69, 18, 5, 21, 
7, 49, 11, 41, 59, 16)
> 
> stopifnot(which(!a2$nonOut) == 1:14,
+ 	  which(!a3$nonOut) == 1:14,
+ 	  if(isSun || isMac || is32) TRUE else
+ 	  ## which(!a4$nonOut) == if(is32 && !isMac) c(1, 2, 41, 70) else c(12, 70),
+           which(!a4$nonOut) == c(9:19, 23:27,57, 59, 70, 77),
+ 	  ## 'longley', 'wood' have no outliers in the "adjOut" sense:
+ 	  ## FIXME: longley is platform dependent too
+ 	  if(isMac) TRUE else sum(a1.2$nonOut) >= 15, # sum(.) = 16 [nb-mm3, Oct.2014]
+ 	  a5$nonOut,
+           a6$nonOut[-20],
+ 	  ## hbk (n = 75) :
+ 	  abs(Rnk(a3$adjout) -
+              c(62, 64, 68, 71, 70,   65, 66, 63, 69, 67,   73, 75, 72, 74, 25,
+                52, 44,  5, 11, 33,    6, 21, 29, 28, 59,    9, 12, 13, 37, 27,
+                43, 35, 22, 55, 14,    2, 26, 46, 54, 15,   23, 41, 40, 32, 60,
+                30, 61, 19, 16,  8,   39, 53, 51, 48, 20,   47, 50, 42,  7, 38,
+                17, 57, 45, 18, 24,   34,  3, 58, 56,  4,    1, 10, 31, 36, 49)
+ 	      ) <= 3 ## all 0 on 32-bit Linux
+          ,
+ 	  ## milk (n = 86) : -- Quite platform dependent!
+       {
+ 	  r <- Rnk(a4$adjout)
+ 	  r64 <- ## the 64-bit (ubuntu 14.04, nb-mm3) values:
+ 	      c(65, 66, 61, 56, 47,   51, 19, 37, 74, 67,   79, 86, 83, 84, 85,
+ 		82, 81, 73, 80, 55,   27,  3, 70, 68, 78,   76, 77, 53, 48,  8,
+ 		29, 33,	 6, 32, 28,   31, 36, 40, 22, 58,   64, 52, 39, 63, 44,
+ 		30, 57, 46, 43, 45,   25, 54, 12,  1,  9,    2, 71, 14, 75, 23,
+ 		 4, 10, 34, 35, 17,   24, 15, 20, 38, 72,   42, 13, 50, 60, 62,
+ 		26, 69, 18,  5, 21,    7, 49, 11, 41, 59,   16)
+           r32 <- ## Linux 32bit (florence: 3.14.8-100.fc19.i686.PAE)
+               c(78, 79, 72, 66, 52,   61, 22, 41, 53, 14,   74, 85, 82, 83, 84,
+                 80, 81, 56, 73, 65,   30,  3, 16, 17, 68,   57, 58, 63, 54,  8,
+                 32, 37,  6, 36, 31,   35, 40, 44, 25, 69,   77, 62, 43, 76, 48,
+                 34, 67, 51, 47, 49,   28, 64, 12,  1,  9,    2, 33, 15, 59, 26,
+                  4, 10, 38, 39, 20,   27, 18, 23, 42, 86,   46, 13, 60, 71, 75,
+                 29, 50, 21,  5, 24,    7, 55, 11, 45, 70,   19)
+           d <- (r - if (is32) r32 else r64)
+           if(has.d <- any(d != 0)) { print(cbind(r, d)); print(table(abs(d))) }
+ 	  ## for the biggest part (79 out of 86), the ranks are "close":
+           ## 2014: still true, but in a different sense..
+           if(has.d)
+               sum(abs(d) <= 17) >= 78 && sum(abs(d) <= 13) >= 75
+           else TRUE
+       })
> 
> 
> ## check of adjOutlyingness *free* bug
> ## reported by Kaveh Vakili <Kaveh.Vakili@wis.kuleuven.be>
> set.seed(-37665251)
> X <- matrix(rnorm(100*5),100,5)
> Z <- matrix(rnorm(100*5,0,1/100),10,5)
> Z <- sweep(Z, 2, c(5,rep(0,4)), FUN="+")
> X[91:100,] <- Z
> for (i in 1:10) {
+     ## this would produce an error in the 6th iteration
+     aa <- adjOutlyingness(x=X,ndir=250)
+ }
> 
> ## "large n" (this did overflow sum_p, sum_q  earlier ==> had inf.loop):
> set.seed(3); x <- rnorm(2e5)
> (mx <- mc(x, trace.lev=3))
mc_C_d(z[1:200000], trace_lev=3): Median = -6.55715e-05 (not at the border)
 x[] has been rescaled (* 1/s) with s = 9.56001
   x1[] := {x | x_j > x_eps = 1.52299e-21}    has 100000 (='j-1') entries
'median-x' {x | -eps < x_i <= eps} has 0 (= 'k') entries
  now allocating 2+5 work arrays of size (1+) h2=100000 each:
 (h1,h2, nr, knew) = (100000,100000, 10000000000, 5000000001)
   it= 1, whimed(*, n=100000)= -0.0019683 sum_(p,q)= (5007620130,5007620131); sum_p >= kn
   it= 2, whimed(*, n= 99999)=   0.4221 sum_(p,q)= (2453285443,2453285444); s_p < kn ?<=? s_q: no
   it= 3, whimed(*, n= 99999)= 0.217736 sum_(p,q)= (3629582104,3629582105); s_p < kn ?<=? s_q: no
   it= 4, whimed(*, n= 99999)= 0.111383 sum_(p,q)= (4288398219,4288398220); s_p < kn ?<=? s_q: no
   it= 5, whimed(*, n= 99998)= 0.055486 sum_(p,q)= (4641942845,4641942846); s_p < kn ?<=? s_q: no
   it= 6, whimed(*, n= 99994)= 0.0268725 sum_(p,q)= (4823919585,4823919586); s_p < kn ?<=? s_q: no
   it= 7, whimed(*, n= 99987)= 0.0124514 sum_(p,q)= (4915754726,4915754727); s_p < kn ?<=? s_q: no
   it= 8, whimed(*, n= 99971)= 0.00524338 sum_(p,q)= (4961674479,4961674480); s_p < kn ?<=? s_q: no
   it= 9, whimed(*, n= 99924)= 0.00163336 sum_(p,q)= (4984674126,4984674127); s_p < kn ?<=? s_q: no
   it=10, whimed(*, n= 99842)= -0.000168801 sum_(p,q)= (4996158141,4996158142); s_p < kn ?<=? s_q: no
   it=11, whimed(*, n= 99686)= -0.00107153 sum_(p,q)= (5001907425,5001907426); sum_p >= kn
   it=12, whimed(*, n= 99377)= -0.000623462 sum_(p,q)= (4999053587,4999053588); s_p < kn ?<=? s_q: no
   it=13, whimed(*, n= 98730)= -0.000850637 sum_(p,q)= (5000499912,5000499913); sum_p >= kn
   it=14, whimed(*, n= 97586)= -0.000740298 sum_(p,q)= (4999796905,4999796906); s_p < kn ?<=? s_q: no
   it=15, whimed(*, n= 94851)= -0.000798653 sum_(p,q)= (5000168479,5000168480); sum_p >= kn
   it=16, whimed(*, n= 89663)= -0.000772293 sum_(p,q)= (4999999851,4999999852); s_p < kn ?<=? s_q: no
   it=17, whimed(*, n= 74334)= -0.000787408 sum_(p,q)= (5000096724,5000096725); sum_p >= kn
   it=18, whimed(*, n= 57880)= -0.00078117 sum_(p,q)= (5000056536,5000056537); sum_p >= kn
   it=19, whimed(*, n= 41122)= -0.000777448 sum_(p,q)= (5000032870,5000032871); sum_p >= kn
   it=20, whimed(*, n= 27292)= -0.000775187 sum_(p,q)= (5000018442,5000018443); sum_p >= kn
   it=21, whimed(*, n= 16663)= -0.000773868 sum_(p,q)= (5000009941,5000009942); sum_p >= kn
   it=22, whimed(*, n=  9493)= -0.000773127 sum_(p,q)= (5000005172,5000005173); sum_p >= kn
   it=23, whimed(*, n=  5167)= -0.000772728 sum_(p,q)= (5000002585,5000002586); sum_p >= kn
   it=24, whimed(*, n=  2694)= -0.000772511 sum_(p,q)= (5000001244,5000001245); sum_p >= kn
   it=25, whimed(*, n=  1384)= -0.000772402 sum_(p,q)= (5000000552,5000000553); sum_p >= kn
   it=26, whimed(*, n=   697)= -0.000772347 sum_(p,q)= (5000000202,5000000203); sum_p >= kn
   it=27, whimed(*, n=   349)= -0.00077232 sum_(p,q)= (5000000026,5000000027); sum_p >= kn
   it=28, whimed(*, n=   173)= -0.000772306 sum_(p,q)= (4999999939,4999999940); s_p < kn ?<=? s_q: no
   it=29, whimed(*, n=    86)= -0.000772312 sum_(p,q)= (4999999982,4999999983); s_p < kn ?<=? s_q: no
   it=30, whimed(*, n=    43)= -0.000772317 sum_(p,q)= (5000000004,5000000005); sum_p >= kn
   it=31, whimed(*, n=    21)= -0.000772315 sum_(p,q)= (4999999993,4999999994); s_p < kn ?<=? s_q: no
   it=32, whimed(*, n=    10)= -0.000772316 sum_(p,q)= (4999999998,4999999999); s_p < kn ?<=? s_q: no
   it=33, whimed(*, n=     5)= -0.000772316 sum_(p,q)= (5000000001,5000000002); sum_p >= kn
   it=34, whimed(*, n=     2)= -0.000772316 sum_(p,q)= (4999999999,5000000000); s_p < kn ?<=? s_q: no
   it=35, whimed(*, n=     1)= -0.000772316 sum_(p,q)= (5000000000,5000000001); s_p < kn ?<=? s_q: TRUE
converged in 35 iterations
[1] -0.0007723158
> stopifnot(print(abs(mx - -0.000772315846101988)) < 1e-15)
[1] 3.252607e-19
> 					# 3.252e-19, 64b Linux
> 					# 1.198e-16, 32b Windows
> 
> ### Some platform info :
> local({ nms <- names(Si <- Sys.info())
+         dropNms <- c("nodename", "machine", "login")
+         structure(Si[c("nodename", nms[is.na(match(nms, dropNms))])],
+                   class="simple.list") })
               _                                                                                               
nodename       Cali-Devil.local                                                                                
sysname        Darwin                                                                                          
release        15.0.0                                                                                          
version        Darwin Kernel Version 15.0.0: Wed Aug 26 19:41:34 PDT 2015; root:xnu-3247.1.106~5/RELEASE_X86_64
user           barret                                                                                          
effective_user barret                                                                                          
> 
> if(identical(1L, grep("linux", R.version[["os"]]))) { ##----- Linux - only ----
+     ##
+     Sys.procinfo <- function(procfile)
+     {
+         l2 <- strsplit(readLines(procfile),"[ \t]*:[ \t]*")
+         r <- sapply(l2[sapply(l2, length) == 2],
+                     function(c2)structure(c2[2], names= c2[1]))
+         attr(r,"Name") <- procfile
+         class(r) <- "simple.list"
+         r
+     }
+     ##
+     Scpu <- Sys.procinfo("/proc/cpuinfo")
+     Smem <- Sys.procinfo("/proc/meminfo")
+     print(Scpu[c("model name", "cpu MHz", "cache size", "bogomips")])
+     print(Smem[c("MemTotal", "SwapTotal")])
+ }
> 
> ##' Checking the breakdown point of mc() --- Hubert et al. theory said : 25%
> ##' using non-default  doReflect=FALSE  as that corresponds to original Hubert et al.
> ##'
> ##' @title Medcouple mc() checking
> ##' @param x
> ##' @param Xfun
> ##' @param eps
> ##' @param NAiferror
> ##' @param doReflect
> ##' @param ...
> ##' @return mc(*,..) or NaN in case mc() signals an error [non-convergence]
> ##' @author Martin Maechler
> mcX <- function(x, Xfun, eps=0, NAiferror=FALSE, doReflect=FALSE, ...) {
+     stopifnot(is.numeric(x), is.function(Xfun), "eps" %in% names(formals(Xfun)))
+     myFun <-
+ 	if(NAiferror)
+ 	    function(u) tryCatch(mc(Xfun(u, eps=eps), doReflect=doReflect, ...),
+ 				 error = function(e) NaN)
+ 	else
+ 	    function(u) mc(Xfun(u, eps=eps), doReflect=doReflect, ...)
+     vapply(x, myFun, 1.)
+ }
> 
> X1. <- function(u, eps=0) c(1,2,3, 7+(-10:10)*eps, u + (-1:1)*eps)
> ## ==> This *does* breakdown [but points are not "in general position"]:
> r.mc1 <- curve(mcX(x, X1.), 10, 1e35, log="x", n=1001)
> rt1 <- uniroot(function(x) mcX(exp(x), X1.) - 1/2, lower=0, upper=500)
> exp(rt1$root) #  4.056265e+31
[1] 4.056265e+31
> 
> ## eps > 0  ==> No duplicated points ==> theory says breakdown point = 0.25
> ## -------  but get big numerical problems:
> if(FALSE) { # ==> convergence problem [also in maxit = 1e5] .. really an *inf* loop!
+ r.mc1.1  <- curve(mcX(x, X1., eps= .1  ), 10, 1e35, log="x", n=1001)
+ r.mc1.2  <- curve(mcX(x, X1., eps= .01 ), 10, 1e35, log="x", n=1001)
+ r.mc1.3  <- curve(mcX(x, X1., eps= .001), 10, 1e35, log="x", n=1001)
+ r.mc1.5  <- curve(mcX(x, X1., eps= 1e-5), 10, 1e35, log="x", n=1001)
+ r.mc1.8  <- curve(mcX(x, X1., eps= 1e-8), 10, 1e35, log="x", n=1001)
+ r.mc1.15 <- curve(mcX(x, X1., eps=1e-15), 10, 1e35, log="x", n=1001)# still!
+ }
> ## practically identical to  eps = 0 where we have breakdown (see above)
> r.mc1.16 <- curve(mcX(x, X1., eps=1e-16), 10, 1e35, log="x", n=1001)
> all.equal(r.mc1, r.mc1.16, tol=1e-15)#-> TRUE
[1] TRUE
> 
> ## Quite bad case: Non convergence
> X2. <- function(u) c(1:3, seq(6, 8, by = 1/8), u, u, u)
> try(mc(X2.(4.3e31)))## -> error: no convergence
Error in mc(X2.(4.3e+31)) : mc(): not 'converged' in 100 iterations
In addition: Warning message:
In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  :
  maximal number of iterations (100 =? 100) reached prematurely
> if(FALSE) # and the same here -- after longer waiting:
+     mc(X2.(4.3e31), eps1=1e-7, eps2=1e-100, maxit = 1e6)## -> error: no convergence
> 
> ## related, more direct:
> X3. <- function(u) c(10*(1:3), 60:80, (4:6)*u)
> mc(X3.(1e31), trace=5) # fine convergence in one iter.
mc_C_d(z[1:27], trace_lev=5): Median = 70 (not at the border)
 x[] has been rescaled (* 1/s) with s = 1.2e+32
   x1[] := {x | x_j > x_eps = 4.93038e-32}    has 8 (='j-1') entries
'median-x' {x | -eps < x_i <= eps} has 11 (= 'k') entries
  now allocating 2+5 work arrays of size (1+) h2=19 each:
 (h1,h2, nr, knew) = (19,19, 361, 181)
 before whimed(): work and iwt, each [0:(19-1)]:
        1        1        1        1        1        1      0.6 0.333333 0.142857        0 -0.111111     -0.2 -0.272727 -0.333333 -0.384615 -0.428571 -0.818182 -0.851852   -0.875
       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19
   it= 1, whimed(*, n=    19)=        0 
j=  1, i= 19, x[j]=0.5, x2[i]=-5e-31, h=1
j=  2, i= 19, x[j]=0.416667, x2[i]=-5e-31, h=1
j=  3, i= 19, x[j]=0.333333, x2[i]=-5e-31, h=1
j=  4, i= 15, x[j]=8.33333e-32, x2[i]=-7.5e-32, h=0.0526316
j=  5, i= 14, x[j]=7.5e-32, x2[i]=-6.66667e-32, h=0.0588235
j=  6, i= 13, x[j]=6.66667e-32, x2[i]=-5.83333e-32, h=0.0666667
j=  7, i= 12, x[j]=5.83333e-32, x2[i]=-5e-32, h=0.0769231
j=  8, i= 11, x[j]=5e-32, x2[i]=-4.16667e-32, h=0.0909091
j=  9, i= 10, x[j]=4.16667e-32, x2[i]=-3.33333e-32, h=0.111111
j= 10, i=  9, x[j]=3.33333e-32, x2[i]=-2.5e-32, h=0.142857
j= 11, i=  8, x[j]=2.5e-32, x2[i]=-1.66667e-32, h=0.2
j= 12, i=  7, x[j]=1.66667e-32, x2[i]=-8.33333e-33, h=0.333333
j= 13, i=  6, x[j]=8.33333e-33, x2[i]=-0, h=1
j= 14, i=  5, x[j]=-0, x2[i]=8.33333e-33, h=1
j= 15, i=  4, x[j]=-8.33333e-33, x2[i]=1.66667e-32, h=1
j= 16, i=  3, x[j]=-1.66667e-32, x2[i]=2.5e-32, h=1
j= 17, i=  2, x[j]=-2.5e-32, x2[i]=3.33333e-32, h=1
j= 18, i=  1, x[j]=-3.33333e-32, x2[i]=4.16667e-32, h=1
    p[1:19]: 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  3  3  3 sum= 177
    q[1:19]: 20 19 18 17 16 16 14 13 12 11 10  9  8  7  6  5  4  4  4 sum= 194
; s_p < kn ?<=? s_q: TRUE
converged in 1 iterations
mc_C_d(z[1:27], trace_lev=5): Median = -70 (not at the border)
 x[] has been rescaled (* 1/s) with s = 1.2e+32
   x1[] := {x | x_j > x_eps = 4.93038e-32}    has 8 (='j-1') entries
'median-x' {x | -eps < x_i <= eps} has 11 (= 'k') entries
  now allocating 2+5 work arrays of size (1+) h2=19 each:
 (h1,h2, nr, knew) = (19,19, 361, 181)
 before whimed(): work and iwt, each [0:(19-1)]:
        1        1        1        1        1        1      0.6 0.333333 0.142857        0 -0.111111     -0.2 -0.272727 -0.333333 -0.384615 -0.428571       -1       -1       -1
       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19       19
   it= 1, whimed(*, n=    19)=        0 
j=  1, i= 16, x[j]=5e-31, x2[i]=-8.33333e-32, h=0.714286
j=  2, i= 16, x[j]=4.16667e-31, x2[i]=-8.33333e-32, h=0.666667
j=  3, i= 16, x[j]=3.33333e-31, x2[i]=-8.33333e-32, h=0.6
j=  4, i= 15, x[j]=8.33333e-32, x2[i]=-7.5e-32, h=0.0526316
j=  5, i= 14, x[j]=7.5e-32, x2[i]=-6.66667e-32, h=0.0588235
j=  6, i= 13, x[j]=6.66667e-32, x2[i]=-5.83333e-32, h=0.0666667
j=  7, i= 12, x[j]=5.83333e-32, x2[i]=-5e-32, h=0.0769231
j=  8, i= 11, x[j]=5e-32, x2[i]=-4.16667e-32, h=0.0909091
j=  9, i= 10, x[j]=4.16667e-32, x2[i]=-3.33333e-32, h=0.111111
j= 10, i=  9, x[j]=3.33333e-32, x2[i]=-2.5e-32, h=0.142857
j= 11, i=  8, x[j]=2.5e-32, x2[i]=-1.66667e-32, h=0.2
j= 12, i=  7, x[j]=1.66667e-32, x2[i]=-8.33333e-33, h=0.333333
j= 13, i=  6, x[j]=8.33333e-33, x2[i]=-0, h=1
j= 14, i=  5, x[j]=-0, x2[i]=8.33333e-33, h=1
j= 15, i=  4, x[j]=-8.33333e-33, x2[i]=1.66667e-32, h=1
j= 16, i=  3, x[j]=-1.66667e-32, x2[i]=2.5e-32, h=1
j= 17, i=  2, x[j]=-2.5e-32, x2[i]=3.33333e-32, h=1
j= 18, i=  1, x[j]=-3.33333e-32, x2[i]=4.16667e-32, h=1
    p[1:19]: 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  0  0  0 sum= 168
    q[1:19]: 20 19 18 17 16 16 14 13 12 11 10  9  8  7  6  5  1  1  1 sum= 185
; s_p < kn ?<=? s_q: TRUE
converged in 1 iterations
[1] 0
> try(
+ mc(X3.(1e32), trace=3) # no convergence...
+ )# bad
mc_C_d(z[1:27], trace_lev=3): Median = 70 (not at the border)
 x[] has been rescaled (* 1/s) with s = 1.2e+33
   x1[] := {x | x_j > x_eps = 4.93038e-32}    has 3 (='j-1') entries
'median-x' {x | -eps < x_i <= eps} has 23 (= 'k') entries
  now allocating 2+5 work arrays of size (1+) h2=24 each:
 (h1,h2, nr, knew) = (26,24, 624, 313)
   it= 1, whimed(*, n=    24)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it= 2, whimed(*, n=    24)=        1 sum_(p,q)= (0,273); s_p < kn ?<=? s_q: no
   it= 3, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it= 4, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it= 5, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it= 6, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it= 7, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it= 8, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it= 9, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=10, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=11, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=12, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=13, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=14, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=15, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=16, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=17, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=18, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=19, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=20, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=21, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=22, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=23, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=24, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=25, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=26, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=27, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=28, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=29, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=30, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=31, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=32, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=33, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=34, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=35, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=36, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=37, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=38, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=39, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=40, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=41, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=42, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=43, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=44, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=45, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=46, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=47, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=48, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=49, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=50, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=51, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=52, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=53, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=54, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=55, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=56, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=57, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=58, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=59, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=60, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=61, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=62, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=63, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=64, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=65, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=66, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=67, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=68, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=69, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=70, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=71, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=72, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=73, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=74, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=75, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=76, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=77, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=78, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=79, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=80, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=81, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=82, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=83, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=84, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=85, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=86, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=87, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=88, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=89, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=90, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=91, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=92, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=93, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=94, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=95, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=96, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
   it=97, whimed(*, n=    20)=        0 sum_(p,q)= (370,335); sum_p >= kn
   it=98, whimed(*, n=    19)=       -1 sum_(p,q)= (455,612); sum_p >= kn
   it=99, whimed(*, n=    23)= -0.333333 sum_(p,q)= (400,359); sum_p >= kn
   it=100, whimed(*, n=    20)= -0.0666667 sum_(p,q)= (382,338); sum_p >= kn
mc_C_d(z[1:27], trace_lev=3): Median = -70 (not at the border)
 x[] has been rescaled (* 1/s) with s = 1.2e+33
   x1[] := {x | x_j > x_eps = 4.93038e-32}    has 1 (='j-1') entries
'median-x' {x | -eps < x_i <= eps} has 23 (= 'k') entries
  now allocating 2+5 work arrays of size (1+) h2=26 each:
 (h1,h2, nr, knew) = (24,26, 624, 313)
   it= 1, whimed(*, n=    26)=        0 sum_(p,q)= (299,320); s_p < kn ?<=? s_q: TRUE
converged in 1 iterations
Error in mc(X3.(1e+32), trace = 3) : 
  mc(): not 'converged' in 100 iterations
In addition: Warning message:
In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  :
  maximal number of iterations (100 =? 100) reached prematurely
> 
> try(mc(X3.(1e32), trace=5, maxit=6)) # no convergence...
mc_C_d(z[1:27], trace_lev=5): Median = 70 (not at the border)
 x[] has been rescaled (* 1/s) with s = 1.2e+33
   x1[] := {x | x_j > x_eps = 4.93038e-32}    has 3 (='j-1') entries
'median-x' {x | -eps < x_i <= eps} has 23 (= 'k') entries
  now allocating 2+5 work arrays of size (1+) h2=24 each:
 (h1,h2, nr, knew) = (26,24, 624, 313)
 before whimed(): work and iwt, each [0:(24-1)]:
        1        1        1        1        1        1        1        1        1        1        1       -1       -1       -1       -1       -1       -1       -1       -1       -1       -1       -1       -1       -1
       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26       26
   it= 1, whimed(*, n=    24)=       -1 
j=  1, i= 24, x[j]=0.5, x2[i]=-5e-32, h=1
j=  2, i= 24, x[j]=0.416667, x2[i]=-5e-32, h=1
j=  3, i= 24, x[j]=0.333333, x2[i]=-5e-32, h=1
j=  4, i= 24, x[j]=8.33333e-33, x2[i]=-5e-32, h=-0.714286
j=  5, i= 24, x[j]=7.5e-33, x2[i]=-5e-32, h=-0.73913
j=  6, i= 24, x[j]=6.66667e-33, x2[i]=-5e-32, h=-0.764706
j=  7, i= 24, x[j]=5.83333e-33, x2[i]=-5e-32, h=-0.791045
j=  8, i= 24, x[j]=5e-33, x2[i]=-5e-32, h=-0.818182
j=  9, i= 24, x[j]=4.16667e-33, x2[i]=-5e-32, h=-0.846154
j= 10, i= 24, x[j]=3.33333e-33, x2[i]=-5e-32, h=-0.875
j= 11, i= 24, x[j]=2.5e-33, x2[i]=-5e-32, h=-0.904762
j= 12, i= 24, x[j]=1.66667e-33, x2[i]=-5e-32, h=-0.935484
j= 13, i= 24, x[j]=8.33333e-34, x2[i]=-5e-32, h=-0.967213
j= 14, i= 11, x[j]=-0, x2[i]=-0, h=1
j= 15, i= 11, x[j]=-8.33333e-34, x2[i]=-0, h=1
j= 16, i= 11, x[j]=-1.66667e-33, x2[i]=-0, h=1
j= 17, i= 11, x[j]=-2.5e-33, x2[i]=-0, h=1
j= 18, i= 11, x[j]=-3.33333e-33, x2[i]=-0, h=1
j= 19, i= 11, x[j]=-4.16667e-33, x2[i]=-0, h=1
j= 20, i= 11, x[j]=-5e-33, x2[i]=-0, h=1
j= 21, i= 11, x[j]=-5.83333e-33, x2[i]=-0, h=1
j= 22, i= 11, x[j]=-6.66667e-33, x2[i]=-0, h=1
j= 23, i= 11, x[j]=-7.5e-33, x2[i]=-0, h=1
j= 24, i= 11, x[j]=-8.33333e-33, x2[i]=-0, h=1
j= 25, i= 11, x[j]=-3.33333e-32, x2[i]=-0, h=1
j= 26, i= 11, x[j]=-4.16667e-32, x2[i]=-0, h=1
    p[1:24]: 26 26 26 26 26 26 26 26 26 26 26 13 13 13 13 13 13 13 13 13 13 13 13 13 sum= 455
    q[1:24]: 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 15 sum= 612
; sum_p >= kn
 before whimed(): work and iwt, each [0:(24-1)]:
        1        1        1        1        1        1        1        1        1        1        1     0.75 0.555556      0.4 0.272727 0.166667 0.0769231        0 -0.0666667   -0.125 -0.176471 -0.702128 -0.754386 -0.791045
       26       26       26       26       26       26       26       26       26       26       26       13       13       13       13       13       13       13       13       13       13       13       13       13
   it= 2, whimed(*, n=    24)=        1 
    p[1:24]:  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 sum=   0
    q[1:24]: 26 25 24 23 22 21 20 19 18 17 17 17  4  4  4  4  4  4  4  4  4  4  4  4 sum= 273
; s_p < kn ?<=? s_q: no
 before whimed(): work and iwt, each [0:(23-1)]:
        0       -1       -1       -1       -1       -1       -1       -1       -1       -1        1 0.428571     0.25 0.111111        0 -0.0909091 -0.166667 -0.230769 -0.285714 -0.333333 -0.777778 -0.818182 -0.846154
        1        2        3        4        5        6        7        8        9       10       10       10       10       10       10       10       10       10       10       10       10       10       10
   it= 3, whimed(*, n=    23)= -0.333333 
j=  1, i= 24, x[j]=0.5, x2[i]=-5e-32, h=1
j=  2, i= 24, x[j]=0.416667, x2[i]=-5e-32, h=1
j=  3, i= 24, x[j]=0.333333, x2[i]=-5e-32, h=1
j=  4, i= 21, x[j]=8.33333e-33, x2[i]=-8.33333e-33, h=0
j=  5, i= 21, x[j]=7.5e-33, x2[i]=-8.33333e-33, h=-0.0526316
j=  6, i= 21, x[j]=6.66667e-33, x2[i]=-8.33333e-33, h=-0.111111
j=  7, i= 21, x[j]=5.83333e-33, x2[i]=-8.33333e-33, h=-0.176471
j=  8, i= 21, x[j]=5e-33, x2[i]=-8.33333e-33, h=-0.25
j=  9, i= 20, x[j]=4.16667e-33, x2[i]=-7.5e-33, h=-0.285714
j= 10, i= 18, x[j]=3.33333e-33, x2[i]=-5.83333e-33, h=-0.272727
j= 11, i= 16, x[j]=2.5e-33, x2[i]=-4.16667e-33, h=-0.25
j= 12, i= 14, x[j]=1.66667e-33, x2[i]=-2.5e-33, h=-0.2
j= 13, i= 12, x[j]=8.33333e-34, x2[i]=-8.33333e-34, h=0
j= 14, i= 11, x[j]=-0, x2[i]=-0, h=1
j= 15, i= 11, x[j]=-8.33333e-34, x2[i]=-0, h=1
j= 16, i= 11, x[j]=-1.66667e-33, x2[i]=-0, h=1
j= 17, i= 11, x[j]=-2.5e-33, x2[i]=-0, h=1
j= 18, i= 11, x[j]=-3.33333e-33, x2[i]=-0, h=1
j= 19, i= 11, x[j]=-4.16667e-33, x2[i]=-0, h=1
j= 20, i= 11, x[j]=-5e-33, x2[i]=-0, h=1
j= 21, i= 11, x[j]=-5.83333e-33, x2[i]=-0, h=1
j= 22, i= 11, x[j]=-6.66667e-33, x2[i]=-0, h=1
j= 23, i= 11, x[j]=-7.5e-33, x2[i]=-0, h=1
j= 24, i= 11, x[j]=-8.33333e-33, x2[i]=-0, h=1
j= 25, i= 11, x[j]=-3.33333e-32, x2[i]=-0, h=1
j= 26, i= 11, x[j]=-4.16667e-32, x2[i]=-0, h=1
    p[1:24]: 26 26 26 26 26 26 26 26 26 26 26 13 12 12 11 11 10 10  9  9  8  3  3  3 sum= 400
    q[1:24]: 27 26 25 24 23 22 21 20 19 18 18 18 18 13 13 12 12 11 11 10 10  4  4  4 sum= 359
; sum_p >= kn
 before whimed(): work and iwt, each [0:(20-1)]:
        0       -1       -1       -1       -1       -1       -1       -1       -1       -1        1      0.5 0.333333      0.2 0.0909091 0.0769231        0 -0.0666667   -0.125 -0.111111
        1        2        3        4        5        6        7        8        9       10       10        9        9        8        8        7        7        6        6        5
   it= 4, whimed(*, n=    20)= -0.0666667 
j=  1, i= 24, x[j]=0.5, x2[i]=-5e-32, h=1
j=  2, i= 24, x[j]=0.416667, x2[i]=-5e-32, h=1
j=  3, i= 24, x[j]=0.333333, x2[i]=-5e-32, h=1
j=  4, i= 21, x[j]=8.33333e-33, x2[i]=-8.33333e-33, h=0
j=  5, i= 21, x[j]=7.5e-33, x2[i]=-8.33333e-33, h=-0.0526316
j=  6, i= 20, x[j]=6.66667e-33, x2[i]=-7.5e-33, h=-0.0588235
j=  7, i= 18, x[j]=5.83333e-33, x2[i]=-5.83333e-33, h=0
j=  8, i= 17, x[j]=5e-33, x2[i]=-5e-33, h=0
j=  9, i= 16, x[j]=4.16667e-33, x2[i]=-4.16667e-33, h=0
j= 10, i= 15, x[j]=3.33333e-33, x2[i]=-3.33333e-33, h=0
j= 11, i= 14, x[j]=2.5e-33, x2[i]=-2.5e-33, h=0
j= 12, i= 13, x[j]=1.66667e-33, x2[i]=-1.66667e-33, h=0
j= 13, i= 12, x[j]=8.33333e-34, x2[i]=-8.33333e-34, h=0
j= 14, i= 11, x[j]=-0, x2[i]=-0, h=1
j= 15, i= 11, x[j]=-8.33333e-34, x2[i]=-0, h=1
j= 16, i= 11, x[j]=-1.66667e-33, x2[i]=-0, h=1
j= 17, i= 11, x[j]=-2.5e-33, x2[i]=-0, h=1
j= 18, i= 11, x[j]=-3.33333e-33, x2[i]=-0, h=1
j= 19, i= 11, x[j]=-4.16667e-33, x2[i]=-0, h=1
j= 20, i= 11, x[j]=-5e-33, x2[i]=-0, h=1
j= 21, i= 11, x[j]=-5.83333e-33, x2[i]=-0, h=1
j= 22, i= 11, x[j]=-6.66667e-33, x2[i]=-0, h=1
j= 23, i= 11, x[j]=-7.5e-33, x2[i]=-0, h=1
j= 24, i= 11, x[j]=-8.33333e-33, x2[i]=-0, h=1
j= 25, i= 11, x[j]=-3.33333e-32, x2[i]=-0, h=1
j= 26, i= 11, x[j]=-4.16667e-32, x2[i]=-0, h=1
    p[1:24]: 26 26 26 26 26 26 26 26 26 26 26 13 12 11 10  9  8  7  6  6  5  3  3  3 sum= 382
    q[1:24]: 27 26 25 24 23 22 21 20 19 18 18 18 18 12 11 10  9  8  8  7  6  4  4  4 sum= 338
; sum_p >= kn
 before whimed(): work and iwt, each [0:(20-1)]:
        0       -1       -1       -1       -1       -1       -1       -1       -1       -1        1      0.5 0.333333 0.272727 0.166667 0.142857 0.0666667 0.0588235        0 -0.0526316
        1        2        3        4        5        6        7        8        9       10       10        9        8        7        6        5        4        3        3        2
   it= 5, whimed(*, n=    20)=        0 
j=  1, i= 24, x[j]=0.5, x2[i]=-5e-32, h=1
j=  2, i= 24, x[j]=0.416667, x2[i]=-5e-32, h=1
j=  3, i= 24, x[j]=0.333333, x2[i]=-5e-32, h=1
j=  4, i= 20, x[j]=8.33333e-33, x2[i]=-7.5e-33, h=0.0526316
j=  5, i= 19, x[j]=7.5e-33, x2[i]=-6.66667e-33, h=0.0588235
j=  6, i= 18, x[j]=6.66667e-33, x2[i]=-5.83333e-33, h=0.0666667
j=  7, i= 17, x[j]=5.83333e-33, x2[i]=-5e-33, h=0.0769231
j=  8, i= 16, x[j]=5e-33, x2[i]=-4.16667e-33, h=0.0909091
j=  9, i= 15, x[j]=4.16667e-33, x2[i]=-3.33333e-33, h=0.111111
j= 10, i= 14, x[j]=3.33333e-33, x2[i]=-2.5e-33, h=0.142857
j= 11, i= 13, x[j]=2.5e-33, x2[i]=-1.66667e-33, h=0.2
j= 12, i= 12, x[j]=1.66667e-33, x2[i]=-8.33333e-34, h=0.333333
j= 13, i= 11, x[j]=8.33333e-34, x2[i]=-0, h=1
j= 14, i= 11, x[j]=-0, x2[i]=-0, h=1
j= 15, i= 11, x[j]=-8.33333e-34, x2[i]=-0, h=1
j= 16, i= 11, x[j]=-1.66667e-33, x2[i]=-0, h=1
j= 17, i= 11, x[j]=-2.5e-33, x2[i]=-0, h=1
j= 18, i= 11, x[j]=-3.33333e-33, x2[i]=-0, h=1
j= 19, i= 11, x[j]=-4.16667e-33, x2[i]=-0, h=1
j= 20, i= 11, x[j]=-5e-33, x2[i]=-0, h=1
j= 21, i= 11, x[j]=-5.83333e-33, x2[i]=-0, h=1
j= 22, i= 11, x[j]=-6.66667e-33, x2[i]=-0, h=1
j= 23, i= 11, x[j]=-7.5e-33, x2[i]=-0, h=1
j= 24, i= 11, x[j]=-8.33333e-33, x2[i]=-0, h=1
j= 25, i= 11, x[j]=-3.33333e-32, x2[i]=-0, h=1
j= 26, i= 11, x[j]=-4.16667e-32, x2[i]=-0, h=1
    p[1:24]: 26 26 26 26 26 26 26 26 26 26 26 12 11 10  9  8  7  6  5  4  3  3  3  3 sum= 370
    q[1:24]: 27 26 25 24 23 22 21 20 19 18 18 18 18 12 11 10  9  8  7  6  5  4  4  4 sum= 335
; sum_p >= kn
 before whimed(): work and iwt, each [0:(19-1)]:
        0       -1       -1       -1       -1       -1       -1       -1       -1       -1        1      0.5      0.4 0.272727 0.230769 0.142857    0.125 0.0588235 0.0526316
        1        2        3        4        5        6        7        8        9       10       10        8        7        6        5        4        3        2        1
   it= 6, whimed(*, n=    19)=       -1 
j=  1, i= 24, x[j]=0.5, x2[i]=-5e-32, h=1
j=  2, i= 24, x[j]=0.416667, x2[i]=-5e-32, h=1
j=  3, i= 24, x[j]=0.333333, x2[i]=-5e-32, h=1
j=  4, i= 24, x[j]=8.33333e-33, x2[i]=-5e-32, h=-0.714286
j=  5, i= 24, x[j]=7.5e-33, x2[i]=-5e-32, h=-0.73913
j=  6, i= 24, x[j]=6.66667e-33, x2[i]=-5e-32, h=-0.764706
j=  7, i= 24, x[j]=5.83333e-33, x2[i]=-5e-32, h=-0.791045
j=  8, i= 24, x[j]=5e-33, x2[i]=-5e-32, h=-0.818182
j=  9, i= 24, x[j]=4.16667e-33, x2[i]=-5e-32, h=-0.846154
j= 10, i= 24, x[j]=3.33333e-33, x2[i]=-5e-32, h=-0.875
j= 11, i= 24, x[j]=2.5e-33, x2[i]=-5e-32, h=-0.904762
j= 12, i= 24, x[j]=1.66667e-33, x2[i]=-5e-32, h=-0.935484
j= 13, i= 24, x[j]=8.33333e-34, x2[i]=-5e-32, h=-0.967213
j= 14, i= 11, x[j]=-0, x2[i]=-0, h=1
j= 15, i= 11, x[j]=-8.33333e-34, x2[i]=-0, h=1
j= 16, i= 11, x[j]=-1.66667e-33, x2[i]=-0, h=1
j= 17, i= 11, x[j]=-2.5e-33, x2[i]=-0, h=1
j= 18, i= 11, x[j]=-3.33333e-33, x2[i]=-0, h=1
j= 19, i= 11, x[j]=-4.16667e-33, x2[i]=-0, h=1
j= 20, i= 11, x[j]=-5e-33, x2[i]=-0, h=1
j= 21, i= 11, x[j]=-5.83333e-33, x2[i]=-0, h=1
j= 22, i= 11, x[j]=-6.66667e-33, x2[i]=-0, h=1
j= 23, i= 11, x[j]=-7.5e-33, x2[i]=-0, h=1
j= 24, i= 11, x[j]=-8.33333e-33, x2[i]=-0, h=1
j= 25, i= 11, x[j]=-3.33333e-32, x2[i]=-0, h=1
j= 26, i= 11, x[j]=-4.16667e-32, x2[i]=-0, h=1
    p[1:24]: 26 26 26 26 26 26 26 26 26 26 26 13 13 13 13 13 13 13 13 13 13 13 13 13 sum= 455
    q[1:24]: 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 15 sum= 612
; sum_p >= kn
mc_C_d(z[1:27], trace_lev=5): Median = -70 (not at the border)
 x[] has been rescaled (* 1/s) with s = 1.2e+33
   x1[] := {x | x_j > x_eps = 4.93038e-32}    has 1 (='j-1') entries
'median-x' {x | -eps < x_i <= eps} has 23 (= 'k') entries
  now allocating 2+5 work arrays of size (1+) h2=26 each:
 (h1,h2, nr, knew) = (24,26, 624, 313)
 before whimed(): work and iwt, each [0:(26-1)]:
        1        1        1        1        1        1        1        1        1        1        1        0        1        0 -0.333333     -0.5     -0.6 -0.666667 -0.714286    -0.75 -0.777778     -0.8 -0.818182       -1       -1       -1
       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24       24
   it= 1, whimed(*, n=    26)=        0 
j=  1, i= 23, x[j]=5e-32, x2[i]=-8.33333e-33, h=0.714286
j=  2, i= 23, x[j]=4.16667e-32, x2[i]=-8.33333e-33, h=0.666667
j=  3, i= 23, x[j]=3.33333e-32, x2[i]=-8.33333e-33, h=0.6
j=  4, i= 22, x[j]=8.33333e-33, x2[i]=-7.5e-33, h=0.0526316
j=  5, i= 21, x[j]=7.5e-33, x2[i]=-6.66667e-33, h=0.0588235
j=  6, i= 20, x[j]=6.66667e-33, x2[i]=-5.83333e-33, h=0.0666667
j=  7, i= 19, x[j]=5.83333e-33, x2[i]=-5e-33, h=0.0769231
j=  8, i= 18, x[j]=5e-33, x2[i]=-4.16667e-33, h=0.0909091
j=  9, i= 17, x[j]=4.16667e-33, x2[i]=-3.33333e-33, h=0.111111
j= 10, i= 16, x[j]=3.33333e-33, x2[i]=-2.5e-33, h=0.142857
j= 11, i= 15, x[j]=2.5e-33, x2[i]=-1.66667e-33, h=0.2
j= 12, i= 14, x[j]=1.66667e-33, x2[i]=-8.33333e-34, h=0.333333
j= 13, i= 13, x[j]=8.33333e-34, x2[i]=-0, h=1
j= 14, i= 10, x[j]=-0, x2[i]=2.5e-33, h=1
j= 15, i=  9, x[j]=-8.33333e-34, x2[i]=3.33333e-33, h=1
j= 16, i=  8, x[j]=-1.66667e-33, x2[i]=4.16667e-33, h=1
j= 17, i=  7, x[j]=-2.5e-33, x2[i]=5e-33, h=1
j= 18, i=  6, x[j]=-3.33333e-33, x2[i]=5.83333e-33, h=1
j= 19, i=  5, x[j]=-4.16667e-33, x2[i]=6.66667e-33, h=1
j= 20, i=  4, x[j]=-5e-33, x2[i]=7.5e-33, h=1
j= 21, i=  3, x[j]=-5.83333e-33, x2[i]=8.33333e-33, h=1
j= 22, i=  2, x[j]=-6.66667e-33, x2[i]=3.33333e-32, h=1
j= 23, i=  1, x[j]=-7.5e-33, x2[i]=4.16667e-32, h=1
    p[1:26]: 23 22 21 20 19 18 17 16 15 14 13 13 13 12 11 10  9  8  7  6  5  4  3  0  0  0 sum= 299
    q[1:26]: 25 24 23 22 21 20 19 18 17 16 15 14 14 14 13 12 11 10  9  8  7  6  5  1  1  1 sum= 320
; s_p < kn ?<=? s_q: TRUE
converged in 1 iterations
Error in mc(X3.(1e+32), trace = 5, maxit = 6) : 
  mc(): not 'converged' in 6 iterations
In addition: Warning message:
In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  :
  maximal number of iterations (6 =? 6) reached prematurely
> 
> ### TODO : find example with *smaller* sample size -- with no convergence
> X4. <- function(u, eps, ...) c(10, 70:75, (2:3)*u)
> mc(X4.(1e34))# "fine"
[1] 0.5
> ## whoa: jump down and up:
> r.mc4 <- curve(mcX(x, X4.), 100, 1e35, log="x", n=2^12)
> 
> X5. <- function(u) c(10*(1:3), 70:78, (4:6)*u)
> try(mc(X5.(1e32), maxit=1000))
Error in mc(X5.(1e+32), maxit = 1000) : 
  mc(): not 'converged' in 1000 iterations
In addition: Warning message:
In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  :
  maximal number of iterations (1000 =? 1000) reached prematurely
> 
> X5. <- function(u, eps,...) c(5*(1:12), (4:6)*u)
> (r.mc5 <- mc(X5.(1e32), doReflect=FALSE, maxit=1000))
[1] 1
> all.equal(1, ## <- i.e. complete breakdown
+           r.mc5) ## platform dependent! yes, on 64-bit
[1] TRUE
> try(mc(X5.(5e31), maxit=10000)) # no convergence..
Error in mc(X5.(5e+31), maxit = 10000) : 
  mc(): not 'converged' in 10000 iterations
In addition: Warning message:
In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  :
  maximal number of iterations (10000 =? 10000) reached prematurely
> r.mc5Sml <- curve(mcX(x, X5.), 1,  100, log="x", n=1024) ## quite astonishing
> r.mc5Lrg <- curve(mcX(x, X5.), 1, 1e30, log="x", n=1024) ## ok..
> ## but then going higher -- we have problems:
> r.mc5Big <- curve(mcX(x, X5., NAiferror=TRUE), 1, 1e38, log="x",
+                   n = 2^12, type = "o", cex = 1/4)
There were 15 warnings (use warnings() to see them)
> warnings()
Warning messages:
1: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
2: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
3: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
4: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
5: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
6: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
7: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
8: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
9: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
10: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
11: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
12: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
13: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
14: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
15: In mcComp(x, doReflect, eps1 = eps1, eps2 = eps2, maxit = maxit,  ... :
  maximal number of iterations (100 =? 100) reached prematurely
> summary(r.mc5Big$y)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
-0.2657  0.2000  0.2000  0.3269  0.2000  1.0000      15 
> ## 15 NA's at x :
> with(r.mc5Big, x[is.na(y)])
 [1] 4.307131e+31 4.400152e+31 4.495182e+31 4.592264e+31 4.691443e+31
 [6] 4.792764e+31 4.896274e+31 5.002019e+31 5.110047e+31 5.220409e+31
[11] 5.333154e+31 5.448334e+31 5.566002e+31 5.686211e+31 5.809016e+31
> ## ~= [4.3, 5.8] * 10^31
> 
> 
> c.time(proc.time())
Time elapsed:  7.554 0.182 7.759 0.002 0.005 
> 
> proc.time()
   user  system elapsed 
  7.557   0.187   7.759 
