
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### test subsample
> ### LU decomposition and singular subsamples handling
> require(robustbase)
Loading required package: robustbase
> source(system.file("xtraR/subsample-fns.R", package = "robustbase", mustWork=TRUE))
> source(system.file("test-tools-1.R", package="Matrix", mustWork=TRUE))
Loading required package: tools
> require(Matrix)
Loading required package: Matrix
> 
> cat("doExtras:", doExtras <- robustbase:::doExtras(),"\n")
doExtras: FALSE 
> showProc.time()
Time elapsed:  1.528 0.055 1.588 
> 
> A <- matrix(c(0.001, 1, 1, 2), 2)
> set.seed(11)
> str(sa <- tstSubsample(A))
List of 21
 $ x        : num [1:2, 1:2] 0.001 1 1 2
 $ y        : num [1:2] -0.591 0.0266
 $ n        : int 2
 $ m        : int 2
 $ beta     : num [1:2] 1.211 -0.592
 $ ind_space: int [1:2] 0 1
 $ idc      : int [1:2] 0 1
 $ idr      : int [1:2] 1 0
 $ lu       : num [1:2, 1:2] 1 0.001 2 0.998
 $ v        : num [1:2] 1 0.998
 $ pivot    : int 1
 $ Dr       : num [1:2] 1 0.5
 $ Dc       : num [1:2] 2 1
 $ rowequ   : int 0
 $ colequ   : int 0
 $ status   : int 0
 $ sample   : logi FALSE
 $ mts      : int 0
 $ ss       : int 1
 $ tolinv   : num 1e-07
 $ solve    : logi TRUE
> 
> A <- matrix(c(3, 2, 6, 17, 4, 18, 10, -2, 12), 3)
> tstSubsample(A)
> 
> ## test some random matrix
> set.seed(1002)
> A <- matrix(rnorm(100), 10)
> tstSubsample(A)
> 
> ## test singular matrix handling
> A <- matrix(c(1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1), 4, byrow=TRUE)
> tstSubsample(A)
> 
> 
> ## test subsample with mts > 0
> data <- data.frame(y = rnorm(9), expand.grid(A = letters[1:3], B = letters[1:3]))
> x <- model.matrix(y ~ ., data)
> y <- data$y
> ## this should produce a warning and return status == 2
> showSys.time(z <- Rsubsample(x, y, mts=2))
Time    user  system elapsed 
Time   0.000   0.000   0.001 
Warning message:
In Rsubsample(x, y, mts = 2) :
  Too many singular resamples. Aborting subsample().
 See parameter 'subsampling; in help of lmrob.config().
> stopifnot(z$status == 2)
> 
> 
> ## test equilibration
> ## columns only
> X <- matrix(c(1e-7, 2, 1e-10, 0.2), 2)
> y <- 1:2
> tstSubsample(t(X), y)
kappa before equilibration = 2.0404e+08, after = 21.2097
> 
> ## rows only
> X <- matrix(c(1e-7, 2, 1e10, 0.2), 2)
> y <- 1:2
> tstSubsample(X, y)
kappa before equilibration = 5e+09, after = 1.15762
> 
> ## both
> X <- matrix(c(1e-7, 1e10, 2, 2e12), 2)
> y <- 1:2
> tstSubsample(X, y)
kappa before equilibration = 2.01e+14, after = 3.33338
> showProc.time()
Time elapsed:  0.209 0.004 0.221 
> 
> 
> ## test real data example
> data(possumDiv)## 151 * 9; the last two variables are factors
> with(possumDiv, table(eucalyptus, aspect))
              aspect
eucalyptus     NW-NE NW-SE SE-SW SW-NW
  regnans         27    34    32    17
  delegatensis     6     8     9     6
  nitens           2     5     3     2
> 
> mf <- model.frame(Diversity ~ .^2, possumDiv)
> X <- model.matrix(mf, possumDiv)
> y <- model.response(mf)
> stopifnot(qr(X)$rank == ncol(X))
> 
> ## this used to fail: different pivots in step 37
> str(s1 <- tstSubsample(X, y))
kappa before equilibration = 16194.6, after = 736.342
List of 21
 $ x        : num [1:151, 1:63] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:151] "1" "2" "3" "4" ...
  .. ..$ : chr [1:63] "(Intercept)" "Shrubs" "Stumps" "Stags" ...
  ..- attr(*, "assign")= int [1:63] 0 1 2 3 4 5 6 7 7 8 ...
  ..- attr(*, "contrasts")=List of 2
  .. ..$ eucalyptus: chr "contr.treatment"
  .. ..$ aspect    : chr "contr.treatment"
 $ y        : num [1:151] 3 2 1 2 3 2 3 2 0 0 ...
 $ n        : int 151
 $ m        : int 63
 $ beta     : num [1:63] 6732.1 -463.6 1799.4 -205.2 -65.2 ...
 $ ind_space: int [1:151] 0 1 2 3 4 5 6 7 8 9 ...
 $ idc      : int [1:151] 0 1 2 3 4 5 6 7 8 9 ...
 $ idr      : int [1:151] 40 31 14 33 37 54 56 52 45 13 ...
 $ lu       : num [1:63, 1:63] 1 0.387 0.194 0.414 0 ...
 $ v        : num [1:63] 1 0.897 0.567 0.353 0.584 ...
 $ pivot    : int [1:62] 40 31 14 33 37 54 56 52 45 13 ...
 $ Dr       : num [1:151] 0.00111 0.00556 0.00481 0.00391 0.00313 ...
 $ Dc       : num [1:63] 6 2 10 2 2 3 3 6 16 20 ...
 $ rowequ   : int 1
 $ colequ   : int 1
 $ status   : int 0
 $ sample   : logi FALSE
 $ mts      : int 0
 $ ss       : int 1
 $ tolinv   : num 1e-07
 $ solve    : logi TRUE
> s2 <- tstSubsample(X / max(abs(X)), y / max(abs(X)))
kappa before equilibration = 16194.6, after = 736.342
> s3 <- tstSubsample(X * 2^-50, y * 2^-50)
kappa before equilibration = 16194.6, after = 736.342
> ## all components *BUT*  x, y, lu, Dr, Dc, rowequ, colequ :
> nm <- names(s1); nm <- nm[is.na(match(nm, c("x","y","lu", "Dr", "Dc", "rowequ", "colequ")))]
> stopifnot(all.equal(s1[nm], s2[nm], tolerance=1e-10),
+ 	  all.equal(s1[nm], s3[nm], tolerance=1e-10))
> showProc.time()
Time elapsed:  0.132 0.008 0.166 
> 
> set.seed(10)
> nsing <- sum(replicate(if(doExtras) 200 else 20, tstSubsampleSing(X, y)))
> stopifnot(nsing == 0)
> showProc.time()
Time elapsed:  0.315 0.006 0.324 
> 
> ## test example with many categorical predictors
> set.seed(10)
> r1 <- lmrob(Diversity ~ .^2 , data = possumDiv, cov="none")
> ## lmrob.S used to fail for this seed:
> set.seed(108)
> r2 <- lmrob(Diversity ~ .^2 , data = possumDiv, cov="none") #, trace=4)
> showProc.time()
Time elapsed:  1.631 0.005 1.642 
> 
> ## investigate problematic subsample:
> idc <- 1 + c(140, 60, 12, 13, 89, 90, 118, 80, 17, 134, 59, 94, 36,
+          43, 46, 93, 107, 62, 57, 116, 11, 45, 35, 38, 120, 34, 29,
+          33, 147, 105, 115, 92, 61, 91, 104, 141, 138, 129, 130, 84,
+          119, 132, 6, 135, 112, 16, 67, 41, 102, 76, 111, 82, 148, 24,
+          131, 10, 96, 0, 87, 21, 127, 56, 124)
> 
> rc <- lm(Diversity ~ .^2 , data = possumDiv, subset = idc)
> 
> X <- model.matrix(rc)
> y <- possumDiv$Diversity[idc]
> tstSubsample(X, y)## have different pivots ... could not find non-singular
kappa before equilibration = 2.16323e+21, after = 3.7126e+19
LU.gaxpy() and Rsubsample() have different pivots:
 [1] 34  9 41 15 14 18 38 46 17 62 11 55 47 60 56 37 18 20 24 54 22 50 33 39 32
[26] 54 37 40 38 30 45 60 56 35 62 57 50 44 51 45 62 55 52 48 53 46 55 48 59 61
[51] 58 54 54 63 62 57 57 58 61 61 61 63
 [1] 34  9 41 15 14 18 38 46 17 62 11 55 47 60 56 37 18 20 24 54 22 50 33 39 32
[26] 54 37 40 38 30 45 60 56 42 62 57 50 44 51 45 42 55 52 48 53 46 62 48 59 61
[51] 58 54 54 63 55 57 57 58 61 61 61 63
  ... are different at indices:
 [1] 34 41 47 55
Warning message:
In Rsubsample(x, y, tolInverse = tolInverse) :
  subsample(): could not find non-singular subsample.
> 
> lu <- LU.gaxpy(t(X))
> stopifnot(lu$sing)
> zc <- Rsubsample(X, y)
Warning message:
In Rsubsample(X, y) : subsample(): could not find non-singular subsample.
> stopifnot(zc$status > 0)
> ## column 52 is linearly dependent and should have been discarded
> ## qr(t(X))$pivot
> 
> image(as(round(zc$lu -      (lu$L + lu$U - diag(nrow(lu$U))), 10), "Matrix"))
> image(as( sign(zc$lu) - sign(lu$L + lu$U - diag(nrow(lu$U))),      "Matrix"))
> showProc.time()
Time elapsed:  0.322 0.007 0.333 
> 
> ## test equilibration
> ## colequ only
> X <- matrix(c(1e-7, 2, 1e-10, 0.2), 2)
> y <- 1:2
> tstSubsample(t(X), y)
kappa before equilibration = 2.0404e+08, after = 21.2097
> 
> ## rowequ only
> X <- matrix(c(1e-7, 2, 1e10, 0.2), 2)
> y <- 1:2
> tstSubsample(X, y)
kappa before equilibration = 5e+09, after = 1.15762
> 
> ## both
> X <- matrix(c(1e-7, 1e10, 2, 2e12), 2)
> y <- 1:2
> tstSubsample(X, y)
kappa before equilibration = 2.01e+14, after = 3.33338
> showProc.time()
Time elapsed:  0.009 0 0.009 
> 
> ### real data, see MM's ~/R/MM/Pkg-ex/robustbase/hedlmrob.R
> ##  close to singular cov():
> attach(system.file("external", "d1k27.rda", package="robustbase", mustWork=TRUE))
> 
> fm1 <- lmrob(y ~ a + I(a^2) + tf + I(tf^2) + A + I(A^2) + . , data = d1k27)
Warning message:
In lf.cov(init, x) :
  X'WX is almost singular. Consider rather using cov = ".vcov.w"
> ##     ^^^^^ gave error, earlier, now with a warning -- use ".vcov.w"
> ## --> cov = ".vcov.w"
> fm2 <- lmrob(y ~ a + I(a^2) + tf + I(tf^2) + A + I(A^2) + . , data = d1k27,
+              cov = ".vcov.w", trace = TRUE)
lmrob_S(n = 1000, nRes = 500): fast_s() [non-large n]:
 Subsampling to find candidate betas:
 Now refine() to convergence for 2 very best ones:
  Best[0]: convergence (83 iter.): -> improved scale to 0.166554423946168
  Best[1]: convergence (88 iter.): -> improved scale to 0.166554423946079
lmrob_MM(): rwls():
 rwls() used 22 it.; last ||b0 - b1||_1 = 9.29659e-07; convergence
> showProc.time()# 2.77
Time elapsed:  2.309 0.01 2.328 
> 
> if(doExtras) {##-----------------------------------------------------------------
+ 
+ ## Q: does it change to use numeric instead of binary factors ?
+ ## A: not really ..
+ d1k.n <- d1k27
+ d1k.n[-(1:5)] <- lapply(d1k27[,-(1:5)], as.numeric)
+ 
+ fm1.n <- lmrob(y ~ a + I(a^2) + tf + I(tf^2) + A + I(A^2) + . , data = d1k.n)
+ fm2.n <- lmrob(y ~ a + I(a^2) + tf + I(tf^2) + A + I(A^2) + . , data = d1k.n,
+              cov = ".vcov.w", trace = 2)
+ 
+ print(summary(weights(fm1, type="robustness")))
+ hist(weights(fm1, type="robustness"), main="robustness weights of fm1")
+ rug(weights(fm1, type="robustness"))
+ showProc.time()## 2.88
+ 
+ ##
+ fmc <- lm   (y ~ poly(a,2)-a + poly(tf, 2)-tf + poly(A, 2)-A + . , data = d1k27)
+ print(summary(fmc))
+ ## -> has NA's for  'a, tf, A'  --- bad that it did *not* work to remove them
+ 
+ nform <- update(formula(fm1), ~ .
+                 +poly(A,2)  -A  -I(A^2)
+                 +poly(a,2)  -a  -I(a^2)
+                 +poly(tf,2) -tf -I(tf^2))
+ 
+ fm1. <- lmrob(nform, data = d1k27)# now w/o warning !? !!
+ fm2. <- lmrob(nform, data = d1k27, cov = ".vcov.w", trace = TRUE)
+ 
+ ## now lmrob takes care of NA coefficients automatically
+ print(lmrob(y ~ poly(a,2)-a + poly(tf, 2)-tf + poly(A, 2)-A + . , data = d1k27))
+ showProc.time() ## 4.24
+ } ## only if(doExtras) ##--------------------------------------------------------
> 
> ## test exact fit property
> set.seed(20)
> data <- data.frame(y=c(rep.int(0, 20), rnorm(5)),
+                    group=rep(letters[1:5], each=5))
> x <- model.matrix(y ~ group, data)
> lmrob.S(x, data$y, lmrob.control())
S-estimator lmrob.S():
Exact fit detected

Coefficients:
(Intercept)       groupb       groupc       groupd       groupe  
      0.000        0.000        0.000        0.000        1.163  
scale =  0 ;  did NOT converge  in  200  refinement steps
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.5476400         0.5000000         4.6850610         0.0000001 
          rel.tol         solve.tol warn.limit.reject warn.limit.meanrw 
        0.0000001         0.0000001         0.5000000         0.5000000 
$nResample
[1] 500

$max.it
[1] 50

$groups
[1] 5

$n.group
[1] 400

$best.r.s
[1] 2

$k.fast.s
[1] 1

$k.max
[1] 200

$maxit.scale
[1] 200

$k.m_s
[1] 20

$trace.lev
[1] 0

$mts
[1] 1000

$compute.rd
[1] FALSE

$numpoints
[1] 10

$fast.s.large.n
[1] 2000

$eps.outlier
function (nobs) 
0.1/nobs
<environment: 0x7fd36a0b2388>

$eps.x
function (maxx) 
.Machine$double.eps^(0.75) * maxx
<environment: 0x7fd36a0b2388>

                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
           split.type compute.outlier.stats 
                  "f"                  "SM" 
seed : int(0) 
Warning message:
In lmrob.S(x, data$y, lmrob.control()) :
  S-estimated scale == 0:  Probably exact fit; check your data
> (ret <- lmrob(y ~ group, data))

Call:
lmrob(formula = y ~ group, data = data)
 \--> method = "S"
Exact fit detected

Coefficients:
(Intercept)       groupb       groupc       groupd       groupe  
     0.0000       0.0000       0.0000       0.0000      -0.4466  

Warning message:
In lmrob.S(x, y, control = control, mf = mf) :
  S-estimated scale == 0:  Probably exact fit; check your data
> summary(ret)

Call:
lmrob(formula = y ~ group, data = data)
 \--> method = "S"
Residuals:
   Min     1Q Median     3Q    Max 
-0.886  0.000  0.000  0.000  2.232 

Exact fit detected

Coefficients:
            Estimate Std. Error t value Pr(>|t|)
(Intercept)   0.0000     0.0000      NA       NA
groupb        0.0000     0.0000      NA       NA
groupc        0.0000     0.0000      NA       NA
groupd        0.0000     0.0000      NA       NA
groupe       -0.4466     0.0000      NA       NA

Robustness weights: 
 4 observations c(21,22,23,24) are outliers with |weight| = 0 ( < 0.004); 
 21 weights are ~= 1.
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi        refine.tol 
        1.548e+00         5.000e-01         4.685e+00         1.000e-07 
          rel.tol         solve.tol       eps.outlier             eps.x 
        1.000e-07         1.000e-07         4.000e-03         1.819e-12 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s          k.max 
           500             50              2              1            200 
   maxit.scale      trace.lev            mts     compute.rd fast.s.large.n 
           200              0           1000              0           2000 
                  psi           subsampling                   cov 
           "bisquare"         "nonsingular"         ".vcov.avar1" 
compute.outlier.stats 
                 "SM" 
seed : int(0) 
> 
> 
> showProc.time()
Time elapsed:  0.021 0.001 0.023 
> 
> 
> proc.time()
   user  system elapsed 
  6.778   0.140   6.963 
