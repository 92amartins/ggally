
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> stopifnot(require("robustbase"))
Loading required package: robustbase
> ## testing functions:
> source(system.file("test-tools-1.R",  package = "Matrix", mustWork=TRUE))# assert.EQ
Loading required package: tools
> 
> c.time <- function(...) cat('Time elapsed: ', ..., '\n')
> S.time <- function(expr) c.time(system.time(expr))
> showProc.time <- local({ ## function + 'pct' variable
+     pct <- proc.time()
+     function(final="\n") { ## CPU elapsed __since last called__
+ 	ot <- pct ; pct <<- proc.time()
+ 	## 'Time ..' *not* to be translated:  tools::Rdiff() skips its lines!
+ 	cat('Time elapsed: ', (pct - ot)[1:3], final)
+     }
+ })
> 
> ## as long as we don't export these (nor provide an nlrob(., method=.) interface:
> nlrob.MM  <- robustbase:::nlrob.MM
> nlrob.tau <- robustbase:::nlrob.tau
> nlrob.CM  <- robustbase:::nlrob.CM
> nlrob.mtl <- robustbase:::nlrob.mtl
> 
> (doExtras <- robustbase:::doExtras())
[1] FALSE
> if(doExtras) {
+     NP <- 30 ; tol <- 1e-11
+ } else { ## "fast"
+     NP <- 15 ; tol <- 1e-7
+ }
> 
> start.from.true <- !doExtras # (but not necessarily ..)
> if(start.from.true) { # population size = NP (random) + 1 (true parameters)
+     init_p       <- c(1, 0.2)
+     init_p_sigma <- c(1, 0.2, 1)
+ } else {
+     init_p <- init_p_sigma <- NULL
+ }
> 
> if(!dev.interactive(orNone=TRUE))  pdf("nlregrob-tst.pdf")
> 
> ## Stromberg, Arnold J. (1993).
> ## Computation of high breakdown nonlinear regression parameters.
> ## J. Amer. Statist. Assoc. 88(421), 237-244.
> 
> ## exponential regression
> Expo <- function(x, a, b) exp(a + b*x)
> set.seed(2345) # for reproducibility
> ## data without outliers:
> d.exp30 <- data.frame(x = sort( runif(30, 0, 10) ), err = rnorm(30))
> d.exp30 <- transform(d.exp30, y = Expo(x, 1, 0.2) + err)
> ## classical (starting at truth .. hmm)
> Cfit <- nls(y ~ Expo(x, a, b), data = d.exp30, start = c(a = 1, b = 0.2),
+             control = nls.control(tol = 8e-8, printEval = TRUE))
  It.   1, fac=           1, eval (no.,total): ( 1,  1): new dev = 19.4745
  It.   2, fac=           1, eval (no.,total): ( 1,  2): new dev = 19.4745
  It.   3, fac=           1, eval (no.,total): ( 1,  3): new dev = 19.4745
  It.   4, fac=           1, eval (no.,total): ( 1,  4): new dev = 19.4745
> showProc.time()#                        ---- OS X needing 6e-8
Time elapsed:  0.07 0.001 0.073 
> 
> ## robust
> Rfit.MM.S.bisquare <-
+     nlrob.MM(y ~ Expo(x, a, b), data = d.exp30,
+              lower = c(a = -10, b = -2), upper = c(10, 2),
+              NP = NP, tol = tol, add_to_init_pop = init_p )
> if(doExtras) {
+ Rfit.MM.S.lqq        <- update(Rfit.MM.S.bisquare, psi = "lqq")
+ Rfit.MM.S.optimal    <- update(Rfit.MM.S.bisquare, psi = "optimal")
+ Rfit.MM.S.hampel     <- update(Rfit.MM.S.bisquare, psi = "hampel")
+ }
> showProc.time()
Time elapsed:  1.097 0.023 1.121 
> Rfit.MM.lts.bisquare <- update(Rfit.MM.S.bisquare, init = "lts")
> Rfit.MM.lts.lqq      <- update(Rfit.MM.S.bisquare, init = "lts", psi = "lqq")
> Rfit.MM.lts.optimal  <- update(Rfit.MM.S.bisquare, init = "lts", psi = "optimal")
> Rfit.MM.lts.hampel   <- update(Rfit.MM.S.bisquare, init = "lts", psi = "hampel")
> showProc.time()
Time elapsed:  0.915 0.015 0.932 
> 
> S.time(Rfit.tau.bisquare <-
+     nlrob.tau( y ~ Expo(x, a, b), data = d.exp30,
+                lower = c(a = -10, b = -2), upper = c(10, 2),
+                NP = NP, add_to_init_pop = init_p ))
Time elapsed:  0.984 0.009 0.996 0 0 
> S.time(Rfit.tau.optimal <- update(Rfit.tau.bisquare, psi = "optimal"))
Time elapsed:  0.721 0.009 0.731 0 0 
> 
> S.time(Rfit.CM <- nlrob.CM( y ~ Expo(x, a, b), data = d.exp30,
+ 			    lower = c(a = -10, b = -2, sigma = 0),
+ 			    upper = c(	   10,	    2,	      10),
+                             NP = NP, add_to_init_pop = init_p_sigma ))
Time elapsed:  0.635 0.012 0.648 0 0 
> S.time(Rfit.mtl <- nlrob.mtl(y ~ Expo(x, a, b), data = d.exp30,
+ 			     lower = c(a = -10, b = -2, sigma = 0),
+ 			     upper = c(	    10,	     2,		3),
+ 			     NP = NP+10, # <- higher prob. to get close
+                              tol = tol,
+                              trace=TRUE, details=TRUE,
+                              add_to_init_pop = init_p_sigma ))
1 : < 0.1807483 > ( 74.66194 ) 1 0.2 1
2 : < 0.1231268 > ( 74.66194 ) 1 0.2 1
3 : < 0.09042759 > ( 74.66194 ) 1 0.2 1
4 : < 0.07837666 > ( 74.66194 ) 1 0.2 1
5 : < 0.07236947 > ( 74.66194 ) 1 0.2 1
6 : < 0.06687685 > ( 74.66194 ) 1 0.2 1
7 : < 0.06184333 > ( 74.66194 ) 1 0.2 1
8 : < 0.0570944 > ( 74.66194 ) 1 0.2 1
9 : < 0.05436587 > ( 74.39718 ) -0.3378273 0.5129802 1.778365
10 : < 0.03927817 > ( 74.39718 ) -0.3378273 0.5129802 1.778365
11 : < 0.03927817 > ( 74.39718 ) -0.3378273 0.5129802 1.778365
12 : < 0.03948621 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
13 : < 0.03948621 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
14 : < 0.03948621 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
15 : < 0.02788168 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
16 : < 0.02788168 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
17 : < 0.02617098 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
18 : < 0.02524264 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
19 : < 0.02524264 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
20 : < 0.02524264 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
21 : < 0.02524264 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
22 : < 0.01772933 > ( 73.30971 ) -0.8341016 0.6059878 1.71497
23 : < 0.02159854 > ( 69.11505 ) 0.2343087 0.4190062 0.9817464
24 : < 0.02029938 > ( 69.11505 ) 0.2343087 0.4190062 0.9817464
25 : < 0.01953304 > ( 69.11505 ) 0.2343087 0.4190062 0.9817464
26 : < 0.02499217 > ( 65.95842 ) -0.2035348 0.4841021 1.299173
27 : < 0.02847736 > ( 62.03924 ) 0.5267555 0.3668914 1.57333
28 : < 0.02847736 > ( 62.03924 ) 0.5267555 0.3668914 1.57333
29 : < 0.04481057 > ( 48.45487 ) 0.7374674 0.2682415 0.6802689
30 : < 0.0453112 > ( 48.16539 ) 0.8264108 0.2632609 0.7365291
31 : < 0.0453112 > ( 48.16539 ) 0.8264108 0.2632609 0.7365291
32 : < 0.04215336 > ( 48.16539 ) 0.8264108 0.2632609 0.7365291
33 : < 0.03737598 > ( 48.16539 ) 0.8264108 0.2632609 0.7365291
34 : < 0.03252657 > ( 48.16539 ) 0.8264108 0.2632609 0.7365291
35 : < 0.03700532 > ( 45.30775 ) 0.6699325 0.2994666 1.001316
36 : < 0.0441015 > ( 40.72606 ) 0.6993896 0.2421655 0.3846967
37 : < 0.04039156 > ( 40.72606 ) 0.6993896 0.2421655 0.3846967
38 : < 0.04039156 > ( 40.72606 ) 0.6993896 0.2421655 0.3846967
39 : < 0.04185193 > ( 37.63873 ) 1.12917 0.1525702 0.4645425
40 : < 0.04225952 > ( 37.40305 ) 1.125178 0.1548615 0.4429865
41 : < 0.04225952 > ( 37.40305 ) 1.125178 0.1548615 0.4429865
42 : < 0.07057168 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
43 : < 0.07057168 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
44 : < 0.07057168 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
45 : < 0.06955404 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
46 : < 0.06955404 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
47 : < 0.06348737 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
48 : < 0.04918273 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
49 : < 0.04790284 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
50 : < 0.04790284 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
51 : < 0.04790284 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
52 : < 0.04790284 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
53 : < 0.04605099 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
54 : < 0.04605099 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
55 : < 0.04605099 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
56 : < 0.04279958 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
57 : < 0.04046586 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
58 : < 0.04021044 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
59 : < 0.04021044 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
60 : < 0.04021044 > ( 21.00198 ) 1.025347 0.2053427 0.3057674
61 : < 0.03906959 > ( 20.3644 ) 1.152072 0.1827706 0.2738405
62 : < 0.03600523 > ( 20.3644 ) 1.152072 0.1827706 0.2738405
63 : < 0.03266856 > ( 20.3644 ) 1.152072 0.1827706 0.2738405
64 : < 0.03251645 > ( 20.3644 ) 1.152072 0.1827706 0.2738405
65 : < 0.02933301 > ( 20.3644 ) 1.152072 0.1827706 0.2738405
66 : < 0.03346915 > ( 14.81659 ) 1.078148 0.1889467 0.2707001
67 : < 0.03334164 > ( 14.81659 ) 1.078148 0.1889467 0.2707001
68 : < 0.03233429 > ( 14.81659 ) 1.078148 0.1889467 0.2707001
69 : < 0.03233429 > ( 14.81659 ) 1.078148 0.1889467 0.2707001
70 : < 0.02906518 > ( 14.81659 ) 1.078148 0.1889467 0.2707001
71 : < 0.02874146 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
72 : < 0.02874146 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
73 : < 0.02874146 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
74 : < 0.02874146 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
75 : < 0.02874146 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
76 : < 0.02674445 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
77 : < 0.02387427 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
78 : < 0.02230057 > ( 14.08062 ) 1.158924 0.1805676 0.3065078
79 : < 0.02130983 > ( 13.2892 ) 0.9651475 0.2038451 0.2439636
80 : < 0.02130983 > ( 13.2892 ) 0.9651475 0.2038451 0.2439636
81 : < 0.01689651 > ( 13.2892 ) 0.9651475 0.2038451 0.2439636
82 : < 0.01464567 > ( 13.2892 ) 0.9651475 0.2038451 0.2439636
83 : < 0.01525628 > ( 12.93613 ) 0.9775093 0.2022276 0.3215288
84 : < 0.01835869 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
85 : < 0.01835869 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
86 : < 0.01770692 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
87 : < 0.01471284 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
88 : < 0.01471284 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
89 : < 0.01253413 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
90 : < 0.01131882 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
91 : < 0.01131882 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
92 : < 0.01065199 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
93 : < 0.01065199 > ( 10.47225 ) 1.11801 0.1844735 0.2804341
94 : < 0.007845709 > ( 10.46493 ) 0.9756042 0.2022242 0.2583403
95 : < 0.008407629 > ( 10.06023 ) 0.9796113 0.2018235 0.259395
96 : < 0.008407629 > ( 10.06023 ) 0.9796113 0.2018235 0.259395
97 : < 0.007332208 > ( 10.06023 ) 0.9796113 0.2018235 0.259395
98 : < 0.007332208 > ( 10.06023 ) 0.9796113 0.2018235 0.259395
99 : < 0.006638165 > ( 10.01995 ) 1.109463 0.1859977 0.2820748
100 : < 0.003880604 > ( 10.01995 ) 1.109463 0.1859977 0.2820748
101 : < 0.003531782 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
102 : < 0.003531782 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
103 : < 0.003111281 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
104 : < 0.002983563 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
105 : < 0.002851313 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
106 : < 0.002342157 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
107 : < 0.002258866 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
108 : < 0.002156122 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
109 : < 0.002086869 > ( 9.533195 ) 0.9890986 0.2011524 0.2684853
110 : < 0.002088711 > ( 9.479099 ) 0.9946557 0.2007109 0.2768415
111 : < 0.002088711 > ( 9.479099 ) 0.9946557 0.2007109 0.2768415
112 : < 0.001690111 > ( 9.319985 ) 0.9894255 0.2009304 0.2668412
113 : < 0.001690111 > ( 9.319985 ) 0.9894255 0.2009304 0.2668412
114 : < 0.001660298 > ( 9.319985 ) 0.9894255 0.2009304 0.2668412
115 : < 0.001538055 > ( 9.319985 ) 0.9894255 0.2009304 0.2668412
116 : < 0.001330675 > ( 9.319985 ) 0.9894255 0.2009304 0.2668412
117 : < 0.001330675 > ( 9.319985 ) 0.9894255 0.2009304 0.2668412
118 : < 0.001178504 > ( 9.319985 ) 0.9894255 0.2009304 0.2668412
119 : < 0.001207756 > ( 9.190183 ) 0.9961333 0.2002383 0.2691974
120 : < 0.001160036 > ( 9.190183 ) 0.9961333 0.2002383 0.2691974
121 : < 0.0009372194 > ( 9.190183 ) 0.9961333 0.2002383 0.2691974
122 : < 0.0006897241 > ( 9.062121 ) 0.9913011 0.2009191 0.2807659
123 : < 0.0004994994 > ( 9.062121 ) 0.9913011 0.2009191 0.2807659
124 : < 0.0003642911 > ( 8.971563 ) 0.996769 0.2001714 0.2752187
125 : < 0.0003861323 > ( 8.91222 ) 0.9971377 0.2000103 0.2720033
126 : < 0.0002960887 > ( 8.91222 ) 0.9971377 0.2000103 0.2720033
127 : < 0.0002960887 > ( 8.91222 ) 0.9971377 0.2000103 0.2720033
128 : < 0.0004329925 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
129 : < 0.0004206123 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
130 : < 0.0004060584 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
131 : < 0.0002371743 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
132 : < 0.0002088745 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
133 : < 0.0002065403 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
134 : < 0.0002065403 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
135 : < 0.0002065403 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
136 : < 0.0002065403 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
137 : < 0.0001787196 > ( 8.824072 ) 0.996229 0.2001736 0.2772071
138 : < 0.0001430716 > ( 8.822792 ) 0.99864 0.199868 0.2757198
139 : < 0.0001318279 > ( 8.822792 ) 0.99864 0.199868 0.2757198
140 : < 0.0001318279 > ( 8.822792 ) 0.99864 0.199868 0.2757198
141 : < 0.0001105908 > ( 8.822792 ) 0.99864 0.199868 0.2757198
142 : < 8.527524e-05 > ( 8.822792 ) 0.99864 0.199868 0.2757198
143 : < 8.040956e-05 > ( 8.822792 ) 0.99864 0.199868 0.2757198
144 : < 7.728479e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
145 : < 6.599119e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
146 : < 6.145225e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
147 : < 6.145225e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
148 : < 6.145225e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
149 : < 5.919351e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
150 : < 5.919351e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
151 : < 5.919351e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
152 : < 5.455488e-05 > ( 8.816951 ) 0.9983513 0.1998984 0.2757817
153 : < 4.329765e-05 > ( 8.815625 ) 0.9979169 0.2000574 0.2813079
154 : < 3.190985e-05 > ( 8.815625 ) 0.9979169 0.2000574 0.2813079
155 : < 3.183399e-05 > ( 8.815625 ) 0.9979169 0.2000574 0.2813079
156 : < 3.043743e-05 > ( 8.810467 ) 0.9984632 0.1999651 0.2798475
157 : < 3.043743e-05 > ( 8.810467 ) 0.9984632 0.1999651 0.2798475
158 : < 2.712755e-05 > ( 8.810467 ) 0.9984632 0.1999651 0.2798475
159 : < 2.344143e-05 > ( 8.810467 ) 0.9984632 0.1999651 0.2798475
160 : < 1.938364e-05 > ( 8.810467 ) 0.9984632 0.1999651 0.2798475
161 : < 1.938364e-05 > ( 8.810467 ) 0.9984632 0.1999651 0.2798475
162 : < 1.938364e-05 > ( 8.810467 ) 0.9984632 0.1999651 0.2798475
163 : < 2.483845e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
164 : < 2.396539e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
165 : < 2.357718e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
166 : < 2.153405e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
167 : < 1.952711e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
168 : < 1.60004e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
169 : < 1.441178e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
170 : < 1.424015e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
171 : < 1.424015e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
172 : < 1.424015e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
173 : < 1.424015e-05 > ( 8.807313 ) 0.9989313 0.1998961 0.2791821
174 : < 9.492448e-06 > ( 8.807178 ) 0.9984825 0.1999463 0.2790836
175 : < 9.723306e-06 > ( 8.807044 ) 0.9983801 0.1999511 0.2787266
176 : < 9.723306e-06 > ( 8.807044 ) 0.9983801 0.1999511 0.2787266
177 : < 4.608272e-06 > ( 8.807044 ) 0.9983801 0.1999511 0.2787266
178 : < 3.843576e-06 > ( 8.807044 ) 0.9983801 0.1999511 0.2787266
179 : < 3.589787e-06 > ( 8.807044 ) 0.9983801 0.1999511 0.2787266
180 : < 3.308264e-06 > ( 8.807044 ) 0.9983801 0.1999511 0.2787266
181 : < 3.105584e-06 > ( 8.807044 ) 0.9983801 0.1999511 0.2787266
182 : < 1.838642e-06 > ( 8.806646 ) 0.9984219 0.1999489 0.2788749
183 : < 1.812503e-06 > ( 8.806646 ) 0.9984219 0.1999489 0.2788749
184 : < 1.696105e-06 > ( 8.806646 ) 0.9984219 0.1999489 0.2788749
185 : < 1.359045e-06 > ( 8.806646 ) 0.9984219 0.1999489 0.2788749
186 : < 1.004049e-06 > ( 8.806646 ) 0.9984219 0.1999489 0.2788749
187 : < 9.714483e-07 > ( 8.806613 ) 0.9984424 0.199957 0.27942
188 : < 1.220559e-06 > ( 8.806437 ) 0.998697 0.199927 0.2794037
189 : < 1.134389e-06 > ( 8.806437 ) 0.998697 0.199927 0.2794037
190 : < 8.709596e-07 > ( 8.806437 ) 0.998697 0.199927 0.2794037
191 : < 6.993882e-07 > ( 8.806437 ) 0.998697 0.199927 0.2794037
192 : < 4.94811e-07 > ( 8.806437 ) 0.998697 0.199927 0.2794037
193 : < 4.94811e-07 > ( 8.806437 ) 0.998697 0.199927 0.2794037
194 : < 4.94811e-07 > ( 8.806437 ) 0.998697 0.199927 0.2794037
195 : < 8.587017e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
196 : < 8.119472e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
197 : < 7.407826e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
198 : < 7.081929e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
199 : < 6.890458e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
200 : < 5.143002e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
201 : < 4.668218e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
202 : < 4.501995e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
203 : < 3.808399e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
204 : < 3.18445e-07 > ( 8.806209 ) 0.9987383 0.1999174 0.2791605
205 : < 2.358047e-07 > ( 8.806181 ) 0.998796 0.199911 0.2791792
206 : < 1.970169e-07 > ( 8.806181 ) 0.998796 0.199911 0.2791792
207 : < 1.568182e-07 > ( 8.806181 ) 0.998796 0.199911 0.2791792
208 : < 1.340663e-07 > ( 8.806177 ) 0.9986676 0.199924 0.279079
209 : < 1.340663e-07 > ( 8.806177 ) 0.9986676 0.199924 0.279079
210 : < 9.675004e-08 > ( 8.806176 ) 0.9988367 0.1999053 0.2791298
Time elapsed:  1.185 0.018 1.206 0 0 
> showProc.time()
Time elapsed:  4.126 0.053 4.189 
> 
> plot(y ~ x, d.exp30, main = "Data = d.exp30")
> cTr <- adjustcolor("red4", 0.5)
> cLS <- adjustcolor("blue2", 0.5)
> cE <- curve(Expo(x, a=1, b=0.2), 0, 10, n=1+2^9, col=cTr, lwd=2, lty=2, add=TRUE)
> lines(d.exp30$x, fitted(Cfit), col=cLS, lwd=3)
> ll <- length(m1 <- sapply(ls.str(patt="^Rfit"), get, simplify=FALSE))
> .tmp <- lapply(m1, function(.) lines(d.exp30$x, fitted(.)))
> legend("topleft", c("true", "LS", names(m1)),
+        lwd=c(2,3, rep(1,ll)), lty=c(2,1, rep(1,ll)),
+        col=c(cTr,cLS, rep(par("fg"),ll)), bty="n", inset=.01)
> showProc.time()
Time elapsed:  0.01 0.001 0.01 
> 
> ## 40% outliers present {use different data name: seen in print(<fitted model>)
> d.exp40out <- within(d.exp30, y[15:27] <- y[15:27] + 100)
> Cfit.40out  <- update(Cfit, data = d.exp40out,
+                       control = nls.control(tol = Cfit$control$tol))
> Cfit.no.out <- update(Cfit.40out, subset = -(15:27))
> 
> if(doExtras) {
+ Rf.out.MM.S.bisquare   <- update(Rfit.MM.S.bisquare, data=d.exp40out)
+ Rf.out.MM.S.lqq        <- update(Rf.out.MM.S.bisquare, psi = "lqq")
+ Rf.out.MM.S.optimal    <- update(Rf.out.MM.S.bisquare, psi = "optimal")
+ Rf.out.MM.S.hampel     <- update(Rf.out.MM.S.bisquare, psi = "hampel")
+ showProc.time()
+ }
> Rf.out.MM.lts.bisquare <- update(Rfit.MM.S.bisquare, data=d.exp40out, init= "lts")
> Rf.out.MM.lts.lqq      <- update(Rf.out.MM.lts.bisquare, psi= "lqq") #-----------
> Rf.out.MM.lts.optimal  <- update(Rf.out.MM.lts.bisquare, psi= "optimal")
> Rf.out.MM.lts.hampel   <- update(Rf.out.MM.lts.bisquare, psi= "hampel")
> showProc.time()
Time elapsed:  0.692 0.004 0.7 
> 
> Rf.out.tau.bisquare <- update(Rfit.tau.bisquare, data=d.exp40out)
> Rf.out.tau.optimal  <- update(Rfit.tau.bisquare, data=d.exp40out, psi = "optimal")
> Rf.out.CM  <- update(Rfit.CM,  data=d.exp40out)
> Rf.out.mtl <- update(Rfit.mtl, data=d.exp40out)
1 : < 0.01153379 > ( 42.35703 ) 1 0.2 1
2 : < 0.003673327 > ( 42.35703 ) 1 0.2 1
3 : < 0.00337861 > ( 42.35703 ) 1 0.2 1
4 : < 0.00291373 > ( 42.35703 ) 1 0.2 1
5 : < 0.002783946 > ( 42.35703 ) 1 0.2 1
6 : < 0.002497939 > ( 42.35703 ) 1 0.2 1
7 : < 0.002473904 > ( 42.35703 ) 1 0.2 1
8 : < 0.002048598 > ( 42.35703 ) 1 0.2 1
9 : < 0.002022713 > ( 42.35703 ) 1 0.2 1
10 : < 0.001955078 > ( 42.35703 ) 1 0.2 1
11 : < 0.001848927 > ( 42.35703 ) 1 0.2 1
12 : < 0.001790502 > ( 42.35703 ) 1 0.2 1
13 : < 0.001604333 > ( 42.35703 ) 1 0.2 1
14 : < 0.0015613 > ( 42.35703 ) 1 0.2 1
15 : < 0.001548255 > ( 42.35703 ) 1 0.2 1
16 : < 0.001320382 > ( 42.35703 ) 1 0.2 1
17 : < 0.001126738 > ( 42.35703 ) 1 0.2 1
18 : < 0.001098963 > ( 42.35703 ) 1 0.2 1
19 : < 0.00100647 > ( 42.35703 ) 1 0.2 1
20 : < 0.0009029127 > ( 42.35703 ) 1 0.2 1
21 : < 0.0009029127 > ( 42.35703 ) 1 0.2 1
22 : < 0.0008534112 > ( 42.35703 ) 1 0.2 1
23 : < 0.0006936993 > ( 42.35703 ) 1 0.2 1
24 : < 0.0006776356 > ( 42.35703 ) 1 0.2 1
25 : < 0.0006641757 > ( 42.35703 ) 1 0.2 1
26 : < 0.0006444322 > ( 42.35703 ) 1 0.2 1
27 : < 0.0005841005 > ( 42.35703 ) 1 0.2 1
28 : < 0.0005651725 > ( 42.35703 ) 1 0.2 1
29 : < 0.0005651725 > ( 42.35703 ) 1 0.2 1
30 : < 0.0005651725 > ( 42.35703 ) 1 0.2 1
31 : < 0.0005064299 > ( 42.35703 ) 1 0.2 1
32 : < 0.000464359 > ( 42.35703 ) 1 0.2 1
33 : < 0.000464359 > ( 42.35703 ) 1 0.2 1
34 : < 0.000464359 > ( 42.35703 ) 1 0.2 1
35 : < 0.000464359 > ( 42.35703 ) 1 0.2 1
36 : < 0.000464359 > ( 42.35703 ) 1 0.2 1
37 : < 0.0004118869 > ( 42.35703 ) 1 0.2 1
38 : < 0.0004118869 > ( 42.35703 ) 1 0.2 1
39 : < 0.0004118869 > ( 42.35703 ) 1 0.2 1
40 : < 0.0004111413 > ( 42.35703 ) 1 0.2 1
41 : < 0.0004111413 > ( 42.35703 ) 1 0.2 1
42 : < 0.0004111413 > ( 42.35703 ) 1 0.2 1
43 : < 0.0004066567 > ( 42.35703 ) 1 0.2 1
44 : < 0.000392204 > ( 42.35703 ) 1 0.2 1
45 : < 0.000392204 > ( 42.35703 ) 1 0.2 1
46 : < 0.0003681591 > ( 42.35703 ) 1 0.2 1
47 : < 0.0003439794 > ( 42.35703 ) 1 0.2 1
48 : < 0.0003439794 > ( 42.35703 ) 1 0.2 1
49 : < 0.0003439794 > ( 42.35703 ) 1 0.2 1
50 : < 0.0002933966 > ( 42.35703 ) 1 0.2 1
51 : < 0.0002933966 > ( 42.35703 ) 1 0.2 1
52 : < 0.0002819932 > ( 42.35703 ) 1 0.2 1
53 : < 0.0002799635 > ( 42.35703 ) 1 0.2 1
54 : < 0.0002799635 > ( 42.35703 ) 1 0.2 1
55 : < 0.0002767717 > ( 42.35703 ) 1 0.2 1
56 : < 0.0002747521 > ( 42.35703 ) 1 0.2 1
57 : < 0.0002339901 > ( 42.35703 ) 1 0.2 1
58 : < 0.0002339901 > ( 42.35703 ) 1 0.2 1
59 : < 0.0002339901 > ( 42.35703 ) 1 0.2 1
60 : < 0.000225763 > ( 42.35703 ) 1 0.2 1
61 : < 0.0001985915 > ( 42.35703 ) 1 0.2 1
62 : < 0.0001633002 > ( 42.32343 ) 1 0.1999175 1
63 : < 0.0001792954 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
64 : < 0.000174381 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
65 : < 0.0001591021 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
66 : < 0.0001535652 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
67 : < 0.0001243303 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
68 : < 9.974462e-05 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
69 : < 7.140795e-05 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
70 : < 6.287991e-05 > ( 40.56217 ) 0.9818961 0.2007109 0.7267718
71 : < 6.339223e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
72 : < 5.711696e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
73 : < 5.100817e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
74 : < 5.100817e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
75 : < 5.100817e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
76 : < 3.508933e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
77 : < 3.497898e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
78 : < 2.50246e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
79 : < 1.661019e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
80 : < 1.661019e-05 > ( 40.52164 ) 0.9804174 0.2006626 0.868567
81 : < 1.768829e-05 > ( 40.37452 ) 0.9976081 0.1985864 0.8404184
82 : < 1.269339e-05 > ( 40.37452 ) 0.9976081 0.1985864 0.8404184
83 : < 1.29114e-05 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
84 : < 1.273485e-05 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
85 : < 1.090232e-05 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
86 : < 9.610051e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
87 : < 9.610051e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
88 : < 9.025505e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
89 : < 7.576937e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
90 : < 5.138673e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
91 : < 4.180825e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
92 : < 3.033881e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
93 : < 2.700212e-06 > ( 40.15329 ) 0.9716226 0.2010993 0.7776579
94 : < 3.36982e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
95 : < 2.523651e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
96 : < 2.119828e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
97 : < 1.810414e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
98 : < 1.407748e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
99 : < 1.407748e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
100 : < 1.366999e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
101 : < 1.366999e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
102 : < 1.366999e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
103 : < 1.366999e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
104 : < 1.130012e-06 > ( 40.09955 ) 0.9748063 0.2002375 0.7962571
105 : < 1.132732e-06 > ( 40.09933 ) 0.9846944 0.1986695 0.7981272
106 : < 6.734879e-07 > ( 40.09898 ) 0.9751832 0.1999912 0.7780438
107 : < 6.734879e-07 > ( 40.09898 ) 0.9751832 0.1999912 0.7780438
108 : < 8.150313e-07 > ( 40.08778 ) 0.9866913 0.1987316 0.7984691
109 : < 6.325092e-07 > ( 40.08767 ) 0.9902516 0.1983568 0.7871149
110 : < 5.868936e-07 > ( 40.08767 ) 0.9902516 0.1983568 0.7871149
111 : < 5.088751e-07 > ( 40.08767 ) 0.9902516 0.1983568 0.7871149
112 : < 3.340762e-07 > ( 40.08269 ) 0.9788623 0.1996836 0.7894771
113 : < 3.173349e-07 > ( 40.08269 ) 0.9788623 0.1996836 0.7894771
114 : < 3.126277e-07 > ( 40.08269 ) 0.9788623 0.1996836 0.7894771
115 : < 3.018624e-07 > ( 40.07867 ) 0.9851621 0.1989352 0.7835585
116 : < 2.860564e-07 > ( 40.07867 ) 0.9851621 0.1989352 0.7835585
117 : < 2.102942e-07 > ( 40.07861 ) 0.9827752 0.1992413 0.7908618
118 : < 1.652409e-07 > ( 40.07861 ) 0.9827752 0.1992413 0.7908618
119 : < 1.644253e-07 > ( 40.07854 ) 0.9847127 0.1989414 0.7859561
120 : < 1.61058e-07 > ( 40.07854 ) 0.9847127 0.1989414 0.7859561
121 : < 1.528496e-07 > ( 40.07765 ) 0.9827752 0.1992413 0.7852453
122 : < 1.16841e-07 > ( 40.07765 ) 0.9827752 0.1992413 0.7852453
123 : < 1.16841e-07 > ( 40.07765 ) 0.9827752 0.1992413 0.7852453
124 : < 1.16841e-07 > ( 40.07765 ) 0.9827752 0.1992413 0.7852453
125 : < 1.076948e-07 > ( 40.07765 ) 0.9827752 0.1992413 0.7852453
126 : < 9.502174e-08 > ( 40.07765 ) 0.9827752 0.1992413 0.7852453
> showProc.time()
Time elapsed:  3.885 0.041 4.023 
> 
> plot(y ~ x, d.exp40out, main = "Data = d.exp40out")
> cE <- curve(Expo(x, a=1, b=0.2), 0, 10, n=1+2^9, col=cTr, lwd=2, lty=2, add=TRUE)
> ll <- length(m1 <- sapply(ls.str(patt="^Rf.out"), get, simplify=FALSE))
> .tmp <- lapply(m1, function(.) lines(d.exp40out$x, fitted(.)))
> xx <- local({p <- par("usr"); seq(p[1],p[2], length.out=256)})
> lines(xx, predict(Cfit.no.out, list(x=xx)), col=cLS, lwd=3)
> lines(xx, predict(Cfit.40out , list(x=xx)), col=cLS, lty=2)
> legend("topleft", c("true", "LS [w/o outl]", "LS", names(m1)),
+        lwd=c(2,3, rep(1,1+ll)), lty=c(2,1,2, rep(1,ll)),
+        col=c(cTr,cLS,cLS, rep(par("fg"),ll)), bty="n", inset=.01)
> showProc.time()
Time elapsed:  0.007 0 0.008 
> 
> ## presence of high leverage point outliers
> d.exp.Hlev <- within(d.exp40out, {
+     x[28:30] <- x[28:30] + 10   ## shift  10
+     y <- Expo(x, 1, 0.2) + err
+     y[28:30] <- y[28:30] + 500
+ })
> Cfit.Hlev <- update(Cfit.40out, data = d.exp.Hlev)
> Cfit.no.Hlev <- update(Cfit.Hlev, subset = -(28:30))
> showProc.time()
Time elapsed:  0.01 0 0.01 
> 
> if(doExtras) {
+ Rf.Hlev.MM.S.bisquare   <- update(Rfit.MM.S.bisquare, data = d.exp.Hlev)
+ Rf.Hlev.MM.S.lqq        <- update(Rf.Hlev.MM.S.bisquare, psi = "lqq")
+ Rf.Hlev.MM.S.optimal    <- update(Rf.Hlev.MM.S.bisquare, psi = "optimal")
+ Rf.Hlev.MM.S.hampel     <- update(Rf.Hlev.MM.S.bisquare, psi = "hampel")
+ showProc.time()
+ }
> Rf.Hlev.MM.lts.bisquare <- update(Rfit.MM.S.bisquare, data = d.exp.Hlev, init="lts")
> Rf.Hlev.MM.lts.lqq      <- update(Rf.Hlev.MM.lts.bisquare, psi= "lqq")
> Rf.Hlev.MM.lts.optimal  <- update(Rf.Hlev.MM.lts.bisquare, psi="optimal")
> Rf.Hlev.MM.lts.hampel   <- update(Rf.Hlev.MM.lts.bisquare, psi= "hampel")
> showProc.time()
Time elapsed:  0.566 0.004 0.572 
> 
> Rf.Hlev.tau.bisquare <- update(Rfit.tau.bisquare, data = d.exp.Hlev)
> Rf.Hlev.tau.optimal  <- update(Rf.Hlev.tau.bisquare, psi = "optimal")
> Rf.Hlev.CM  <- update(Rfit.CM,  data = d.exp.Hlev)
> Rf.Hlev.mtl <- update(Rfit.mtl, data = d.exp.Hlev)
1 : < 0.0001601683 > ( 68.41264 ) 1 0.2 1
2 : < 0.0001138482 > ( 68.41264 ) 1 0.2 1
3 : < 0.0001021019 > ( 68.41264 ) 1 0.2 1
4 : < 6.13876e-05 > ( 68.41264 ) 1 0.2 1
5 : < 5.130817e-05 > ( 68.41264 ) 1 0.2 1
6 : < 4.97602e-05 > ( 68.41264 ) 1 0.2 1
7 : < 4.608372e-05 > ( 68.41264 ) 1 0.2 1
8 : < 4.50174e-05 > ( 68.41264 ) 1 0.2 1
9 : < 4.465533e-05 > ( 68.41264 ) 1 0.2 1
10 : < 4.317915e-05 > ( 68.41264 ) 1 0.2 1
11 : < 4.091947e-05 > ( 68.41264 ) 1 0.2 1
12 : < 4.091947e-05 > ( 68.41264 ) 1 0.2 1
13 : < 3.990377e-05 > ( 68.41264 ) 1 0.2 1
14 : < 3.658011e-05 > ( 68.41264 ) 1 0.2 1
15 : < 3.658011e-05 > ( 68.41264 ) 1 0.2 1
16 : < 3.658011e-05 > ( 68.41264 ) 1 0.2 1
17 : < 3.212799e-05 > ( 68.41264 ) 1 0.2 1
18 : < 3.212799e-05 > ( 68.41264 ) 1 0.2 1
19 : < 3.124968e-05 > ( 68.41264 ) 1 0.2 1
20 : < 3.06243e-05 > ( 68.41264 ) 1 0.2 1
21 : < 2.852961e-05 > ( 68.41264 ) 1 0.2 1
22 : < 2.673556e-05 > ( 68.41264 ) 1 0.2 1
23 : < 2.443653e-05 > ( 68.41264 ) 1 0.2 1
24 : < 2.027347e-05 > ( 68.41264 ) 1 0.2 1
25 : < 1.84423e-05 > ( 68.41264 ) 1 0.2 1
26 : < 1.782133e-05 > ( 68.41264 ) 1 0.2 1
27 : < 1.782133e-05 > ( 68.41264 ) 1 0.2 1
28 : < 1.782133e-05 > ( 68.41264 ) 1 0.2 1
29 : < 1.782133e-05 > ( 68.41264 ) 1 0.2 1
30 : < 1.643732e-05 > ( 68.41264 ) 1 0.2 1
31 : < 1.439059e-05 > ( 68.41264 ) 1 0.2 1
32 : < 1.439059e-05 > ( 68.41264 ) 1 0.2 1
33 : < 1.439059e-05 > ( 68.41264 ) 1 0.2 1
34 : < 1.290952e-05 > ( 67.60266 ) 0.2535923 0.3464205 0.8083434
35 : < 1.194244e-05 > ( 67.60266 ) 0.2535923 0.3464205 0.8083434
36 : < 1.144557e-05 > ( 67.60266 ) 0.2535923 0.3464205 0.8083434
37 : < 1.095731e-05 > ( 67.60266 ) 0.2535923 0.3464205 0.8083434
38 : < 1.024522e-05 > ( 67.60266 ) 0.2535923 0.3464205 0.8083434
39 : < 9.628711e-06 > ( 67.60266 ) 0.2535923 0.3464205 0.8083434
40 : < 3.446626e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
41 : < 3.446626e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
42 : < 3.348924e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
43 : < 3.336618e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
44 : < 3.336618e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
45 : < 3.33301e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
46 : < 3.302303e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
47 : < 3.260219e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
48 : < 3.237543e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
49 : < 3.069178e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
50 : < 3.069178e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
51 : < 3.030678e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
52 : < 2.876879e-05 > ( 39.32803 ) 0.8247664 0.2205858 0.4098886
53 : < 3.04638e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
54 : < 3.04638e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
55 : < 3.026313e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
56 : < 3.026313e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
57 : < 3.026313e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
58 : < 2.92275e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
59 : < 2.906286e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
60 : < 2.725978e-05 > ( 37.58193 ) 0.7588184 0.2437278 0.3987774
61 : < 2.556996e-05 > ( 34.94076 ) 0.9423442 0.2205858 0.4039956
62 : < 2.493678e-05 > ( 34.94076 ) 0.9423442 0.2205858 0.4039956
63 : < 2.444023e-05 > ( 34.94076 ) 0.9423442 0.2205858 0.4039956
64 : < 2.368137e-05 > ( 34.94076 ) 0.9423442 0.2205858 0.4039956
65 : < 2.41407e-05 > ( 34.46759 ) 0.8026658 0.2363054 0.4285486
66 : < 2.41407e-05 > ( 34.46759 ) 0.8026658 0.2363054 0.4285486
67 : < 2.335166e-05 > ( 34.46759 ) 0.8026658 0.2363054 0.4285486
68 : < 2.335166e-05 > ( 34.46759 ) 0.8026658 0.2363054 0.4285486
69 : < 3.106015e-05 > ( 26.52676 ) 1.031062 0.1911875 0.3200369
70 : < 3.205199e-05 > ( 24.2981 ) 0.8605461 0.2244179 0.3289552
71 : < 3.205199e-05 > ( 24.2981 ) 0.8605461 0.2244179 0.3289552
72 : < 3.205199e-05 > ( 24.2981 ) 0.8605461 0.2244179 0.3289552
73 : < 2.947894e-05 > ( 24.2981 ) 0.8605461 0.2244179 0.3289552
74 : < 2.759774e-05 > ( 24.2981 ) 0.8605461 0.2244179 0.3289552
75 : < 2.746056e-05 > ( 24.2981 ) 0.8605461 0.2244179 0.3289552
76 : < 2.673714e-05 > ( 24.2981 ) 0.8605461 0.2244179 0.3289552
77 : < 2.890186e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
78 : < 2.890186e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
79 : < 2.044791e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
80 : < 1.828167e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
81 : < 1.782659e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
82 : < 1.762208e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
83 : < 1.762208e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
84 : < 1.630771e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
85 : < 1.560484e-05 > ( 22.06813 ) 0.8706821 0.228693 0.3573977
86 : < 1.738458e-05 > ( 20.23475 ) 0.9222769 0.2176411 0.2788694
87 : < 1.738458e-05 > ( 20.23475 ) 0.9222769 0.2176411 0.2788694
88 : < 1.593304e-05 > ( 20.23475 ) 0.9222769 0.2176411 0.2788694
89 : < 1.593304e-05 > ( 20.23475 ) 0.9222769 0.2176411 0.2788694
90 : < 1.460765e-05 > ( 20.23475 ) 0.9222769 0.2176411 0.2788694
91 : < 1.617459e-05 > ( 17.24214 ) 0.9727733 0.2076601 0.2968244
92 : < 1.617459e-05 > ( 17.24214 ) 0.9727733 0.2076601 0.2968244
93 : < 1.617459e-05 > ( 17.24214 ) 0.9727733 0.2076601 0.2968244
94 : < 1.283234e-05 > ( 17.24214 ) 0.9727733 0.2076601 0.2968244
95 : < 1.523677e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
96 : < 1.275161e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
97 : < 1.275161e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
98 : < 1.118314e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
99 : < 1.118314e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
100 : < 1.108816e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
101 : < 1.108816e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
102 : < 1.108816e-05 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
103 : < 9.346299e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
104 : < 8.254983e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
105 : < 7.253481e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
106 : < 7.253481e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
107 : < 6.080798e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
108 : < 4.713648e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
109 : < 4.713648e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
110 : < 4.103019e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
111 : < 3.721509e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
112 : < 3.721509e-06 > ( 13.84062 ) 0.8606965 0.2319935 0.3328072
113 : < 2.473141e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
114 : < 2.473141e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
115 : < 2.12738e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
116 : < 2.12738e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
117 : < 2.12738e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
118 : < 2.003917e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
119 : < 2.003917e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
120 : < 1.607573e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
121 : < 1.607573e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
122 : < 1.342794e-06 > ( 13.75531 ) 0.860838 0.2321114 0.3387729
123 : < 1.378943e-06 > ( 13.68876 ) 0.8685337 0.2310894 0.3346628
124 : < 1.378943e-06 > ( 13.68876 ) 0.8685337 0.2310894 0.3346628
125 : < 1.360611e-06 > ( 13.68876 ) 0.8685337 0.2310894 0.3346628
126 : < 1.169707e-06 > ( 13.68876 ) 0.8685337 0.2310894 0.3346628
127 : < 1.169707e-06 > ( 13.68876 ) 0.8685337 0.2310894 0.3346628
128 : < 1.169707e-06 > ( 13.68876 ) 0.8685337 0.2310894 0.3346628
129 : < 9.799633e-07 > ( 13.6015 ) 0.8717238 0.2303728 0.3348496
130 : < 7.655734e-07 > ( 13.59144 ) 0.8724581 0.2306016 0.3407885
131 : < 7.655734e-07 > ( 13.59144 ) 0.8724581 0.2306016 0.3407885
132 : < 7.708567e-07 > ( 13.586 ) 0.8794045 0.2293528 0.3348149
133 : < 6.515811e-07 > ( 13.53441 ) 0.8762416 0.2301322 0.3492715
134 : < 4.995874e-07 > ( 13.5234 ) 0.8772825 0.2299825 0.3514714
135 : < 3.263278e-07 > ( 13.5234 ) 0.8772825 0.2299825 0.3514714
136 : < 2.198879e-07 > ( 13.5234 ) 0.8772825 0.2299825 0.3514714
137 : < 1.992533e-07 > ( 13.5234 ) 0.8772825 0.2299825 0.3514714
138 : < 1.992533e-07 > ( 13.5234 ) 0.8772825 0.2299825 0.3514714
139 : < 1.992533e-07 > ( 13.5234 ) 0.8772825 0.2299825 0.3514714
140 : < 1.229386e-07 > ( 13.50483 ) 0.8801867 0.2293926 0.3458295
141 : < 1.012376e-07 > ( 13.50483 ) 0.8801867 0.2293926 0.3458295
142 : < 9.729146e-08 > ( 13.50483 ) 0.8801867 0.2293926 0.3458295
> showProc.time()
Time elapsed:  2.471 0.02 2.501 
> 
> plot(y ~ x, d.exp.Hlev, main = "Data = d.exp.Hlev")
> cE <- curve(Expo(x, a=1, b=0.2), 0, par("usr")[2], n=1+2^9, col=cTr, lwd=2, lty=2, add=TRUE)
> x.H <- seq(par("usr")[1], par("usr")[2], length.out = 256)
> ll <- length(m1 <- sapply(ls.str(patt="^Rf.Hlev"), get, simplify=FALSE))
> .tmp <- lapply(m1, function(.) lines(x.H, predict(., list(x=x.H))))
> lines(x.H, predict(Cfit.no.Hlev, list(x=x.H)), col=cLS, lwd=3)## L.S.(<good data>)
> lines(x.H, predict(Cfit.Hlev,    list(x=x.H)), col=cLS, lty=2)## L.S.
> legend("topleft", c("true", "LS [w/o outl]", "LS", names(m1)),
+        lwd=c(2,3, rep(1,1+ll)), lty=c(2,1,2, rep(1,ll)),
+        col=c(cTr, cLS,cLS, rep(par("fg"),ll)), bty="n", inset=.01)
> showProc.time()
Time elapsed:  0.014 0.001 0.015 
> 
> 				        cfcl <- coef(Cfit)
> 				        cfcl.n.o <- coef(Cfit.no.out)
> 				        cfcl.n.H <- coef(Cfit.no.Hlev)
> ## no outliers present
> assert.EQ(coef(Rfit.MM.S.bisquare),	cfcl, tol = 0.01, giveRE=TRUE)
Mean relative difference: 0.003040325
> if(doExtras) {
+ assert.EQ(coef(Rfit.MM.S.lqq),		cfcl, tol = 0.01, giveRE=TRUE)
+ assert.EQ(coef(Rfit.MM.S.optimal),	cfcl, tol = 0.01, giveRE=TRUE)
+ assert.EQ(coef(Rfit.MM.S.hampel),	cfcl, tol = 0.01, giveRE=TRUE)
+ }
> assert.EQ(coef(Rfit.MM.lts.bisquare),	cfcl, tol = 0.01, giveRE=TRUE)
Mean relative difference: 0.00300441
> assert.EQ(coef(Rfit.MM.lts.lqq),	cfcl, tol = 0.01, giveRE=TRUE)
Mean relative difference: 0.0004708755
> assert.EQ(coef(Rfit.MM.lts.optimal),	cfcl, tol = 0.01, giveRE=TRUE)
Mean relative difference: 0.005092942
> assert.EQ(coef(Rfit.MM.lts.hampel),	cfcl, tol = 0.01, giveRE=TRUE)
Mean relative difference: 0.002536892
> assert.EQ(coef(Rfit.tau.bisquare),	cfcl, tol = 0.02, giveRE=TRUE)# 0.009873
Mean relative difference: 0.01018781
> assert.EQ(coef(Rfit.tau.optimal),	cfcl, tol = 0.01, giveRE=TRUE)
Mean relative difference: 0.0001425204
> assert.EQ(coef(Rfit.CM)[-3],		cfcl, tol = 0.01, giveRE=TRUE)
Mean relative difference: 0.002979679
> assert.EQ(coef(Rfit.mtl)[-3],		cfcl, tol = 0.02, giveRE=TRUE)
Mean relative difference: 0.002892437
> ## 40% outliers present -- compare with L.S.(good.data)
> if(doExtras) {
+ assert.EQ(coef(Rf.out.MM.S.bisquare),	cfcl.n.o, tol = 7e-4, giveRE=TRUE)
+ assert.EQ(coef(Rf.out.MM.S.lqq),	cfcl.n.o, tol = 1e-5, giveRE=TRUE)
+ assert.EQ(coef(Rf.out.MM.S.optimal),	cfcl.n.o, tol = 1e-5, giveRE=TRUE)
+ assert.EQ(coef(Rf.out.MM.S.hampel),	cfcl.n.o, tol = 1e-5, giveRE=TRUE)
+ }
> assert.EQ(coef(Rf.out.MM.lts.bisquare),	cfcl.n.o, tol = 6e-4, giveRE=TRUE)
Mean relative difference: 0.0005962068
> assert.EQ(coef(Rf.out.MM.lts.lqq),	cfcl.n.o, tol = 1e-5, giveRE=TRUE)
Mean relative difference: 7.628162e-06
> assert.EQ(coef(Rf.out.MM.lts.optimal),	cfcl.n.o, tol = 1e-5, giveRE=TRUE)
Mean relative difference: 7.614949e-06
> assert.EQ(coef(Rf.out.MM.lts.hampel),	cfcl.n.o, tol = 1e-5, giveRE=TRUE)
Mean relative difference: 7.649959e-06
> assert.EQ(coef(Rf.out.tau.bisquare),	cfcl.n.o, tol = .007, giveRE=TRUE)
Mean relative difference: 0.004699958
> assert.EQ(coef(Rf.out.tau.optimal),	cfcl.n.o, tol = .002, giveRE=TRUE)
Mean relative difference: 0.000857346
> assert.EQ(coef(Rf.out.CM)[-3],		cfcl.n.o, tol = .012, giveRE=TRUE)# 0.00708,0.01079
Mean relative difference: 0.007082506
> assert.EQ(coef(Rf.out.mtl)[-3],		cfcl.n.o, tol = .002, giveRE=TRUE)# better in 64b
Mean relative difference: 0.0006876525
> ## presence of high leverage point outliers -- compare with LS(good.data)
> if(doExtras) {
+ assert.EQ(coef(Rf.Hlev.MM.S.bisquare),	cfcl.n.H, tol = .01,  giveRE=TRUE)
+ assert.EQ(coef(Rf.Hlev.MM.S.lqq),	cfcl.n.H, tol = .02,  giveRE=TRUE)
+ assert.EQ(coef(Rf.Hlev.MM.S.optimal),	cfcl.n.H, tol = .005, giveRE=TRUE)
+ assert.EQ(coef(Rf.Hlev.MM.S.hampel),	cfcl.n.H, tol = .02,  giveRE=TRUE)
+ }
> assert.EQ(coef(Rf.Hlev.MM.lts.bisquare),cfcl.n.H, tol = .01,  giveRE=TRUE)
Mean relative difference: 0.007360855
> assert.EQ(coef(Rf.Hlev.MM.lts.lqq),	cfcl.n.H, tol = .015, giveRE=TRUE)
Mean relative difference: 0.01095718
> assert.EQ(coef(Rf.Hlev.MM.lts.optimal), cfcl.n.H, tol = .002, giveRE=TRUE)
Mean relative difference: 0.0009849586
> assert.EQ(coef(Rf.Hlev.MM.lts.hampel),	cfcl.n.H, tol = .02,  giveRE=TRUE)
Mean relative difference: 0.01412961
> assert.EQ(coef(Rf.Hlev.tau.bisquare),	cfcl.n.H, tol = .05,  giveRE=TRUE)# 0.0363, 0.0415
Mean relative difference: 0.004836127
> assert.EQ(coef(Rf.Hlev.tau.optimal),	cfcl.n.H, tol = .03,  giveRE=TRUE)
Mean relative difference: 0.02005619
> assert.EQ(coef(Rf.Hlev.CM)[-3],		cfcl.n.H, tol = .12,  giveRE=TRUE)# 0.032, 0.082
Mean relative difference: 0.02094837
> assert.EQ(coef(Rf.Hlev.mtl)[-3],	cfcl.n.H, tol = .08,  giveRE=TRUE)
Mean relative difference: 0.04655243
> 
> length(mods <- sapply(ls.str(patt="^Rf"), get, simplify=FALSE)) # 36
[1] 25
> is.conv <- sapply(mods, `[[`, "status") == "converged"
> prblm <- mods[!is.conv]
> if(length(prblm)) {
+     cat("\n*** NON-converged model fits:\n")
+     print(prblm)
+     mods <- mods[is.conv]
+ } else cat("\n All models converged\n")

 All models converged
> 
> ## Now, all mods are converged  -----------
> 
> dKnd <- as.factor(vapply(mods, function(.m.)
+                          as.character(getCall(.m.)[["data"]]), ""))
> table(dKnd) ##
dKnd
d.exp.Hlev    d.exp30 d.exp40out 
         8          9          8 
> (iKnd <- setNames(seq_len(nlevels(dKnd)), levels(dKnd)))
d.exp.Hlev    d.exp30 d.exp40out 
         1          2          3 
> 
> ## Coefficients: Some have 'sigma', some not:
> pcf <- vapply(lcf <- lapply(mods, coef),  length, 1)
> table(pcf) ## 2 and 3
pcf
 2  3 
19  6 
> stopifnot(min(pcf) + 1 == max(pcf)) # +1 : those which have 'sigma
> pp <- min(pcf)
> ccf <- t(simplify2array(lapply(lcf, `[`, 1:max(pcf))))
> ## take the "Scale" for those that do not have 'sigma' among  coef():
> i.n <- is.na(ccf[,"sigma"])
> ccf[i.n, "sigma"] <- vapply(mods[i.n], `[[`, 0, "Scale")
>     ## not yet: vapply(mods[i.n], sigma, 0.)
> ccf
                                a         b     sigma
Rf.Hlev.CM              0.8991074 0.2201053 3.4825781
Rf.Hlev.MM.lts.bisquare 0.9121757 0.2180474 0.9283817
Rf.Hlev.MM.lts.hampel   0.9055128 0.2189533 0.9305118
Rf.Hlev.MM.lts.lqq      0.9086164 0.2185189 0.9178165
Rf.Hlev.MM.lts.optimal  0.9183128 0.2169833 0.9068499
Rf.Hlev.mtl             0.8801867 0.2293926 0.3458295
Rf.Hlev.tau.bisquare    0.9243325 0.2163682 1.2816507
Rf.Hlev.tau.optimal     0.9405714 0.2149483 1.0944686
Rf.out.CM               0.9758704 0.1998508 3.6850007
Rf.out.MM.lts.bisquare  0.9828746 0.1992327 2.4016017
Rf.out.MM.lts.hampel    0.9835150 0.1991592 2.5766145
Rf.out.MM.lts.lqq       0.9835149 0.1991592 2.5456283
Rf.out.MM.lts.optimal   0.9835149 0.1991592 2.2428563
Rf.out.mtl              0.9827752 0.1992413 0.7852453
Rf.out.tau.bisquare     0.9785396 0.1997308 5.7465839
Rf.out.tau.optimal      0.9825946 0.1992612 4.1312687
Rfit.CM                 0.9995511 0.2005112 3.8722961
Rfit.MM.S.bisquare      0.9995623 0.2004497 0.7503993
Rfit.MM.lts.bisquare    0.9995257 0.2004563 0.7535988
Rfit.MM.lts.hampel      0.9991106 0.2006029 0.7635464
Rfit.MM.lts.lqq         0.9969093 0.2008812 0.7613701
Rfit.MM.lts.optimal     0.9911139 0.2017249 0.7420144
Rfit.mtl                0.9988367 0.1999053 0.2791298
Rfit.tau.bisquare       1.0069796 0.1992269 0.8105042
Rfit.tau.optimal        0.9963417 0.2010482 0.8332127
> ## well, the  'sigma's  are definitely *not* unbiased estimates of
> ## true sqrt(var(eps))  ...  [FIXME]
> ## --> indeed, this can be found in the  CM  paper [TODO: write more here]
> 
> plot(ccf[,1:2], pch = as.integer(dKnd))## use 'method' to get color
> legend("topright", inset=.01, names(iKnd), pch = iKnd)
> points(rbind(cfcl.n.H, cfcl, cfcl.n.o), # <- order from iKind
+        col=adjustcolor("tomato",.5), cex=2, pch=1:3, lwd=5)
> ## optional
> labs <- sub("^Rfit\\.", '', sub("^Rf\\.[A-Za-z]+\\.", '', rownames(ccf)))
> labs <- sub("hampel$", "Ham", sub("optimal$", "opt", sub("bisquare$", "biS", labs)))
> labs
 [1] "CM"         "MM.lts.biS" "MM.lts.Ham" "MM.lts.lqq" "MM.lts.opt"
 [6] "mtl"        "tau.biS"    "tau.opt"    "CM"         "MM.lts.biS"
[11] "MM.lts.Ham" "MM.lts.lqq" "MM.lts.opt" "mtl"        "tau.biS"   
[16] "tau.opt"    "CM"         "MM.S.biS"   "MM.lts.biS" "MM.lts.Ham"
[21] "MM.lts.lqq" "MM.lts.opt" "mtl"        "tau.biS"    "tau.opt"   
> text(ccf[,1:2], labs, cex=0.75, col=adjustcolor(1, 0.5),
+      adj= -1/5, srt=75, xpd=NA)
> points(rbind(cfcl), col=adjustcolor("tomato",.5), cex=2, pch=3, lwd=5)
> showProc.time()
Time elapsed:  0.032 0.003 0.034 
> 
> 
> ###------- Extended Tests for the DNase1 example from >>>> ../man/nlrob-algos.Rd <<<<
> ###							   =====================
> DNase1 <- DNase[DNase$Run == 1,]
> form <- density ~ Asym/(1 + exp(( xmid -log(conc) )/scal ))
> pnms <- c("Asym", "xmid", "scal")
> psNms <- c(pnms, "sigma")
> set.seed(47) # as these by default use randomized optimization:
> 
> fMM <- robustbase:::nlrob.MM(form, data = DNase1,
+            lower = setNames(c(0,0,0), pnms), upper = 3,
+            ## call to nlrob.control to pass 'optim.control':
+            ctrl = nlrob.control("MM", optim.control = list(trace = 1),
+                                 optArgs = list(trace = TRUE)))
1 : < 0.06568043 > ( 0.030657 ) 2.699558 1.662672 1.071085
2 : < 0.05135563 > ( 0.01986514 ) 2.367089 1.520246 1.071085
3 : < 0.03176846 > ( 0.01986514 ) 2.367089 1.520246 1.071085
4 : < 0.03073827 > ( 0.01986514 ) 2.367089 1.520246 1.071085
5 : < 0.02446155 > ( 0.01986514 ) 2.367089 1.520246 1.071085
6 : < 0.02158731 > ( 0.01986514 ) 2.367089 1.520246 1.071085
7 : < 0.02076038 > ( 0.01986514 ) 2.367089 1.520246 1.071085
8 : < 0.01409694 > ( 0.01986514 ) 2.367089 1.520246 1.071085
9 : < 0.01014985 > ( 0.01985212 ) 2.303141 1.388635 1.028954
10 : < 0.009128672 > ( 0.01985212 ) 2.303141 1.388635 1.028954
11 : < 0.008785776 > ( 0.01985212 ) 2.303141 1.388635 1.028954
12 : < 0.008176153 > ( 0.01882007 ) 1.429895 0.7101177 0.9320048
13 : < 0.007138518 > ( 0.01882007 ) 1.429895 0.7101177 0.9320048
14 : < 0.00663419 > ( 0.01694984 ) 2.264548 1.373464 1.007218
15 : < 0.004990433 > ( 0.01218113 ) 2.634336 1.786663 1.130746
16 : < 0.004450077 > ( 0.01218113 ) 2.634336 1.786663 1.130746
17 : < 0.003781576 > ( 0.01218113 ) 2.634336 1.786663 1.130746
18 : < 0.003439636 > ( 0.01218113 ) 2.634336 1.786663 1.130746
19 : < 0.002096688 > ( 0.01218113 ) 2.634336 1.786663 1.130746
20 : < 0.001858781 > ( 0.01218113 ) 2.634336 1.786663 1.130746
21 : < 0.001466238 > ( 0.01218113 ) 2.634336 1.786663 1.130746
22 : < 0.001418615 > ( 0.01218113 ) 2.634336 1.786663 1.130746
23 : < 0.001301314 > ( 0.01218113 ) 2.634336 1.786663 1.130746
24 : < 0.001301314 > ( 0.01218113 ) 2.634336 1.786663 1.130746
25 : < 0.001223393 > ( 0.01218113 ) 2.634336 1.786663 1.130746
26 : < 0.0009908125 > ( 0.01218113 ) 2.634336 1.786663 1.130746
27 : < 0.000939791 > ( 0.01218113 ) 2.634336 1.786663 1.130746
28 : < 0.0009356657 > ( 0.01218113 ) 2.634336 1.786663 1.130746
29 : < 0.0009316897 > ( 0.01218113 ) 2.634336 1.786663 1.130746
30 : < 0.0008635449 > ( 0.01211585 ) 2.594124 1.780671 1.127007
31 : < 0.0009441278 > ( 0.01153015 ) 2.574215 1.73965 1.117878
32 : < 0.0009441278 > ( 0.01153015 ) 2.574215 1.73965 1.117878
33 : < 0.0009234668 > ( 0.01153015 ) 2.574215 1.73965 1.117878
34 : < 0.001017899 > ( 0.0104385 ) 2.555245 1.744374 1.124387
35 : < 0.0009771945 > ( 0.01011045 ) 2.715392 1.880491 1.15727
36 : < 0.001117598 > ( 0.00935059 ) 2.720104 1.882524 1.155785
37 : < 0.0008365975 > ( 0.00935059 ) 2.720104 1.882524 1.155785
38 : < 0.0007486373 > ( 0.00935059 ) 2.720104 1.882524 1.155785
39 : < 0.0007486373 > ( 0.00935059 ) 2.720104 1.882524 1.155785
40 : < 0.0006539709 > ( 0.00935059 ) 2.720104 1.882524 1.155785
41 : < 0.0006052928 > ( 0.00935059 ) 2.720104 1.882524 1.155785
42 : < 0.0008283781 > ( 0.007374737 ) 2.70406 1.863656 1.151602
43 : < 0.0007742664 > ( 0.007374737 ) 2.70406 1.863656 1.151602
44 : < 0.0006118239 > ( 0.007374737 ) 2.70406 1.863656 1.151602
45 : < 0.000559146 > ( 0.007374737 ) 2.70406 1.863656 1.151602
46 : < 0.0005460518 > ( 0.00735965 ) 2.69992 1.859164 1.149771
47 : < 0.0005050816 > ( 0.00735965 ) 2.69992 1.859164 1.149771
48 : < 0.0004511749 > ( 0.00735965 ) 2.69992 1.859164 1.149771
49 : < 0.0004511749 > ( 0.00735965 ) 2.69992 1.859164 1.149771
50 : < 0.0004308587 > ( 0.00735965 ) 2.69992 1.859164 1.149771
51 : < 0.0004021508 > ( 0.007323208 ) 2.705071 1.86404 1.151824
52 : < 0.0004021508 > ( 0.007323208 ) 2.705071 1.86404 1.151824
53 : < 0.00032253 > ( 0.007323208 ) 2.705071 1.86404 1.151824
54 : < 0.0002989224 > ( 0.007268853 ) 2.701306 1.860916 1.150708
55 : < 0.0002612988 > ( 0.007268853 ) 2.701306 1.860916 1.150708
56 : < 0.0002094852 > ( 0.007268853 ) 2.701306 1.860916 1.150708
57 : < 0.0002141296 > ( 0.007162363 ) 2.688279 1.849162 1.147415
58 : < 0.0001640686 > ( 0.007162363 ) 2.688279 1.849162 1.147415
59 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
60 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
61 : < 0.0001162773 > ( 0.007162363 ) 2.688279 1.849162 1.147415
62 : < 7.936557e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
63 : < 4.461414e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
64 : < 4.289425e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
65 : < 2.867267e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
66 : < 2.209151e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
67 : < 1.419382e-05 > ( 0.007138531 ) 2.695107 1.85494 1.149358
68 : < 1.617992e-05 > ( 0.007115951 ) 2.693241 1.853284 1.148951
69 : < 1.431852e-05 > ( 0.007115951 ) 2.693241 1.853284 1.148951
70 : < 1.173847e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
71 : < 1.153084e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
72 : < 1.112424e-05 > ( 0.007114441 ) 2.687203 1.847581 1.147502
73 : < 8.432844e-06 > ( 0.007114441 ) 2.687203 1.847581 1.147502
74 : < 6.626809e-06 > ( 0.007108962 ) 2.690307 1.850949 1.148608
75 : < 5.855829e-06 > ( 0.007108962 ) 2.690307 1.850949 1.148608
76 : < 6.557656e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
77 : < 6.341923e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
78 : < 4.799942e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
79 : < 3.70222e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
80 : < 3.299484e-06 > ( 0.007099157 ) 2.692359 1.852365 1.148664
81 : < 2.867961e-06 > ( 0.007095899 ) 2.691273 1.851573 1.148496
82 : < 2.419718e-06 > ( 0.007095899 ) 2.691273 1.851573 1.148496
83 : < 3.092519e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
84 : < 3.092519e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
85 : < 2.59233e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
86 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
87 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
88 : < 2.494284e-06 > ( 0.007091715 ) 2.691252 1.851506 1.148814
89 : < 1.951421e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
90 : < 1.951421e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
91 : < 1.469318e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
92 : < 1.038646e-06 > ( 0.007090575 ) 2.691043 1.851372 1.148696
93 : < 8.753423e-07 > ( 0.007090491 ) 2.691199 1.851383 1.148837
iter   10 value 732.941462
final  value 732.397073 
converged
> showProc.time()
Time elapsed:  2.144 0.021 2.174 
> 
> ## for comparisons, later:
> all.eq.mod <- function(m1, m2, sub=FALSE, excl = c("call", "ctrl"), ...) {
+     nm1 <- names(m1)
+     stopifnot(if(sub) nm1 %in% names(m2) else nm1 == names(m2))
+     ni <- if(sub)
+ 	      nm1[is.na(match(nm1, c("call","ctrl")))]
+ 	  else is.na(match(names(m1), excl))## <<- all but those with names in 'excl'
+     all.equal(m1[ni], m2[ni], ...)
+ }
> if(doExtras) {## the same, with 'pnames' and unnamed 'lower':
+     set.seed(47)
+     tools::assertWarning(
+         fM2 <- robustbase:::nlrob.MM(form, data = DNase1, pnames = pnms,
+                                      lower = 0, upper = 3))
+     stopifnot(all.eq.mod(fMM, fM2, tol=1e-15))
+ 
+     ftau <- robustbase:::nlrob.tau(form, data = DNase1,
+                                    lower= setNames(c(0,0,0), pnms), upper= 3,  trace=TRUE)
+ 
+     fCM  <- robustbase:::nlrob.CM (form, data = DNase1,
+                                    lower= setNames(c(0,0,0,0), psNms), upper= 3, trace=TRUE)
+ 
+     fmtl <- robustbase:::nlrob.mtl(form, data = DNase1,
+                                    lower= setNames(c(0,0,0,0), psNms), upper= 3, trace=TRUE)
+ 
+     mods <- list(MM=fMM, tau=ftau, CM=fCM, MTL=fmtl)
+     print(sts <- sapply(mods, `[[`, "status"))
+     stopifnot(sts == "converged")
+ 
+     print(sapply(mods, `[[`, "data"))   # currently 'language' %% FIXME
+ 
+     print(sapply(mods, `[[`, "coefficients")) # nice matrix
+     showProc.time()
+ }
> ## Compare with traditional M-estimate, a) started robustly b) psi = Tukey's:
> fM <- nlrob(formula(fMM), data=eval(fMM$data), start = coef(fMM),
+             psi = .Mwgt.psi1("bisquare"), trace = TRUE)
robust iteration 1 
0.001151704 :  2.561138 1.730322 1.112787
0.001113843 :  2.528926 1.694972 1.101376
0.001113745 :  2.530272 1.696145 1.101659
0.001113745 :  2.530260 1.696132 1.101654
 --> irls.delta(previous, resid) = 0.0890317 -- *not* converged
robust iteration 2 
0.001403458 :  2.530260 1.696132 1.101654
0.001376449 :  2.505189 1.668215 1.093201
0.001376402 :  2.506056 1.668969 1.093384
0.001376402 :  2.506048 1.668961 1.093381
 --> irls.delta(previous, resid) = 0.0782933 -- *not* converged
robust iteration 3 
0.001771648 :  2.506048 1.668961 1.093381
0.001734285 :  2.477930 1.637687 1.084693
0.001734203 :  2.478792 1.638387 1.084841
0.001734203 :  2.478787 1.638382 1.084839
 --> irls.delta(previous, resid) = 0.0942244 -- *not* converged
robust iteration 4 
0.002327706 :  2.478787 1.638382 1.084839
0.002262441 :  2.444947 1.600353 1.074457
0.002262253 :  2.445935 1.601097 1.074576
 --> irls.delta(previous, resid) = 0.125083 -- *not* converged
robust iteration 5 
0.002375777 :  2.445935 1.601097 1.074576
0.002364223 :  2.433030 1.586140 1.070358
0.002364219 :  2.433202 1.586277 1.070384
 --> irls.delta(previous, resid) = 0.0556974 -- *not* converged
robust iteration 6 
0.002562082 :  2.433202 1.586277 1.070384
0.002551476 :  2.421044 1.572190 1.066458
0.002551472 :  2.421173 1.572288 1.066473
 --> irls.delta(previous, resid) = 0.0537787 -- *not* converged
robust iteration 7 
0.002952554 :  2.421173 1.572288 1.066473
0.002925917 :  2.402660 1.550824 1.060525
0.002925898 :  2.402888 1.550976 1.060531
 --> irls.delta(previous, resid) = 0.0838695 -- *not* converged
robust iteration 8 
0.003345785 :  2.402888 1.550976 1.060531
0.003313638 :  2.383987 1.528804 1.054326
0.003313616 :  2.384174 1.528911 1.054311
 --> irls.delta(previous, resid) = 0.0910549 -- *not* converged
robust iteration 9 
0.00355705 :  2.384174 1.528911 1.054311
0.003541462 :  2.371903 1.514284 1.050158
0.003541457 :  2.371940 1.514285 1.050134
 --> irls.delta(previous, resid) = 0.0632663 -- *not* converged
robust iteration 10 
0.003657973 :  2.371940 1.514285 1.050134
0.003653196 :  2.365452 1.506462 1.047891
0.003653196 :  2.365434 1.506433 1.047873
 --> irls.delta(previous, resid) = 0.0349519 -- *not* converged
robust iteration 11 
0.003681549 :  2.365434 1.506433 1.047873
0.003680628 :  2.362727 1.503117 1.046909
0.003680628 :  2.362710 1.503097 1.046900
 --> irls.delta(previous, resid) = 0.0153554 -- *not* converged
robust iteration 12 
0.00369171 :  2.362710 1.503097 1.046900
0.003691539 :  2.361561 1.501683 1.046487
0.003691539 :  2.361552 1.501674 1.046483
 --> irls.delta(previous, resid) = 0.00662495 -- *not* converged
robust iteration 13 
0.003696077 :  2.361552 1.501674 1.046483
0.003696046 :  2.361064 1.501071 1.046307
0.003696046 :  2.361060 1.501066 1.046305
 --> irls.delta(previous, resid) = 0.00283582 -- *not* converged
robust iteration 14 
0.003697945 :  2.361060 1.501066 1.046305
0.003697939 :  2.360852 1.500810 1.046230
 --> irls.delta(previous, resid) = 0.00120511 -- *not* converged
robust iteration 15 
0.003698734 :  2.360852 1.500810 1.046230
0.003698733 :  2.360762 1.500699 1.046197
 --> irls.delta(previous, resid) = 0.000515821 -- *not* converged
robust iteration 16 
0.003699076 :  2.360762 1.500699 1.046197
0.003699076 :  2.360723 1.500652 1.046183
 --> irls.delta(previous, resid) = 0.000220891 -- *not* converged
robust iteration 17 
0.003699222 :  2.360723 1.500652 1.046183
0.003699222 :  2.360707 1.500631 1.046177
 --> irls.delta(previous, resid) = 9.45813e-05 -- *not* converged
robust iteration 18 
0.003699285 :  2.360707 1.500631 1.046177
0.003699285 :  2.360700 1.500623 1.046175
 --> irls.delta(previous, resid) = 4.05239e-05 -- *not* converged
robust iteration 19 
0.003699312 :  2.360700 1.500623 1.046175
0.003699312 :  2.360697 1.500619 1.046174
 --> irls.delta(previous, resid) = 1.73447e-05 -- *not* converged
robust iteration 20 
0.003699324 :  2.360697 1.500619 1.046174
> rbind(M=coef(fM), MM=coef(fMM)) # "similar" ... well, no: the sigma's get much different
       Asym     xmid     scal
M  2.360697 1.500619 1.046174
MM 2.561138 1.730322 1.112787
> ## stopifnot(%%____FIXME___
> all.equal(coef(fM), coef(fMM), tolerance = 1e-4)
[1] "Mean relative difference: 0.1012243"
> ## ) # had 3.26e-5
> ## FIXME:  nlrob( "M")  should allow to keep specify an initial sigma *and* keep that fixed
> showProc.time()
Time elapsed:  0.075 0.004 0.079 
> 
> 
> ### Now call the above methods via nlrob():
> set.seed(47) # (same as above)
> ## without "sigma"
> gMM  <- nlrob(form, data = DNase1, method = "MM",
+               lower = setNames(c(0,0,0), pnms), upper = 3)
> gtau <- nlrob(form, data = DNase1, method = "tau",
+               lower = setNames(c(0,0,0), pnms), upper = 3)
> ## those with "sigma" -> must be in (lower, upper), too :
> gCM  <- nlrob(form, data = DNase1, method = "CM",
+               lower = setNames(c(0,0,0,0), psNms), upper = 3)
> gmtl  <- nlrob(form, data = DNase1, method = "mtl",
+               lower = setNames(c(0,0,0,0), psNms), upper = 3)
> showProc.time()
Time elapsed:  7.957 0.051 8.092 
> 
> ## list {and test print(<nlrob>) for these}:
> (mod2 <- list(MM=gMM, tau=gtau, CM=gCM, MTL=gmtl))
$MM
Robustly fitted nonlinear regression model (method MM)
  model:  density ~ Asym/(1 + exp((xmid - log(conc))/scal)) 
   data:  DNase1 
    Asym     xmid     scal 
2.561138 1.730322 1.112787 
 status:  converged 

$tau
Robustly fitted nonlinear regression model (method tau)
  model:  density ~ Asym/(1 + exp((xmid - log(conc))/scal)) 
   data:  DNase1 
    Asym     xmid     scal 
2.683676 1.844210 1.146660 
 status:  converged 

$CM
Robustly fitted nonlinear regression model (method CM)
  model:  density ~ Asym/(1 + exp((xmid - log(conc))/scal)) 
   data:  DNase1 
      Asym       xmid       scal      sigma 
2.36384466 1.50429854 1.04719722 0.08046473 
 status:  converged 

$MTL
Robustly fitted nonlinear regression model (method mtl)
  model:  density ~ Asym/(1 + exp((xmid - log(conc))/scal)) 
   data:  DNase1 
      Asym       xmid       scal      sigma 
2.50095045 1.66331455 1.09077128 0.01019351 
 status:  converged 

> 
> if(doExtras) {
+     stopifnot(mapply(all.eq.mod, mods, mod2, sub=TRUE))
+ }
> 
> proc.time()
   user  system elapsed 
 25.962   0.340  26.512 
