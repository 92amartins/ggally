
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ggmcmc"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "ggmcmc-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('ggmcmc')
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: tidyr
Loading required package: ggplot2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ac")
> ### * ac
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ac
> ### Title: Calculate the autocorrelation of a single chain, for a specified
> ###   amount of lags
> ### Aliases: ac
> 
> ### ** Examples
> 
> # Calculate the autocorrelation of a simple vector
> ac(cumsum(rnorm(10))/10, nLags=4)
  Lag Autocorrelation
1   1       1.0000000
2   2       0.6304929
3   3       0.3683876
4   4       0.6135137
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ac", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ci")
> ### * ci
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ci
> ### Title: Calculate Credible Intervals (wide and narrow).
> ### Aliases: ci
> 
> ### ** Examples
> 
> data(linear)
> ci(ggs(s))
Source: local data frame [3 x 6]

  Parameter      low      Low   median     High     high
     (fctr)    (dbl)    (dbl)    (dbl)    (dbl)    (dbl)
1   beta[1] 2.244675 2.350889 2.826853 3.304125 3.381859
2   beta[2] 4.853687 4.883265 5.045913 5.211476 5.239212
3     sigma 1.615595 1.682851 1.998729 2.389861 2.496822
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ci", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggmcmc")
> ### * ggmcmc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggmcmc
> ### Title: Wrapper function that creates a single pdf file with all plots
> ###   that ggmcmc can produce.
> ### Aliases: ggmcmc ggmcmc-package
> 
> ### ** Examples
> 
> data(linear)
> ggmcmc(ggs(s))  # Directly from a coda object
Plotting histograms
Plotting density plots
Plotting traceplots
Plotting running means
Plotting comparison of partial and full chain
Plotting autocorrelation plots
Plotting crosscorrelation plot
Plotting Potential Scale Reduction Factors
Plotting Geweke Diagnostic
Plotting caterpillar plot
pdf 
  2 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggmcmc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs")
> ### * ggs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs
> ### Title: Import MCMC samples into a ggs object than can be used by all
> ###   ggs_* graphical functions.
> ### Aliases: ggs
> 
> ### ** Examples
> 
> # Assign 'D' to be a data frame suitable for \code{ggmcmc} functions from
> # a coda object called S
> data(linear)
> S <- ggs(s)        # s is a coda object
> 
> # Get samples from 'beta' parameters only
> S <- ggs(s, family = "beta")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_Rhat")
> ### * ggs_Rhat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_Rhat
> ### Title: Dotplot of Potential Scale Reduction Factor (Rhat)
> ### Aliases: ggs_Rhat
> 
> ### ** Examples
> 
> data(linear)
> ggs_Rhat(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_Rhat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_autocorrelation")
> ### * ggs_autocorrelation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_autocorrelation
> ### Title: Plot an autocorrelation matrix
> ### Aliases: ggs_autocorrelation
> 
> ### ** Examples
> 
> data(linear)
> ggs_autocorrelation(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_autocorrelation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_caterpillar")
> ### * ggs_caterpillar
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_caterpillar
> ### Title: Caterpillar plot with thick and thin CI
> ### Aliases: ggs_caterpillar
> 
> ### ** Examples
> 
> data(linear)
> ggs_caterpillar(ggs(s))
> ggs_caterpillar(list(A=ggs(s), B=ggs(s))) # silly example duplicating the same model
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_caterpillar", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_compare_partial")
> ### * ggs_compare_partial
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_compare_partial
> ### Title: Density plots comparing the distribution of the whole chain with
> ###   only its last part.
> ### Aliases: ggs_compare_partial
> 
> ### ** Examples
> 
> data(linear)
> ggs_compare_partial(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_compare_partial", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_crosscorrelation")
> ### * ggs_crosscorrelation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_crosscorrelation
> ### Title: Plot the Cross-correlation between-chains
> ### Aliases: ggs_crosscorrelation
> 
> ### ** Examples
> 
> data(linear)
> ggs_crosscorrelation(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_crosscorrelation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_density")
> ### * ggs_density
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_density
> ### Title: Density plots of the chains
> ### Aliases: ggs_density
> 
> ### ** Examples
> 
> data(linear)
> ggs_density(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_density", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_geweke")
> ### * ggs_geweke
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_geweke
> ### Title: Dotplot of the Geweke diagnostic, the standard Z-score
> ### Aliases: ggs_geweke
> 
> ### ** Examples
> 
> data(linear)
> ggs_geweke(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_geweke", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_histogram")
> ### * ggs_histogram
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_histogram
> ### Title: Histograms of the paramters.
> ### Aliases: ggs_histogram
> 
> ### ** Examples
> 
> data(linear)
> ggs_histogram(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_histogram", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_pairs")
> ### * ggs_pairs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_pairs
> ### Title: Create a plot matrix of posterior simulations
> ### Aliases: ggs_pairs
> 
> ### ** Examples
> 
> library(GGally)

Attaching package: ‘GGally’

The following object is masked from ‘package:dplyr’:

    nasa

> data(linear)
> 
> # default ggpairs plot
> ggs_pairs(ggs(s))
> 
> # change alpha transparency of points
> ggs_pairs(ggs(s), lower=list(continuous = wrap("points", alpha = 0.2)))
> 
> # with too many points, try contours instead
> ggs_pairs(ggs(s), lower=list(continuous="density"))
> 
> # histograms instead of univariate densities on diagonal
> ggs_pairs(ggs(s), diag=list(continuous="barDiag"))
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> # coloring results according to chains
> ggs_pairs(ggs(s), mapping = aes(color = Chain))
> 
> # custom points on lower panels, black contours on upper panels
> ggs_pairs(ggs(s),
+   upper=list(continuous = wrap("density", color = "black")),
+   lower=list(continuous = wrap("points", alpha = 0.2, shape = 1)))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_pairs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:GGally’

> nameEx("ggs_ppmean")
> ### * ggs_ppmean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_ppmean
> ### Title: Posterior predictive plot comparing the outcome mean vs the
> ###   distribution of the predicted posterior means.
> ### Aliases: ggs_ppmean
> 
> ### ** Examples
> 
> data(linear)
> ggs_ppmean(ggs(s.y.rep), outcome=y)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_ppmean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_ppsd")
> ### * ggs_ppsd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_ppsd
> ### Title: Posterior predictive plot comparing the outcome standard
> ###   deviation vs the distribution of the predicted posterior standard
> ###   deviations.
> ### Aliases: ggs_ppsd
> 
> ### ** Examples
> 
> data(linear)
> ggs_ppsd(ggs(s.y.rep), outcome=y)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_ppsd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_rocplot")
> ### * ggs_rocplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_rocplot
> ### Title: Receiver-Operator Characteristic (ROC) plot for models with
> ###   binary outcomes
> ### Aliases: ggs_rocplot
> 
> ### ** Examples
> 
> data(binary)
> ggs_rocplot(ggs(s.binary, family="mu"), outcome=y.binary)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_rocplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_running")
> ### * ggs_running
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_running
> ### Title: Running means of the chains
> ### Aliases: ggs_running
> 
> ### ** Examples
> 
> data(linear)
> ggs_running(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_running", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_separation")
> ### * ggs_separation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_separation
> ### Title: Separation plot for models with binary response variables
> ### Aliases: ggs_separation
> 
> ### ** Examples
> 
> data(binary)
> ggs_separation(ggs(s.binary, family="mu"), outcome=y.binary)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_separation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ggs_traceplot")
> ### * ggs_traceplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ggs_traceplot
> ### Title: Traceplot of the chains
> ### Aliases: ggs_traceplot
> 
> ### ** Examples
> 
> data(linear)
> ggs_traceplot(ggs(s))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ggs_traceplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  23.057 0.51 25.035 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
