
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "freqparcoord"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "freqparcoord-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('freqparcoord')
Loading required package: parallel
Loading required package: ggplot2
Loading required package: GGally
Loading required package: FNN
Loading required package: mvtnorm

   

   

   For a quick introduction, type ?freqparcoord, and
   run the examples, making sure to read the comments.
   

   

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("freqparcoord")
> ### * freqparcoord
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: freqparcoord
> ### Title: Frequency-based parallel coordinates.
> ### Aliases: freqparcoord
> 
> ### ** Examples
> 
> # baseball player data courtesy of UCLA Stat. Dept., www.socr.ucla.edu
> data(mlb)
> 
> # plot baseball data, broken down by position category (infield,
> # outfield, etc.); plot the 5 higest-density values in each group
> freqparcoord(mlb,5,4:6,7,method="maxdens")
> # we see that the most typical pitchers are tall and young, while the
> # catchers are short and heavy
> 
> # same, but no grouping
> freqparcoord(mlb,5,4:6,method="maxdens")
> 
> # find the outliers, 1 for each position 
> freqparcoord(mlb,-1,4:6,7)
> # for instance we see an infielder of average height and weight, but
> # extremely high age, worth looking into
> 
> # do the same, but also plot and retain the indices of the rows being
> # plotted, and the rows themselves
> p <- freqparcoord(mlb,-1,4:6,7,keepidxs=4,plotidxs=TRUE)
> p
> p$idxs
[1]  35 674 964 559
> p$xdisp
               Name Team         Position Height Weight   Age PosCategory
674    Julio_Franco  NYM    First_Baseman     73    188 48.52   Infielder
964     Barry_Bonds   SF       Outfielder     74    228 42.60  Outfielder
35  A.J._Pierzynski  CWS          Catcher     75    245 30.17     Catcher
559   Randy_Johnson  ARZ Starting_Pitcher     82    231 43.47     Pitcher
> # ah, that outlier infielder was case number 674,
> # Julio Franco, 48 years old!
> 
> # olive oil data courtesy of Dr. Martin Theus
> data(oliveoils)
> olv <- oliveoils
> 
> # there are 9 olive-oil producing areas of Italy, named Area here
> # check whether the area groups have distinct patterns (yes)
> freqparcoord(olv,1,3:10,1,k=15)
> 
> # same check but looking at within-group variation (turns out that some
> # variables are more diverse in some areas than others)
> freqparcoord(olv,25,3:10,1,k=15)
> # yes, definitely, e.g. wide variation in stearic in Sicily
> 
> # look at it without stacking the groups
> freqparcoord(olv,25,3:10,1,faceting="none",k=15)
> # prettier this way, with some patterns just as discernible
> 
> ## Not run: 
> ##D # programmers and engineers in Silicon Valley, 2000 census
> ##D data(prgeng)
> ##D pg <- prgeng
> ##D 
> ##D # compare men and women
> ##D freqparcoord(pg,10,dispcols=c(1,3,8),grpvar=7,faceting="horiz")
> ##D # men seem to fall into 2 subgroups, one with very low wages; let's get 
> ##D # a printout of the plotted points, grouped by gender
> ##D p <-
> ##D    freqparcoord(pg,10,dispcols=c(1,3,8),grpvar=7,faceting="horiz",keepidxs=7);
> ##D p$xdisp
> ##D # ah, there are some wages like $3000; delete those and look again;
> ##D pg1 <- pg[pg$wageinc >= 40000 & pg$wkswrkd >= 48,]
> ##D freqparcoord(pg1,50,dispcols=c(1,3,8),grpvar=7,faceting="horiz",keepidxs=7)
> ##D # the women seem to fall in 2 age groups, but not the men, worth further 
> ##D # analysis 
> ##D # note that all have the same education, a bachelor's degree, the 
> ##D # most frequent level
> ##D 
> ##D # generate some simulated data with clusters at (0,0), (1,2) and (3,3),
> ##D # and see whether "locmax" (clustering) picks them up
> ##D cv <- 0.5*diag(2)
> ##D x <- rmixmvnorm(10000,2,3,list(c(0,0),c(1,2),c(3,3)),list(cv,cv,cv))
> ##D p <- freqparcoord(x,m=1,method="locmax",keepidxs=1,k=50,klm=800)
> ##D p$xdisp  # worked well in this case, centers near (0,0), (1,2), (3,3)
> ##D 
> ##D # see how well outlier detection works
> ##D x <- rmixmvnorm(10000,2,3,list(c(0,0),c(1,2),c(8,8)),list(cv,cv,cv),
> ##D    wts=c(0.49,0.49,0.02))
> ##D # most of the outliers should be out toward (8,8)
> ##D p <- freqparcoord(x,m=-10,keepidxs=1)
> ##D p$xdisp
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("freqparcoord", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("regdiag")
> ### * regdiag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: regdiag
> ### Title: Diagnosing regression model fit using parallel coordinates.
> ### Aliases: regdiag regdiagbas
> 
> ### ** Examples
> 
> data(mlb)
> 
> lmout <- lm(mlb$Weight ~ mlb$Height + mlb$Age)
> p <- regdiag(lmout,0.10,k=50,m=25)
> p
> # taller, older players are overpredicted, with shorter, younger players
> # underpredicted; suggests that adding quadratic terms for Height, Age
> # may help in the tails
> # let's compare the R-squared values
> p$paramr2 
[1] 0.3166133
> p$nonparamr2 
[1] 0.2919048
> # not much difference (param. model a bit better), possibly due to 
> # small sample size 
> 
> # doing it "the long way" (showing use without an lm/glm object)
> parest <- lmout$fitted.values
> regdiagbas(mlb[c("Height","Age")], mlb$Weight,parest,0.10,k=50,m=25)
> 
> data(prgeng)
> pg <- prgeng
> pg1 <- pg[pg$wageinc >= 40000 & pg$wkswrkd >= 48,]
> l1 <- lm(wageinc ~ age+educ+sex,data=pg1)
> p <- regdiag(l1)
> p
> p$paramr2
[1] 0.05833557
> p$nonparamr2
[1] 0.074129
> # young men's wages underpredicted, older women overpredicted; both
> # R-squared values low, but nonpar is about 27% higher, indicating room
> # for improvement; interaction and polynomial terms may help
> 
> ## Not run: 
> ##D data(newadult)
> ##D g1 <- glm(gt50 ~ edu + age + gender + mar, data=newadult, family=binomial)
> ##D regdiag(g1)
> ##D # parametric model underpredicts older highly-educated married men,
> ##D # and overpredicts young female lesser-educated singles; might try adding 
> ##D # interaction terms 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("regdiag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("smoothz")
> ### * smoothz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: smoothz
> ### Title: Smoothing functions.
> ### Aliases: smoothz smoothzpred knnreg knndens
> 
> ### ** Examples
> 
> 
> # programmers and engineers in Silicon Valley, 2000 census, age 25-65
> data(prgeng)
> pg <- prgeng
> pg1 <- pg[pg$age >= 25 & pg$age <= 65,]
> estreg <- smoothz(pg1[,c(1,8)],sf=knnreg,k=100)
> age <- pg1[,1]
> p <- ggplot(data.frame(age,estreg))
> p + geom_smooth(aes(x=age,y=estreg))
Error in loadNamespace(name) : there is no package called ‘mgcv’
Calls: <Anonymous> ... tryCatch -> tryCatchList -> tryCatchOne -> <Anonymous>
Execution halted
