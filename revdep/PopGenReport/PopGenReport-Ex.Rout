
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PopGenReport"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "PopGenReport-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('PopGenReport')
Loading required package: knitr
Loading required package: adegenet
Loading required package: ade4

   /// adegenet 2.0.0 is loaded ////////////

   > overview: '?adegenet'
   > tutorials/doc/questions: 'adegenetWeb()' 
   > bug reports/feature resquests: adegenetIssues()


Loading required package: raster
Loading required package: sp
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("allel.rich")
> ### * allel.rich
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: allel.rich
> ### Title: Calculates the allelic richness for a genind object
> ### Aliases: allel.rich
> 
> ### ** Examples
> 
>  #not run:
>  #data(bilby)
>  #here we use only the first 50 individuals to speep up the example
>  #popgenreport(bilby, mk.allel.rich=TRUE, mk.pdf=FALSE)
>  
> #to get a pdf output you need to have a running Latex version installed on your system.
> #popgenreport(bilby, mk.allel.rich=TRUE, mk.pdf=TRUE)
> 
> #data(bilby)
> #allel.rich(bilby)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("allel.rich", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("allele.dist")
> ### * allele.dist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: allele.dist
> ### Title: Counts and visualises allele frequencies across loci and
> ###   subpopulations
> ### Aliases: allele.dist
> 
> ### ** Examples
> 
> # data(bilby)
>  #here we use only the first 50 individuals to speep up the example
> # popgenreport(bilby, mk.allele.dist=TRUE, mk.pdf=FALSE)
>  
> #to get a pdf output you need to have a running Latex version installed on your system.
> #popgenreport(bilby, mk.allele.dist=TRUE, mk.pdf=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("allele.dist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bilby")
> ### * bilby
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bilby
> ### Title: Bilby data set
> ### Aliases: bilby
> 
> ### ** Examples
> 
> data(bilby)
> bilby
/// GENIND OBJECT /////////

 // 71 individuals; 3 loci; 15 alleles; size: 22.9 Kb

 // Basic content
   @tab:  71 x 15 matrix of allele counts
   @loc.n.all: number of alleles per locus (range: 4-6)
   @loc.fac: locus factor for the 15 columns of @tab
   @all.names: list of allele names for each locus
   @ploidy: ploidy of each individual  (range: 2-2)
   @type:  codom
   @call: old2new_genind(object = bilby)

 // Optional content
   @pop: population of each individual (group size range: 18-30)
   @other: a list containing: sex  latlong  xy 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bilby", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fric.raster")
> ### * fric.raster
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fric.raster
> ### Title: a simulated friction map
> ### Aliases: fric.raster
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(raster)
> data(fric.raster)
> plot(fric.raster)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fric.raster", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gd.kosman")
> ### * gd.kosman
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gd.kosman
> ### Title: Individual genetic distance calculation based on Kosman &
> ###   Leonhard 2005
> ### Aliases: gd.kosman
> 
> ### ** Examples
> 
> #not run:
> #data(bilby)
> #popgenreport(bilby, mk.gd.kosman = TRUE, mk.pdf=FALSE)
> #to get a pdf output you need to have a running Latex version installed on your system.
> #popgenreport(bilby, mk.gd.kosman = TRUE, mk.pdf=TRUE)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gd.kosman", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gd.smouse")
> ### * gd.smouse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gd.smouse
> ### Title: Individual genetic distance calculation based on Smouse and
> ###   Peakall 1999
> ### Aliases: gd.smouse
> 
> ### ** Examples
> 
> #not run:
> #data(bilby)
> #popgenreport(bilby, mk.gd.smouse = TRUE, mk.pdf=FALSE)
> #to get a pdf output you need to have a running Latex version installed on your system.
> #popgenreport(bilby, mk.gd.smouse = TRUE, mk.pdf=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gd.smouse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("genleastcost")
> ### * genleastcost
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: genleastcost
> ### Title: Least-cost path analysis based on a friction matrix
> ### Aliases: genleastcost
> 
> ### ** Examples
> 
> ## Not run: ##D 
> ##D glc <- genleastcost(cats=landgen, fric.raster, "D", NN=8)
> ##D wassermann(eucl.mat = glc$eucl.mat, cost.mat = glc$cost.mats, gen.mat = glc$gen.mat)
> ##D lgrMMRR(gen.mat = glc$gen.mat, cost.mats = glc$cost.mats, eucl.mat = glc$eucl.mat)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("genleastcost", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("landgen")
> ### * landgen
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: landgen
> ### Title: A simulated genind data set with spatial coordinates
> ### Aliases: landgen
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(landgen)
> summary(landgen)

 # Total number of genotypes:  1000 

 # Population sample sizes:  
  1   2   3   4   5   6   7   8   9  10 
100 100 100 100 100 100 100 100 100 100 

 # Number of alleles per locus:  
locus1A/locus1B locus2A/locus2B locus3A/locus3B locus4A/locus4B locus5A/locus5B 
             18              17              20              17              17 
locus6A/locus6B locus7A/locus7B locus8A/locus8B locus9A/locus9B 
             16              18              16              17 

 # Number of alleles per population:  
  1   2   3   4   5   6   7   8   9  10 
105  84 112 106  94 101  89 111  95 102 

 # Percentage of missing data:  
[1] 0

 # Observed heterozygosity:  
locus1A/locus1B locus2A/locus2B locus3A/locus3B locus4A/locus4B locus5A/locus5B 
          0.860           0.849           0.832           0.838           0.835 
locus6A/locus6B locus7A/locus7B locus8A/locus8B locus9A/locus9B 
          0.808           0.844           0.835           0.828 

 # Expected heterozygosity:  
locus1A/locus1B locus2A/locus2B locus3A/locus3B locus4A/locus4B locus5A/locus5B 
      0.8964225       0.8966850       0.9201180       0.9049695       0.9108455 
locus6A/locus6B locus7A/locus7B locus8A/locus8B locus9A/locus9B 
      0.9065810       0.9123095       0.8640690       0.8976530 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("landgen", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("landgenreport")
> ### * landgenreport
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: landgenreport
> ### Title: Create a landscape genetic report
> ### Aliases: landgenreport
> 
> ### ** Examples
> 
> ## Not run: ##D 
> ##D lc<-landgenreport(cats=landgen, fric.raster=fric.raster, gen.distance="D", NN=4, mk.resistance=TRUE)
> ##D names(lc$leastcost)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("landgenreport", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lgrMMRR")
> ### * lgrMMRR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lgrMMRR
> ### Title: Multiple Matrix Regression with Randomization analysis
> ### Aliases: lgrMMRR
> 
> ### ** Examples
> 
> ## Not run: ##D 
> ##D require(raster)
> ##D data(landgen)
> ##D data(fric.raster)
> ##D glc <- genleastcost(landgen, fric.raster, "D", NN=4, path="leastcost")
> ##D lgrMMRR(glc$gen.mat, glc$cost.mats, glc$eucl.mat, nperm=999)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lgrMMRR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("null.all")
> ### * null.all
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: null.all
> ### Title: Checks for the presence of and determine the frequency of null
> ###   alleles
> ### Aliases: null.all
> 
> ### ** Examples
> 
>  #not run:
>  #data(bilby)
>  #here we use only the first 50 individuals to speep up the example
>  #popgenreport(bilby, mk.null.all=TRUE, mk.pdf=FALSE)
>  
> #to get a pdf output you need to have a running Latex version installed on your system.
> #popgenreport(bilby, mk.null.all=TRUE, mk.pdf=TRUE)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("null.all", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("popgenreport")
> ### * popgenreport
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: popgenreport
> ### Title: This is the main function of the package. It analyses an object
> ###   of class 'genind' and then creates a report containing the results of
> ###   the analysis. There are several routines that can be optionally
> ###   included in the analysis and there are multip output options
> ###   including a PDF with the report, R-code and an object
> ###   ('fname.results') containing all of the results, which can be used
> ###   for further analyses.
> ### Aliases: popgenreport
> 
> ### ** Examples
> 
> #not run:
> #data(bilby) # a generated data set
> #res <- popgenreport(bilby, mk.counts=TRUE, mk.map=TRUE, mk.pdf=FALSE)
> #check results via res or use created tables in the results folder.
> 
> ### RUN ONLY with a working Latex version installed
> # res <- popgenreport(bilby, mk.counts=TRUE, mk.map=TRUE, mk.pdf=TRUE, path.pgr="c:/temp")
> # for a full report in a single pdf set mk.complete to TRUE
> # res <- popgenreport(bilby, mk.complete=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("popgenreport", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.genetable")
> ### * read.genetable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.genetable
> ### Title: Function to convert textfiles into a genind object (the format
> ###   required for popgenreport)
> ### Aliases: read.genetable
> 
> ### ** Examples
> 
> #example file with one column per loci, seperated by forwardslash
> read.csv(paste(.libPaths()[1],"/PopGenReport/extdata/platypus1c.csv", sep="" ))
    ind   pop       lat     long  group    age   loci1   loci2   loci3   loci4
1  T158 Black -40.86642 145.2836 Female    juv 141/145 243/243 159/173 263/265
2  T306 Black -40.85589 145.2764   Male     Ad 145/145 243/243 159/159 265/267
3  T305 Black -40.87889 145.2885 Female     Ad 143/145 243/243 159/159 265/265
4  T148 Black -40.99193 145.3757   Male     Ad 141/141 243/243 159/159 265/265
5  T149 Black -40.99193 145.3757 Female     Ad 141/145 243/245 159/171 265/267
6  T106  Brid -41.23205 147.4597   Male     Ad 145/147 243/245 159/171 267/267
7  T107  Brid -41.23205 147.4597   Male     Ad 145/145 243/243 159/171 267/267
8  T110  Brid -41.23205 147.4597 Female     Ad 145/145 243/245 171/173 263/265
9  T111  Brid -41.23205 147.4597 Female     Ad 141/145 245/245 159/159 267/267
10 T308   Cam -41.09567 145.7958   Male Sub-Ad 145/145 243/243 161/171 265/265
11 T307   Cam -41.06975 145.8152   Male     Ad 141/145 243/243 171/173 265/265
12 T302   Cam -41.05121 145.8280   Male     Ad 141/145 243/243 171/171 265/267
13 T303   Cam -41.04764 145.8230 Female    Juv 141/141 243/243 159/173 265/267
     loci5   loci6
1  215/215 192/192
2  219/219 192/194
3  215/215 194/194
4  215/219 192/194
5  215/215 194/196
6  215/215 192/192
7  215/215 192/192
8  215/215 192/192
9  215/215 192/192
10 215/217 184/196
11 215/219 184/192
12 215/215 192/196
13 215/215 192/194
> platy1c <- read.genetable( paste(.libPaths()[1],"/PopGenReport/extdata/platypus1c.csv"
+ , sep="" ), ind=1, pop=2, lat=3, long=4, other.min=5, other.max=6, oneColPerAll=FALSE, 
+ sep="/", )
> 
> 
> #example file with two columns per loci
> read.csv(paste(.libPaths()[1],"/PopGenReport/extdata/platypus2c.csv", sep="" ))
    ind   pop       lat     long  group    age Allele1a Allele1b Allele2a
1  T158 Black -40.86642 145.2836 Female    juv      141      145      243
2  T306 Black -40.85589 145.2764   Male     Ad      145      145      243
3  T305 Black -40.87889 145.2885 Female     Ad      143      145      243
4  T148 Black -40.99193 145.3757   Male     Ad      141      141      243
5  T149 Black -40.99193 145.3757 Female     Ad      141      145      243
6  T106  Brid -41.23205 147.4597   Male     Ad      145      147      243
7  T107  Brid -41.23205 147.4597   Male     Ad      145      145      243
8  T110  Brid -41.23205 147.4597 Female     Ad      145      145      243
9  T111  Brid -41.23205 147.4597 Female     Ad      141      145      245
10 T308   Cam -41.09567 145.7958   Male Sub-Ad      145      145      243
11 T307   Cam -41.06975 145.8152   Male     Ad      141      145      243
12 T302   Cam -41.05121 145.8280   Male     Ad      141      145      243
13 T303   Cam -41.04764 145.8230 Female    Juv      141      141      243
   Allele2b Allele3a Allele3b Allele4a Allele4b Allele5a Allele5b Allele6a
1       243      159      173      263      265      215      215      192
2       243      159      159      265      267      219      219      192
3       243      159      159      265      265      215      215      194
4       243      159      159      265      265      215      219      192
5       245      159      171      265      267      215      215      194
6       245      159      171      267      267      215      215      192
7       243      159      171      267      267      215      215      192
8       245      171      173      263      265      215      215      192
9       245      159      159      267      267      215      215      192
10      243      161      171      265      265      215      217      184
11      243      171      173      265      265      215      219      184
12      243      171      171      265      267      215      215      192
13      243      159      173      265      267      215      215      192
   Allele6b
1       192
2       194
3       194
4       194
5       196
6       192
7       192
8       192
9       192
10      196
11      192
12      196
13      194
> platy2c <- read.genetable( paste(.libPaths()[1],"/PopGenReport/extdata/platypus2c.csv",
+  sep="" ), ind=1, pop=2, lat=3, long=4, other.min=5, other.max=6, oneColPerAll=TRUE)
> 
> #to get a pdf output you need to have a running Latex version installed on your system.
> #run a report (with a map)
> #res<- popgenreport(platy2c, mk.counts=TRUE, mk.map=TRUE, mk.allele.dist=TRUE, mk.pdf=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.genetable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("spautocor")
> ### * spautocor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: spautocor
> ### Title: Spatial autocorrelation following Smouse and Pekall 1999
> ### Aliases: spautocor
> 
> ### ** Examples
> 
> #not run:
> #data(bilby)
> #popgenreport(bilby, mk.spautocor=TRUE, mk.pdf=FALSE)
> #to get a pdf output you need to have a running Latex version installed on your system.
> #popgenreport(bilby[1:50], mk.spautocor=TRUE, mk.pdf=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("spautocor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("wassermann")
> ### * wassermann
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: wassermann
> ### Title: Partial Mantel tests on costdistance matrices
> ### Aliases: wassermann
> 
> ### ** Examples
> 
> ## Not run: ##D 
> ##D glc <- genleastcost(landgen, fric.raster, "D", NN=8)
> ##D wassermann(eucl.mat = glc$eucl.mat, cost.mats = glc$cost.mats, gen.mat = glc$gen.mat)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("wassermann", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.964 0.27 7.304 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
