
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "svdvis"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "svdvis-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('svdvis')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("radviz")
> ### * radviz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: radviz
> ### Title: Radial Coordinates Plots
> ### Aliases: radviz
> 
> ### ** Examples
> 
> set.seed(1234)
> dat = matrix(rnorm(9*4), 9, 4, dimnames=list(paste(1:9),letters[1:4]))
> radviz(dat, group=c(rep("Group 1",3),rep("Group 2",3),rep("Group 3",3)))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("radviz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("svd.heatmap")
> ### * svd.heatmap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: svd.heatmap
> ### Title: Visualizing Singular Vectors or Principal Components by Heatmaps
> ### Aliases: svd.heatmap
> 
> ### ** Examples
> 
> set.seed(1234)
> dat = matrix(rnorm(1000), 100, 10)
> svd.obj = svd(dat)
> colnames(svd.obj$v) = paste0("V",1:10)
> rownames(svd.obj$v) = paste0("Sample",1:10)
> svd.heatmap(svd.obj, r=5)
[1] "Your input data is treated as a SVD output, with u, d, v corresponding to left singular vector, singular values, and right singular vectors, respectively."
[1] "SVD Heatmap"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("svd.heatmap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("svd.parallel")
> ### * svd.parallel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: svd.parallel
> ### Title: Visualizing Singular Vectors or Principal Components by Parallel
> ###   Coordinates Plots
> ### Aliases: svd.parallel
> 
> ### ** Examples
> 
> set.seed(1234)
> dat = matrix(rnorm(1000), 100, 10)
> svd.obj = svd(dat)
> colnames(svd.obj$v) = paste0("V",1:10)
> rownames(svd.obj$v) = paste0("Sample",1:10)
> svd.parallel(svd.obj, r=4)
[1] "Your input data is treated as a SVD output, with u, d, v corresponding to left singular vector, singular values, and right singular vectors, respectively."
[1] "Parallel Coordinates Plot"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("svd.parallel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("svd.radial")
> ### * svd.radial
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: svd.radial
> ### Title: Visualizing Singular Vectors or Principal Components by Radial
> ###   Coordinates Plots
> ### Aliases: svd.radial
> 
> ### ** Examples
> 
> set.seed(1234)
> dat = matrix(rnorm(1000), 100, 10)
> svd.obj = svd(dat)
> colnames(svd.obj$v) = paste0("V",1:10)
> rownames(svd.obj$v) = paste0("Sample",1:10)
> svd.radial(dat, group=c(rep("Group1",5), rep("Group2",5)))
[1] "Radial Visualization Plots"
[1] "Your input data is treated as (typically, right) singular vectors. For example, it should be svd.obj$v  from a SVD output."
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("svd.radial", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("svd.scatter")
> ### * svd.scatter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: svd.scatter
> ### Title: Visualizing Singular Vectors or Principal Components by
> ###   Scatterplot Matrices
> ### Aliases: svd.scatter
> 
> ### ** Examples
> 
> set.seed(1234)
> dat = matrix(rnorm(1000), 100, 10)
> svd.obj = svd(dat)
> colnames(svd.obj$v) = paste0("V",1:10)
> svd.scatter(svd.obj, r=3, group=c(rep("Group1",5), rep("Group2",5)))
[1] "Your input data is treated as a SVD output, with u, d, v corresponding to left singular vector, singular values, and right singular vectors, respectively."
[1] "Multiple Scatter Plots"
Warning in ggpairs(mv, columns = 1:(r), color = "group", alpha = alpha,  :
  Extra arguments: 'color', 'alpha' are being ignored.  If these are meant to be aesthetics, submit them using the 'mapping' variable within ggpairs with ggplot2::aes or ggplot2::aes_string.
Warning in check_and_set_ggpairs_defaults("diag", diag, continuous = "densityDiag",  :
  changing diag$continuous from 'density' to 'densityDiag'
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("svd.scatter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("svd.scree")
> ### * svd.scree
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: svd.scree
> ### Title: Scree plot
> ### Aliases: svd.scree
> 
> ### ** Examples
> 
> set.seed(1234)
> dat = matrix(rnorm(1000), 100, 10)
> svd.obj = svd(dat)
> colnames(svd.obj$v) = paste0("V",1:10)
> svd.scree(svd.obj)
[1] "Your input data is treated as a SVD output, with u, d, v corresponding to left singular vector, singular values, and right singular vectors, respectively."
[1] "Scree Plot"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("svd.scree", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.491 0.07 2.664 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
