
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ParamHelpers"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "ParamHelpers-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('ParamHelpers')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Param")
> ### * Param
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Param
> ### Title: Create a description object for a parameter.
> ### Aliases: Param makeCharacterParam makeCharacterVectorParam
> ###   makeDiscreteParam makeDiscreteVectorParam makeFunctionParam
> ###   makeIntegerParam makeIntegerVectorParam makeLogicalParam
> ###   makeLogicalVectorParam makeNumericParam makeNumericVectorParam
> ###   makeUntypedParam
> 
> ### ** Examples
> 
> makeNumericParam("x",lower = -1, upper = 1)
     Type len Def  Constr Req Tunable Trafo
1 numeric   -   - -1 to 1   -    TRUE     -
> makeNumericVectorParam("x", len = 2)
           Type len Def               Constr Req Tunable Trafo
1 numericvector   2   - -Inf,-Inf to Inf,Inf   -    TRUE     -
> makeDiscreteParam("y", values = c("a","b"))
      Type len Def Constr Req Tunable Trafo
1 discrete   -   -    a,b   -    TRUE     -
> makeCharacterParam("z")
       Type len Def Constr Req Tunable Trafo
1 character   -   -      -   -   FALSE     -
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Param", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addOptPathEl")
> ### * addOptPathEl
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addOptPathEl
> ### Title: Add a new element to an optimization path.
> ### Aliases: addOptPathEl
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("p1"),
+   makeDiscreteParam("p2", values = c("a", "b"))
+ )
> op = makeOptPathDF(par.set = ps, y.names = "y", minimize = TRUE)
> addOptPathEl(op, x = list(p1 = 7, p2 = "b"), y = 1)
> addOptPathEl(op, x = list(p1 = -1, p2 = "a"), y = 2)
> as.data.frame(op)
  p1 p2 y dob eol
1  7  b 1   1  NA
2 -1  a 2   2  NA
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addOptPathEl", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("discreteNameToValue")
> ### * discreteNameToValue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: discreteNameToValue
> ### Title: Convert encoding name(s) to discrete value(s).
> ### Aliases: discreteNameToValue
> 
> ### ** Examples
> 
> p = makeDiscreteParam("u", values=c(x1 = "a", x2 = "b", x3 = "b"))
> discreteNameToValue(p, "x3")
[1] "b"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("discreteNameToValue", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("discreteValueToName")
> ### * discreteValueToName
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: discreteValueToName
> ### Title: Convert discrete value(s) to encoding name(s).
> ### Aliases: discreteValueToName
> 
> ### ** Examples
> 
> p = makeDiscreteParam("u", values=c(x1="a", x2="b", x3="c"))
> discreteValueToName(p, "b")
[1] "x2"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("discreteValueToName", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("filterParams")
> ### * filterParams
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filterParams
> ### Title: Get parameter subset of only certain parameters.
> ### Aliases: filterParams
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u", lower = 1),
+   makeIntegerParam("v", lower = 1, upper = 2),
+   makeDiscreteParam("w", values = 1:2),
+   makeLogicalParam("x"),
+   makeCharacterParam("s"),
+   makeNumericParam("y", tunable = FALSE)
+ )
> 
> # filter for numeric and integer parameters
> filterParams(ps, type = c("integer", "numeric"))
     Type len Def      Constr Req Tunable Trafo
u numeric   -   -    1 to Inf   -    TRUE     -
v integer   -   -      1 to 2   -    TRUE     -
y numeric   -   - -Inf to Inf   -   FALSE     -
> 
> # filter for tunable, numeric parameters
> filterParams(ps, type = "numeric", tunable = TRUE)
     Type len Def   Constr Req Tunable Trafo
u numeric   -   - 1 to Inf   -    TRUE     -
> 
> # filter for all numeric parameters among "u", "v" and "x"
> filterParams(ps, type = "numeric", ids = c("u", "v", "x"))
     Type len Def   Constr Req Tunable Trafo
u numeric   -   - 1 to Inf   -    TRUE     -
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filterParams", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("generateDesign")
> ### * generateDesign
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: generateDesign
> ### Title: Generates a statistical design for a parameter set.
> ### Aliases: generateDesign
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("x1", lower = -2, upper = 1),
+   makeIntegerParam("x2", lower = 10, upper = 20)
+ )
> # random latin hypercube design with 5 samples:
> generateDesign(5, ps)
          x1 x2
1  0.5235847 19
2 -1.8940659 18
3 -0.9877863 16
4 -0.5695378 10
5  0.2619049 13
> 
> # with trafo
> ps = makeParamSet(
+   makeNumericParam("x", lower = -2, upper = 1),
+   makeNumericVectorParam("y", len = 2, lower = 0, upper = 1, trafo = function(x) x/sum(x))
+ )
> generateDesign(10, ps, trafo = TRUE)
             x         y1        y2
1  -0.05671411 0.55521361 0.4447864
2  -0.84163716 0.29584033 0.7041597
3  -1.56857087 0.68515410 0.3148459
4  -0.72656082 0.09066538 0.9093346
5   0.72120371 0.64228933 0.3577107
6   0.12983985 0.11282444 0.8871756
7  -0.40511849 0.38196955 0.6180304
8  -1.24440972 0.78577221 0.2142278
9   0.59860152 0.51293784 0.4870622
10 -1.87795094 0.83539616 0.1646038
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("generateDesign", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("generateGridDesign")
> ### * generateGridDesign
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: generateGridDesign
> ### Title: Generates a grid design for a parameter set.
> ### Aliases: generateGridDesign
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("x1", lower = -2, upper = 1),
+   makeNumericParam("x2", lower = -2, upper = 2, trafo = function(x) x^2)
+ )
> generateGridDesign(ps, resolution = c(x1 = 4, x2 = 5), trafo = TRUE)
   x1 x2
1  -2  4
2  -1  4
3   0  4
4   1  4
5  -2  1
6  -1  1
7   0  1
8   1  1
9  -2  0
10 -1  0
11  0  0
12  1  0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("generateGridDesign", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getLower")
> ### * getLower
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getLower
> ### Title: Get lower / upper bounds and allowed discrete values for
> ###   parameters.
> ### Aliases: getLower getUpper getValues
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u"),
+   makeIntegerParam("v", lower = 1, upper = 2),
+   makeDiscreteParam("w", values = 1:2),
+   makeNumericVectorParam("x", len = 2, lower = c(0, 10), upper = c(1, 11))
+ )
> getLower(ps)
   u    v    x    x 
-Inf    1    0   10 
> getUpper(ps)
  u   v   x   x 
Inf   2   1  11 
> 
> ps = makeParamSet(
+   makeNumericParam("u"),
+   makeDiscreteParam("v", values = c("a", "b")),
+   makeDiscreteParam("w", values = list(a = list(), b = NULL))
+ )
> getValues(ps)
$v
$v$a
[1] "a"

$v$b
[1] "b"


$w
$w$a
list()

$w$b
NULL


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getLower", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getOptPathBestIndex")
> ### * getOptPathBestIndex
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getOptPathBestIndex
> ### Title: Get index of the best element from optimization path.
> ### Aliases: getOptPathBestIndex
> 
> ### ** Examples
> 
> ps = makeParamSet(makeNumericParam("x"))
> op = makeOptPathDF(par.set = ps, y.names = "y", minimize = TRUE)
> addOptPathEl(op, x = list(x = 1), y = 5)
> addOptPathEl(op, x = list(x = 2), y = 3)
> addOptPathEl(op, x = list(x = 3), y = 9)
> addOptPathEl(op, x = list(x = 4), y = 3)
> as.data.frame(op)
  x y dob eol
1 1 5   1  NA
2 2 3   2  NA
3 3 9   3  NA
4 4 3   4  NA
> getOptPathBestIndex(op)
[1] 4
> getOptPathBestIndex(op, ties = "first")
[1] 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getOptPathBestIndex", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getOptPathParetoFront")
> ### * getOptPathParetoFront
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getOptPathParetoFront
> ### Title: Get indices of pareto front of optimization path.
> ### Aliases: getOptPathParetoFront
> 
> ### ** Examples
> 
> ps = makeParamSet(makeNumericParam("x"))
> op = makeOptPathDF(par.set = ps, y.names = c("y1", "y2"), minimize = c(TRUE, TRUE))
> addOptPathEl(op, x = list(x = 1), y = c(5, 3))
> addOptPathEl(op, x = list(x = 2), y = c(2, 4))
> addOptPathEl(op, x = list(x = 3), y = c(9, 4))
> addOptPathEl(op, x = list(x = 4), y = c(4, 9))
> as.data.frame(op)
  x y1 y2 dob eol
1 1  5  3   1  NA
2 2  2  4   2  NA
3 3  9  4   3  NA
4 4  4  9   4  NA
> getOptPathParetoFront(op)
  y1 y2
1  5  3
2  2  4
> getOptPathParetoFront(op, index = TRUE)
[1] 1 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getOptPathParetoFront", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getParamIds")
> ### * getParamIds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getParamIds
> ### Title: Return ids of parameters in parameter set.
> ### Aliases: getParamIds
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u"),
+   makeIntegerVectorParam("v", len = 2)
+ )
> getParamIds(ps)
[1] "u" "v"
> getParamIds(ps, repeated = TRUE)
[1] "u" "v" "v"
> getParamIds(ps, repeated = TRUE, with.nr = TRUE)
[1] "u"  "v1" "v2"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getParamIds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getParamLengths")
> ### * getParamLengths
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getParamLengths
> ### Title: Return lengths of parameters in parameter set.
> ### Aliases: getParamLengths
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u"),
+   makeIntegerParam("v", lower = 1, upper = 2),
+   makeDiscreteParam("w", values = 1:2),
+   makeDiscreteVectorParam("x", len = 2, values = c("a", "b"))
+ )
> getParamLengths(ps)
u v w x 
1 1 1 2 
> # the length of the vector x is 2, for all other single value parameters the length is 1.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getParamLengths", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getParamNr")
> ### * getParamNr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getParamNr
> ### Title: Return number of parameters in set.
> ### Aliases: getParamNr
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u"),
+   makeDiscreteVectorParam("x", len = 2, values = c("a", "b"))
+ )
> getParamNr(ps)
[1] 2
> getParamNr(ps, devectorize = TRUE)
[1] 3
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getParamNr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isFeasible")
> ### * isFeasible
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isFeasible
> ### Title: Check if parameter value is valid.
> ### Aliases: isFeasible
> 
> ### ** Examples
> 
> p = makeNumericParam("x", lower = -1, upper = 1)
> isFeasible(p, 0) # True
[1] TRUE
> isFeasible(p, 2) # False, out of bounds
[1] FALSE
> isFeasible(p, "a") # False, wrong type
[1] FALSE
> # now for parameter sets
> ps = makeParamSet(
+   makeNumericParam("x", lower = -1, upper = 1),
+   makeDiscreteParam("y", values = c("a", "b"))
+ )
> isFeasible(ps, list(0, "a")) # True
[1] TRUE
> isFeasible(ps, list("a", 0)) # False, wrong order
[1] FALSE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isFeasible", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("makeParamSet")
> ### * makeParamSet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: makeParamSet
> ### Title: Construct a parameter set.
> ### Aliases: ParamSet makeNumericParamSet makeParamSet
> 
> ### ** Examples
> 
> makeParamSet(
+   makeNumericParam("u", lower=1),
+   makeIntegerParam("v", lower=1, upper=2),
+   makeDiscreteParam("w", values=1:2),
+   makeLogicalParam("x"),
+   makeDiscreteVectorParam("y", len=2, values=c("a", "b"))
+ )
            Type len Def   Constr Req Tunable Trafo
u        numeric   -   - 1 to Inf   -    TRUE     -
v        integer   -   -   1 to 2   -    TRUE     -
w       discrete   -   -      1,2   -    TRUE     -
x        logical   -   -        -   -    TRUE     -
y discretevector   2   -      a,b   -    TRUE     -
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("makeParamSet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("paramValueToString")
> ### * paramValueToString
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: paramValueToString
> ### Title: Convert a value to a string.
> ### Aliases: paramValueToString
> 
> ### ** Examples
> 
> p = makeNumericParam("x")
> paramValueToString(p, 1)
[1] "1"
> paramValueToString(p, 1.2345)
[1] "1.23"
> paramValueToString(p, 0.000039)
[1] "3.9e-05"
> paramValueToString(p, 8.13402, num.format = "%.2f")
[1] "8.13"
> 
> p = makeIntegerVectorParam("x", len=2)
> paramValueToString(p, c(1L, 2L))
[1] "1,2"
> 
> p = makeLogicalParam("x")
> paramValueToString(p, TRUE)
[1] "TRUE"
> 
> p = makeDiscreteParam("x", values=list(a=NULL, b=2))
> paramValueToString(p, NULL)
[1] "a"
> 
> ps = makeParamSet(
+   makeNumericVectorParam("x", len=2L),
+   makeDiscreteParam("y", values=list(a=NULL, b=2))
+ )
> paramValueToString(ps, list(x=c(1,2), y=NULL))
[1] "x=1,2; y=a"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("paramValueToString", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sampleValue")
> ### * sampleValue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sampleValue
> ### Title: Sample a random value from a parameter or a parameter set
> ###   uniformly.
> ### Aliases: sampleValue
> 
> ### ** Examples
> 
> # bounds are necessary here, can't sample with Inf bounds:
> u = makeNumericParam("x", lower = 0, upper = 1)
> # returns a random number between 0 and 1:
> sampleValue(u)
[1] 0.2655087
> 
> p = makeDiscreteParam("x", values = c("a","b","c"))
> # can be either "a", "b" or "c"
> sampleValue(p)
[1] "b"
> 
> p = makeIntegerVectorParam("x", len = 2, lower = 1, upper = 5)
> # vector of two random integers between 1 and 5:
> sampleValue(p)
[1] 3 5
> 
> ps = makeParamSet(
+   makeNumericParam("x", lower = 1, upper = 10),
+   makeIntegerParam("y", lower = 1, upper = 10),
+   makeDiscreteParam("z", values = 1:2)
+ )
> sampleValue(ps)
$x
[1] 2.815137

$y
[1] 9

$z
[1] 2

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sampleValue", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sampleValues")
> ### * sampleValues
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sampleValues
> ### Title: Sample n random values from a parameter or a parameter set
> ###   uniformly.
> ### Aliases: sampleValues
> 
> ### ** Examples
> 
> p = makeIntegerParam("x", lower = -10, upper = 10)
> sampleValues(p, 4)
[[1]]
[1] -5

[[2]]
[1] -3

[[3]]
[1] 2

[[4]]
[1] 9

> 
> p = makeNumericParam("x", lower = -10, upper = 10)
> sampleValues(p, 4)
[[1]]
[1] -5.966361

[[2]]
[1] 7.967794

[[3]]
[1] 8.893505

[[4]]
[1] 3.215956

> 
> p = makeLogicalParam("x")
> sampleValues(p, 4)
[[1]]
[1] FALSE

[[2]]
[1] TRUE

[[3]]
[1] TRUE

[[4]]
[1] TRUE

> 
> ps = makeParamSet(
+   makeNumericParam("u", lower = 1, upper = 10),
+   makeIntegerParam("v", lower = 1, upper = 10),
+   makeDiscreteParam("w", values = 1:2)
+ )
> sampleValues(ps, 2)
[[1]]
[[1]]$u
[1] 7.183206

[[1]]$v
[1] 4

[[1]]$w
[1] 2


[[2]]
[[2]]$u
[1] 5.479293

[[2]]$v
[1] 8

[[2]]$w
[1] 2


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sampleValues", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("trafoOptPath")
> ### * trafoOptPath
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: trafoOptPath
> ### Title: Transform optimization path.
> ### Aliases: trafoOptPath
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeIntegerParam("u", trafo=function(x) 2*x),
+   makeNumericVectorParam("v", len=2, trafo=function(x) x/sum(x)),
+   makeDiscreteParam("w", values=c("a", "b"))
+ )
> op = makeOptPathDF(ps, y.names="y", minimize=TRUE)
> addOptPathEl(op, x=list(3, c(2, 4), "a"), y=0, dob=1, eol=1)
> addOptPathEl(op, x=list(4, c(5, 3), "b"), y=2, dob=5, eol=7)
> 
> as.data.frame(op)
  u v1 v2 w y dob eol
1 3  2  4 a 0   1   1
2 4  5  3 b 2   5   7
> op = trafoOptPath(op)
> as.data.frame(op)
  u        v1        v2 w y dob eol
1 6 0.3333333 0.6666667 a 0   1   1
2 8 0.6250000 0.3750000 b 2   5   7
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("trafoOptPath", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("trafoValue")
> ### * trafoValue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: trafoValue
> ### Title: Transform a value.
> ### Aliases: trafoValue
> 
> ### ** Examples
> 
> # transform simple parameter:
> p = makeNumericParam(id="x", trafo=function(x) x^2)
> trafoValue(p, 2)
[1] 4
> # for a parameter set different transformation functions are possible:
> ps = makeParamSet(
+   makeIntegerParam("u", trafo=function(x) 2*x),
+   makeNumericVectorParam("v", len=2, trafo=function(x) x/sum(x)),
+   makeDiscreteParam("w", values=c("a", "b"))
+ )
> # now the values of "u" and "v" are transformed:
> trafoValue(ps, list(3, c(2, 4), "a"))
$u
[1] 6

$v
[1] 0.3333333 0.6666667

$w
[1] "a"

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("trafoValue", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.443 0.028 0.534 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
